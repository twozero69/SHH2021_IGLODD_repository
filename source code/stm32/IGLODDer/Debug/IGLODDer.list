
IGLODDer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005934  08005934  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000004c  08005988  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005988  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130cb  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000208b  00000000  00000000  00033147  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bcce  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcdd  00000000  00000000  0006316e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011815e  00000000  00000000  00070e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  00189024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000004c 	.word	0x2000004c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080058a4 	.word	0x080058a4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000050 	.word	0x20000050
 80001f8:	080058a4 	.word	0x080058a4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_TIM_PeriodElapsedCallback>:
int motorStep1[8]={0x09, 0x01, 0x03, 0x02, 0x06, 0x04, 0x0C, 0x08};	//GPIOC
int motorStep2[8]={0x20, 0x30, 0x10, 0x18, 0x08, 0x0C, 0x04, 0x24};	//GPIOA

uint8_t rxdata[2];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	  if(htim->Instance==TIM4){	//Motor
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a4c      	ldr	r2, [pc, #304]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d15a      	bne.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  if(direction==1&&floor>0){	//down
 800050e:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d124      	bne.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000516:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	dd20      	ble.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x64>
			  GPIOC->ODR=motorStep1[step];
 800051e:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a4a      	ldr	r2, [pc, #296]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000528:	4b49      	ldr	r3, [pc, #292]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800052a:	615a      	str	r2, [r3, #20]
			  GPIOA->ODR=motorStep2[step];
 800052c:	4b46      	ldr	r3, [pc, #280]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a48      	ldr	r2, [pc, #288]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053a:	615a      	str	r2, [r3, #20]
			  step=(step+1)%8;
 800053c:	4b42      	ldr	r3, [pc, #264]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	425a      	negs	r2, r3
 8000544:	f003 0307 	and.w	r3, r3, #7
 8000548:	f002 0207 	and.w	r2, r2, #7
 800054c:	bf58      	it	pl
 800054e:	4253      	negpl	r3, r2
 8000550:	4a3d      	ldr	r2, [pc, #244]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000552:	6013      	str	r3, [r2, #0]
			  floor--;
 8000554:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a3a      	ldr	r2, [pc, #232]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	e031      	b.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  }
		  else if(direction==2&&floor<13000){ //up
 8000560:	4b37      	ldr	r3, [pc, #220]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d126      	bne.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0xba>
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8000570:	4293      	cmp	r3, r2
 8000572:	dc20      	bgt.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0xba>
			  GPIOC->ODR=motorStep1[step];
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a34      	ldr	r2, [pc, #208]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800057a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057e:	4b34      	ldr	r3, [pc, #208]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000580:	615a      	str	r2, [r3, #20]
			  GPIOA->ODR=motorStep2[step];
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000590:	615a      	str	r2, [r3, #20]
			  step=(step+7)%8;
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3307      	adds	r3, #7
 8000598:	425a      	negs	r2, r3
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	f002 0207 	and.w	r2, r2, #7
 80005a2:	bf58      	it	pl
 80005a4:	4253      	negpl	r3, r2
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80005a8:	6013      	str	r3, [r2, #0]
			  floor++;
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a24      	ldr	r2, [pc, #144]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	e006      	b.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  }
		  else{
			  GPIOA->BRR=0x3C;
 80005b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ba:	223c      	movs	r2, #60	; 0x3c
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
			  GPIOC->BRR=0x0F;
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80005c0:	220f      	movs	r2, #15
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
		  }
	  }
	  if(htim->Instance==TIM5){	//Sensor
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d132      	bne.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x138>
		  HAL_ADC_Start(&hadc1);
 80005ce:	4823      	ldr	r0, [pc, #140]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005d0:	f000 ffe4 	bl	800159c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,100);
 80005d4:	2164      	movs	r1, #100	; 0x64
 80005d6:	4821      	ldr	r0, [pc, #132]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005d8:	f001 f843 	bl	8001662 <HAL_ADC_PollForConversion>
		  ADC_data13 = HAL_ADC_GetValue(&hadc1);
 80005dc:	481f      	ldr	r0, [pc, #124]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005de:	f001 f8c8 	bl	8001772 <HAL_ADC_GetValue>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80005e8:	601a      	str	r2, [r3, #0]

		  HAL_ADC_Start(&hadc1);
 80005ea:	481c      	ldr	r0, [pc, #112]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005ec:	f000 ffd6 	bl	800159c <HAL_ADC_Start>
	 	  HAL_ADC_PollForConversion(&hadc1,100);
 80005f0:	2164      	movs	r1, #100	; 0x64
 80005f2:	481a      	ldr	r0, [pc, #104]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005f4:	f001 f835 	bl	8001662 <HAL_ADC_PollForConversion>
	  	  ADC_data14 = HAL_ADC_GetValue(&hadc1);
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005fa:	f001 f8ba 	bl	8001772 <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000604:	601a      	str	r2, [r3, #0]

	  	  if(ADC_data13>3000)
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800060e:	4293      	cmp	r3, r2
 8000610:	dd03      	ble.n	800061a <HAL_TIM_PeriodElapsedCallback+0x11e>
	  		  direction=2;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
	  	  else if(ADC_data14>3000)
	  		  direction=1;
	  	  else
	  		  direction=0;
	  }
  }
 8000618:	e00c      	b.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x138>
	  	  else if(ADC_data14>3000)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000622:	4293      	cmp	r3, r2
 8000624:	dd03      	ble.n	800062e <HAL_TIM_PeriodElapsedCallback+0x132>
	  		  direction=1;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
  }
 800062c:	e002      	b.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x138>
	  		  direction=0;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
  }
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40000800 	.word	0x40000800
 8000640:	20000078 	.word	0x20000078
 8000644:	20000074 	.word	0x20000074
 8000648:	20000070 	.word	0x20000070
 800064c:	20000000 	.word	0x20000000
 8000650:	48000800 	.word	0x48000800
 8000654:	20000020 	.word	0x20000020
 8000658:	40000c00 	.word	0x40000c00
 800065c:	20000114 	.word	0x20000114
 8000660:	20000068 	.word	0x20000068
 8000664:	2000006c 	.word	0x2000006c

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fbfd 	bl	8000e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f816 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f9fe 	bl	8000a74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000678:	f000 f89c 	bl	80007b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800067c:	f000 f910 	bl	80008a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000680:	f000 f95c 	bl	800093c <MX_TIM5_Init>
  MX_UART4_Init();
 8000684:	f000 f9aa 	bl	80009dc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <main+0x30>)
 800068a:	f003 fce7 	bl	800405c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <main+0x34>)
 8000690:	f003 fce4 	bl	800405c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x2c>
 8000696:	bf00      	nop
 8000698:	2000007c 	.word	0x2000007c
 800069c:	200000c8 	.word	0x200000c8

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0bc      	sub	sp, #240	; 0xf0
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 f8f0 	bl	8005894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2294      	movs	r2, #148	; 0x94
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f8e2 	bl	8005894 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f001 ffe9 	bl	80026a8 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80006dc:	f000 fa2a 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e0:	2310      	movs	r3, #16
 80006e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800070a:	233c      	movs	r3, #60	; 0x3c
 800070c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f862 	bl	80027f0 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000732:	f000 f9ff 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fc6e 	bl	800303c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000766:	f000 f9e5 	bl	8000b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_ADC;
 800076a:	f244 0308 	movw	r3, #16392	; 0x4008
 800076e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000770:	2300      	movs	r3, #0
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800077c:	2301      	movs	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000784:	2318      	movs	r3, #24
 8000786:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000798:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fefd 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80007a8:	f000 f9c4 	bl	8000b34 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	37f0      	adds	r7, #240	; 0xf0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007cc:	4a31      	ldr	r2, [pc, #196]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC1_Init+0xdc>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xdc>)
 8000802:	2201      	movs	r2, #1
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC1_Init+0xdc>)
 800080a:	2201      	movs	r2, #1
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC1_Init+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xdc>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC1_Init+0xdc>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC1_Init+0xdc>)
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xdc>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xdc>)
 8000832:	f000 fd69 	bl	8001308 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f97a 	bl	8000b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_ADC1_Init+0xe4>)
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000844:	2306      	movs	r3, #6
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000848:	2304      	movs	r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084c:	237f      	movs	r3, #127	; 0x7f
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000850:	2304      	movs	r3, #4
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_ADC1_Init+0xdc>)
 800085e:	f000 ff95 	bl	800178c <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000868:	f000 f964 	bl	8000b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_ADC1_Init+0xe8>)
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000870:	230c      	movs	r3, #12
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC1_Init+0xdc>)
 800087a:	f000 ff87 	bl	800178c <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000884:	f000 f956 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000114 	.word	0x20000114
 8000894:	50040000 	.word	0x50040000
 8000898:	36902000 	.word	0x36902000
 800089c:	3ac04000 	.word	0x3ac04000

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM4_Init+0x94>)
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_TIM4_Init+0x98>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 120-1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_TIM4_Init+0x94>)
 80008c6:	2277      	movs	r2, #119	; 0x77
 80008c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM4_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM4_Init+0x94>)
 80008d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM4_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM4_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM4_Init+0x94>)
 80008e6:	f003 fb61 	bl	8003fac <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008f0:	f000 f920 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM4_Init+0x94>)
 8000902:	f003 fd3a 	bl	800437a <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 f912 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM4_Init+0x94>)
 800091e:	f003 ff41 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f904 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000007c 	.word	0x2000007c
 8000938:	40000800 	.word	0x40000800

0800093c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM5_Init+0x98>)
 800095c:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_TIM5_Init+0x9c>)
 800095e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1200-1;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_TIM5_Init+0x98>)
 8000962:	f240 42af 	movw	r2, #1199	; 0x4af
 8000966:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM5_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM5_Init+0x98>)
 8000970:	f242 720f 	movw	r2, #9999	; 0x270f
 8000974:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM5_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM5_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM5_Init+0x98>)
 8000984:	f003 fb12 	bl	8003fac <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 f8d1 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM5_Init+0x98>)
 80009a0:	f003 fceb 	bl	800437a <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80009aa:	f000 f8c3 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM5_Init+0x98>)
 80009bc:	f003 fef2 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 f8b5 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000c8 	.word	0x200000c8
 80009d8:	40000c00 	.word	0x40000c00

080009dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_UART4_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_UART4_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_UART4_Init+0x90>)
 80009e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_UART4_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_UART4_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_UART4_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a26:	f003 ff63 	bl	80048f0 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f880 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a38:	f004 fe24 	bl	8005684 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f877 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a4a:	f004 fe59 	bl	8005700 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f86e 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_UART4_Init+0x90>)
 8000a5a:	f004 fdda 	bl	8005612 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f866 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000180 	.word	0x20000180
 8000a70:	40004c00 	.word	0x40004c00

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <MX_GPIO_Init+0xbc>)
 8000ad8:	f001 fdae 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	213c      	movs	r1, #60	; 0x3c
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f001 fda8 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_GPIO_Init+0xbc>)
 8000b00:	f001 fc08 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b04:	233c      	movs	r3, #60	; 0x3c
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f001 fbf9 	bl	8002314 <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <Error_Handler+0x6>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6593      	str	r3, [r2, #88]	; 0x58
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <HAL_ADC_MspInit+0x74>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d123      	bne.n	8000bee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_ADC_MspInit+0x78>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_ADC_MspInit+0x7c>)
 8000bea:	f001 fb93 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	50040000 	.word	0x50040000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_TIM_Base_MspInit+0x78>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d114      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	201e      	movs	r0, #30
 8000c34:	f001 fad9 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c38:	201e      	movs	r0, #30
 8000c3a:	f001 faf2 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c3e:	e018      	b.n	8000c72 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_TIM_Base_MspInit+0x80>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d113      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0x7c>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2103      	movs	r1, #3
 8000c66:	2032      	movs	r0, #50	; 0x32
 8000c68:	f001 fabf 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c6c:	2032      	movs	r0, #50	; 0x32
 8000c6e:	f001 fad8 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40000c00 	.word	0x40000c00

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_UART_MspInit+0x8c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d130      	bne.n	8000d0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cea:	2308      	movs	r3, #8
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fb0c 	bl	8002314 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2034      	movs	r0, #52	; 0x34
 8000d02:	f001 fa72 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d06:	2034      	movs	r0, #52	; 0x34
 8000d08:	f001 fa8b 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004c00 	.word	0x40004c00
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f8d4 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM4_IRQHandler+0x10>)
 8000d76:	f003 f9e1 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000007c 	.word	0x2000007c

08000d84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM5_IRQHandler+0x10>)
 8000d8a:	f003 f9d7 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000c8 	.word	0x200000c8

08000d98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <UART4_IRQHandler+0x10>)
 8000d9e:	f003 fdf7 	bl	8004990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000180 	.word	0x20000180

08000dac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <SystemInit+0x64>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <SystemInit+0x64>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <SystemInit+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <SystemInit+0x68>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <SystemInit+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <SystemInit+0x68>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <SystemInit+0x68>)
 8000dd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ddc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <SystemInit+0x68>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <SystemInit+0x68>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <SystemInit+0x68>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <SystemInit+0x68>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x64>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	40021000 	.word	0x40021000

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff ffc6 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
	ldr	r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e3c:	f842 3b04 	str.w	r3, [r2], #4

08000e40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LoopForever+0x16>)
	cmp	r2, r3
 8000e42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 fd01 	bl	800584c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fc0d 	bl	8000668 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e50:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000e54:	0800593c 	.word	0x0800593c
	ldr	r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e5c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8000e60:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8000e64:	20000210 	.word	0x20000210

08000e68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_IRQHandler>

08000e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f001 f9ad 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f80e 	bl	8000e9c <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e001      	b.n	8000e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8c:	f7ff fe56 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d023      	beq.n	8000ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_InitTick+0x70>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_InitTick+0x6c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f9b9 	bl	800223e <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d809      	bhi.n	8000eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f001 f983 	bl	80021ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_InitTick+0x74>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e007      	b.n	8000efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e004      	b.n	8000efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000048 	.word	0x20000048
 8000f0c:	20000040 	.word	0x20000040
 8000f10:	20000044 	.word	0x20000044

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000048 	.word	0x20000048
 8000f38:	2000020c 	.word	0x2000020c

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000020c 	.word	0x2000020c

08000f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3360      	adds	r3, #96	; 0x60
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <LL_ADC_SetOffset+0x44>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	4313      	orrs	r3, r2
 8000fec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	03fff000 	.word	0x03fff000

08001004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3360      	adds	r3, #96	; 0x60
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	431a      	orrs	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3330      	adds	r3, #48	; 0x30
 80010c2:	461a      	mov	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	4413      	add	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	211f      	movs	r1, #31
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0e9b      	lsrs	r3, r3, #26
 80010ea:	f003 011f 	and.w	r1, r3, #31
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3314      	adds	r3, #20
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	0e5b      	lsrs	r3, r3, #25
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	0d1b      	lsrs	r3, r3, #20
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2107      	movs	r1, #7
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	0d1b      	lsrs	r3, r3, #20
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0318 	and.w	r3, r3, #24
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001184:	40d9      	lsrs	r1, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	400b      	ands	r3, r1
 800118a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118e:	431a      	orrs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	0007ffff 	.word	0x0007ffff

080011a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <LL_ADC_IsEnabled+0x18>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <LL_ADC_IsEnabled+0x1a>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e12d      	b.n	800157e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fc27 	bl	8000b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff3f 	bl	80011cc <LL_ADC_IsDeepPowerDownEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff25 	bl	80011a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff5a 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d113      	bne.n	8001396 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff3e 	bl	80011f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001378:	4b83      	ldr	r3, [pc, #524]	; (8001588 <HAL_ADC_Init+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	4a83      	ldr	r2, [pc, #524]	; (800158c <HAL_ADC_Init+0x284>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff3e 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10d      	bne.n	80013c2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff77 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 80013cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80c8 	bne.w	800156c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80c4 	bne.w	800156c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013ec:	f043 0202 	orr.w	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff37 	bl	800126c <LL_ADC_IsEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10b      	bne.n	800141c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001404:	4862      	ldr	r0, [pc, #392]	; (8001590 <HAL_ADC_Init+0x288>)
 8001406:	f7ff ff31 	bl	800126c <LL_ADC_IsEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4619      	mov	r1, r3
 8001416:	485f      	ldr	r0, [pc, #380]	; (8001594 <HAL_ADC_Init+0x28c>)
 8001418:	f7ff fd9c 	bl	8000f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e5b      	ldrb	r3, [r3, #25]
 8001420:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001426:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800142c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001432:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045b      	lsls	r3, r3, #17
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_ADC_Init+0x290>)
 800147c:	4013      	ands	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	430b      	orrs	r3, r1
 8001486:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff14 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 8001492:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff21 	bl	80012e0 <LL_ADC_INJ_IsConversionOngoing>
 800149e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d140      	bne.n	8001528 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d13d      	bne.n	8001528 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e1b      	ldrb	r3, [r3, #24]
 80014b4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ce:	f023 0306 	bic.w	r3, r3, #6
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	430b      	orrs	r3, r1
 80014da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d118      	bne.n	8001518 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014fc:	4311      	orrs	r1, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001508:	430a      	orrs	r2, r1
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	e007      	b.n	8001528 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10c      	bne.n	800154a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f023 010f 	bic.w	r1, r3, #15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	1e5a      	subs	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
 8001548:	e007      	b.n	800155a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 020f 	bic.w	r2, r2, #15
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	659a      	str	r2, [r3, #88]	; 0x58
 800156a:	e007      	b.n	800157c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f043 0210 	orr.w	r2, r3, #16
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800157c:	7ffb      	ldrb	r3, [r7, #31]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000040 	.word	0x20000040
 800158c:	053e2d63 	.word	0x053e2d63
 8001590:	50040000 	.word	0x50040000
 8001594:	50040300 	.word	0x50040300
 8001598:	fff0c007 	.word	0xfff0c007

0800159c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe86 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d14f      	bne.n	8001654 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Start+0x26>
 80015be:	2302      	movs	r3, #2
 80015c0:	e04b      	b.n	800165a <HAL_ADC_Start+0xbe>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fcd8 	bl	8001f80 <ADC_Enable>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d137      	bne.n	800164a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fa:	d106      	bne.n	800160a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	f023 0206 	bic.w	r2, r3, #6
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
 8001608:	e002      	b.n	8001610 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	221c      	movs	r2, #28
 8001616:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001636:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe25 	bl	8001292 <LL_ADC_REG_StartConversion>
 8001648:	e006      	b.n	8001658 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001652:	e001      	b.n	8001658 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001654:	2302      	movs	r3, #2
 8001656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d102      	bne.n	800167a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001674:	2308      	movs	r3, #8
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e010      	b.n	800169c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f043 0220 	orr.w	r2, r3, #32
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e068      	b.n	800176a <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001698:	2304      	movs	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800169c:	f7ff fc4e 	bl	8000f3c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a2:	e01a      	b.n	80016da <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016aa:	d016      	beq.n	80016da <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ac:	f7ff fc46 	bl	8000f3c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d302      	bcc.n	80016c2 <HAL_ADC_PollForConversion+0x60>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e047      	b.n	800176a <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0dd      	beq.n	80016a4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fcc7 	bl	800108c <LL_ADC_REG_IsTriggerSourceSWStart>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e5b      	ldrb	r3, [r3, #25]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d118      	bne.n	800173e <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b08      	cmp	r3, #8
 8001718:	d111      	bne.n	800173e <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d104      	bne.n	8001756 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2208      	movs	r2, #8
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e008      	b.n	8001768 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	220c      	movs	r2, #12
 8001766:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0b6      	sub	sp, #216	; 0xd8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x22>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e3d4      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x7cc>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fd7d 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 83b9 	bne.w	8001f3a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d824      	bhi.n	800181a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	3b02      	subs	r3, #2
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d81b      	bhi.n	8001812 <HAL_ADC_ConfigChannel+0x86>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_ADC_ConfigChannel+0x54>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080017f9 	.word	0x080017f9
 80017e8:	08001801 	.word	0x08001801
 80017ec:	08001809 	.word	0x08001809
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	220c      	movs	r2, #12
 80017f4:	605a      	str	r2, [r3, #4]
          break;
 80017f6:	e011      	b.n	800181c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2212      	movs	r2, #18
 80017fc:	605a      	str	r2, [r3, #4]
          break;
 80017fe:	e00d      	b.n	800181c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2218      	movs	r2, #24
 8001804:	605a      	str	r2, [r3, #4]
          break;
 8001806:	e009      	b.n	800181c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	605a      	str	r2, [r3, #4]
          break;
 8001810:	e004      	b.n	800181c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2206      	movs	r2, #6
 8001816:	605a      	str	r2, [r3, #4]
          break;
 8001818:	e000      	b.n	800181c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800181a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	f7ff fc42 	bl	80010b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fd41 	bl	80012ba <LL_ADC_REG_IsConversionOngoing>
 8001838:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fd4d 	bl	80012e0 <LL_ADC_INJ_IsConversionOngoing>
 8001846:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 81c1 	bne.w	8001bd6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 81bc 	bne.w	8001bd6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001866:	d10f      	bne.n	8001888 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff fc49 	bl	800110a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fbf0 	bl	8001066 <LL_ADC_SetSamplingTimeCommonConfig>
 8001886:	e00e      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	461a      	mov	r2, r3
 8001896:	f7ff fc38 	bl	800110a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fbe0 	bl	8001066 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d00a      	beq.n	80018de <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018d8:	f7ff fb70 	bl	8000fbc <LL_ADC_SetOffset>
 80018dc:	e17b      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fb8d 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_ADC_ConfigChannel+0x17e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb82 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	e01e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x1bc>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb77 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800192c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e004      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800193c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1d4>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	e018      	b.n	8001992 <HAL_ADC_ConfigChannel+0x206>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800197c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001984:	2320      	movs	r3, #32
 8001986:	e004      	b.n	8001992 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001992:	429a      	cmp	r2, r3
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fb46 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fb2a 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x244>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb1f 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	e01e      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x282>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb14 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x29a>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e018      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x2cc>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fae3 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fac7 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x30a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2102      	movs	r1, #2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fabc 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	e01e      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x348>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fab1 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x360>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e016      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x38e>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e004      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d106      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa82 	bl	8001030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2103      	movs	r1, #3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fa66 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10a      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x3cc>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2103      	movs	r1, #3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa5b 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	f003 021f 	and.w	r2, r3, #31
 8001b56:	e017      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x3fc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fa50 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	e003      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x414>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	e011      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x438>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	e003      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d106      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2103      	movs	r1, #3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa2d 	bl	8001030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fb46 	bl	800126c <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 8140 	bne.w	8001e68 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f7ff fab3 	bl	8001160 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4a8f      	ldr	r2, [pc, #572]	; (8001e3c <HAL_ADC_ConfigChannel+0x6b0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	f040 8131 	bne.w	8001e68 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10b      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x4a2>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2b09      	cmp	r3, #9
 8001c24:	bf94      	ite	ls
 8001c26:	2301      	movls	r3, #1
 8001c28:	2300      	movhi	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	e019      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x4d6>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c46:	2320      	movs	r3, #32
 8001c48:	e003      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d079      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x4f6>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	3301      	adds	r3, #1
 8001c7a:	069b      	lsls	r3, r3, #26
 8001c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c80:	e015      	b.n	8001cae <HAL_ADC_ConfigChannel+0x522>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	069b      	lsls	r3, r3, #26
 8001caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x542>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0e9b      	lsrs	r3, r3, #26
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	e017      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x572>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e003      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	ea42 0103 	orr.w	r1, r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x598>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0e9b      	lsrs	r3, r3, #26
 8001d14:	3301      	adds	r3, #1
 8001d16:	f003 021f 	and.w	r2, r3, #31
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	051b      	lsls	r3, r3, #20
 8001d22:	e018      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x5ca>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d56:	430b      	orrs	r3, r1
 8001d58:	e081      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x5ea>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d74:	e015      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x616>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	069b      	lsls	r3, r3, #26
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x636>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	e017      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x666>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	61fb      	str	r3, [r7, #28]
  return result;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e003      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	ea42 0103 	orr.w	r1, r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x692>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	051b      	lsls	r3, r3, #20
 8001e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	e01e      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x6d0>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	613b      	str	r3, [r7, #16]
  return result;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e006      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x6bc>
 8001e3a:	bf00      	nop
 8001e3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f003 021f 	and.w	r2, r3, #31
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	051b      	lsls	r3, r3, #20
 8001e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6892      	ldr	r2, [r2, #8]
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7ff f951 	bl	800110a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d06b      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e74:	483b      	ldr	r0, [pc, #236]	; (8001f64 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e76:	f7ff f893 	bl	8000fa0 <LL_ADC_GetCommonPathInternalCh>
 8001e7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d126      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d120      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_ADC_ConfigChannel+0x7e0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d156      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	482e      	ldr	r0, [pc, #184]	; (8001f64 <HAL_ADC_ConfigChannel+0x7d8>)
 8001eaa:	f7ff f866 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_ADC_ConfigChannel+0x7e4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_ADC_ConfigChannel+0x7e8>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	099a      	lsrs	r2, r3, #6
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed4:	e03a      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_ADC_ConfigChannel+0x7ec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d113      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x77c>
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_ADC_ConfigChannel+0x7e0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d12a      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efe:	4619      	mov	r1, r3
 8001f00:	4818      	ldr	r0, [pc, #96]	; (8001f64 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f02:	f7ff f83a 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f06:	e021      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_ADC_ConfigChannel+0x7f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11c      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_ADC_ConfigChannel+0x7e0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f30:	4619      	mov	r1, r3
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f34:	f7ff f821 	bl	8000f7a <LL_ADC_SetCommonPathInternalCh>
 8001f38:	e008      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f54:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	37d8      	adds	r7, #216	; 0xd8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	80080000 	.word	0x80080000
 8001f64:	50040300 	.word	0x50040300
 8001f68:	c7520000 	.word	0xc7520000
 8001f6c:	50040000 	.word	0x50040000
 8001f70:	20000040 	.word	0x20000040
 8001f74:	053e2d63 	.word	0x053e2d63
 8001f78:	cb840000 	.word	0xcb840000
 8001f7c:	80000001 	.word	0x80000001

08001f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f96d 	bl	800126c <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d146      	bne.n	8002026 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <ADC_Enable+0xb0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e032      	b.n	8002028 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f93c 	bl	8001244 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe ffb6 	bl	8000f3c <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd2:	e021      	b.n	8002018 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f947 	bl	800126c <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f92b 	bl	8001244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fee:	f7fe ffa5 	bl	8000f3c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d90d      	bls.n	8002018 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f043 0210 	orr.w	r2, r3, #16
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d1d6      	bne.n	8001fd4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	8000003f 	.word	0x8000003f

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d005      	beq.n	800227a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2204      	movs	r2, #4
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e047      	b.n	800230a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 020e 	bic.w	r2, r2, #14
 8002288:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 021c 	and.w	r2, r3, #28
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022c6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00c      	beq.n	80022ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022e8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
    }
  }
  return status;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e166      	b.n	80025f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8158 	beq.w	80025ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00b      	beq.n	800235c <HAL_GPIO_Init+0x48>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d007      	beq.n	800235c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002350:	2b11      	cmp	r3, #17
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0xea>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d123      	bne.n	8002446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	6939      	ldr	r1, [r7, #16]
 8002442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0203 	and.w	r2, r3, #3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80b2 	beq.w	80025ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002488:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	4a60      	ldr	r2, [pc, #384]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6613      	str	r3, [r2, #96]	; 0x60
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a0:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ca:	d02b      	beq.n	8002524 <HAL_GPIO_Init+0x210>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_GPIO_Init+0x304>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d025      	beq.n	8002520 <HAL_GPIO_Init+0x20c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a51      	ldr	r2, [pc, #324]	; (800261c <HAL_GPIO_Init+0x308>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01f      	beq.n	800251c <HAL_GPIO_Init+0x208>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d019      	beq.n	8002518 <HAL_GPIO_Init+0x204>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_GPIO_Init+0x310>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x200>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4e      	ldr	r2, [pc, #312]	; (8002628 <HAL_GPIO_Init+0x314>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1fc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_GPIO_Init+0x318>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1f8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_GPIO_Init+0x31c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1f4>
 8002504:	2307      	movs	r3, #7
 8002506:	e00e      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002508:	2308      	movs	r3, #8
 800250a:	e00c      	b.n	8002526 <HAL_GPIO_Init+0x212>
 800250c:	2306      	movs	r3, #6
 800250e:	e00a      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002510:	2305      	movs	r3, #5
 8002512:	e008      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002514:	2304      	movs	r3, #4
 8002516:	e006      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002518:	2303      	movs	r3, #3
 800251a:	e004      	b.n	8002526 <HAL_GPIO_Init+0x212>
 800251c:	2302      	movs	r3, #2
 800251e:	e002      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_GPIO_Init+0x212>
 8002524:	2300      	movs	r3, #0
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	f002 0203 	and.w	r2, r2, #3
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	4093      	lsls	r3, r2
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002536:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_GPIO_Init+0x300>)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_GPIO_Init+0x320>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_GPIO_Init+0x320>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_GPIO_Init+0x320>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002592:	4a28      	ldr	r2, [pc, #160]	; (8002634 <HAL_GPIO_Init+0x320>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_GPIO_Init+0x320>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f ae91 	bne.w	8002324 <HAL_GPIO_Init+0x10>
  }
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	48000c00 	.word	0x48000c00
 8002624:	48001000 	.word	0x48001000
 8002628:	48001400 	.word	0x48001400
 800262c:	48001800 	.word	0x48001800
 8002630:	48001c00 	.word	0x48001c00
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002654:	e002      	b.n	800265c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d102      	bne.n	8002680 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800267a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267e:	e00b      	b.n	8002698 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268e:	d102      	bne.n	8002696 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002694:	e000      	b.n	8002698 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002696:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d141      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b6:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d131      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c4:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026dc:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2232      	movs	r2, #50	; 0x32
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	e002      	b.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d102      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d158      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e057      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002738:	e04d      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d141      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d131      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2232      	movs	r2, #50	; 0x32
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	e002      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d102      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d112      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e011      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c4:	e007      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40007000 	.word	0x40007000
 80027e8:	20000040 	.word	0x20000040
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f000 bc16 	b.w	8003030 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002804:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280e:	4b9e      	ldr	r3, [pc, #632]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80e4 	beq.w	80029ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_RCC_OscConfig+0x4c>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	f040 808b 	bne.w	800294a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	f040 8087 	bne.w	800294a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x64>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e3ed      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_RCC_OscConfig+0x7e>
 8002864:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	e005      	b.n	800287a <HAL_RCC_OscConfig+0x8a>
 800286e:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287a:	4293      	cmp	r3, r2
 800287c:	d223      	bcs.n	80028c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fdc8 	bl	8003418 <RCC_SetFlashLatencyFromMSIRange>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e3ce      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4977      	ldr	r1, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	4972      	ldr	r1, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	e025      	b.n	8002912 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	496a      	ldr	r1, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	4965      	ldr	r1, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fd88 	bl	8003418 <RCC_SetFlashLatencyFromMSIRange>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e38e      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002912:	f000 fcbf 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <HAL_RCC_OscConfig+0x29c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_OscConfig+0x2a0>)
 8002930:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x2a4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fab0 	bl	8000e9c <HAL_InitTick>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d052      	beq.n	80029ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	e372      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d032      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002952:	4b4d      	ldr	r3, [pc, #308]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4c      	ldr	r2, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800295e:	f7fe faed 	bl	8000f3c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002966:	f7fe fae9 	bl	8000f3c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e35b      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	493a      	ldr	r1, [pc, #232]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4935      	ldr	r1, [pc, #212]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
 80029b6:	e01a      	b.n	80029ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c4:	f7fe faba 	bl	8000f3c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029cc:	f7fe fab6 	bl	8000f3c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e328      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1dc>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d073      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x21c>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d10e      	bne.n	8002a24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d063      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d15f      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e305      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x24c>
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0x288>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x270>
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0x288>
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <HAL_RCC_OscConfig+0x298>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fa5c 	bl	8000f3c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a86:	e010      	b.n	8002aaa <HAL_RCC_OscConfig+0x2ba>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080058cc 	.word	0x080058cc
 8002a90:	20000040 	.word	0x20000040
 8002a94:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fa50 	bl	8000f3c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e2c2      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aaa:	4baf      	ldr	r3, [pc, #700]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x2a8>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa40 	bl	8000f3c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fa3c 	bl	8000f3c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e2ae      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad2:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d0>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d060      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x310>
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d116      	bne.n	8002b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b00:	4b99      	ldr	r3, [pc, #612]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x328>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e28b      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	4990      	ldr	r1, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2c:	e040      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d023      	beq.n	8002b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b36:	4b8c      	ldr	r3, [pc, #560]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a8b      	ldr	r2, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe f9fb 	bl	8000f3c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe f9f7 	bl	8000f3c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e269      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5c:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	497c      	ldr	r1, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
 8002b7c:	e018      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a79      	ldr	r2, [pc, #484]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe f9d7 	bl	8000f3c <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe f9d3 	bl	8000f3c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e245      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba4:	4b70      	ldr	r3, [pc, #448]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc4:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bca:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f9b2 	bl	8000f3c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f9ae 	bl	8000f3c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e220      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <HAL_RCC_OscConfig+0x3ec>
 8002bfc:	e01b      	b.n	8002c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fe f995 	bl	8000f3c <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe f991 	bl	8000f3c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e203      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ef      	bne.n	8002c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80a6 	beq.w	8002d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c48:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c70:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_RCC_OscConfig+0x57c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d118      	bne.n	8002cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x57c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x57c>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c88:	f7fe f958 	bl	8000f3c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe f954 	bl	8000f3c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1c6      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCC_OscConfig+0x57c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4d8>
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc6:	e024      	b.n	8002d12 <HAL_RCC_OscConfig+0x522>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d110      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x502>
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf0:	e00f      	b.n	8002d12 <HAL_RCC_OscConfig+0x522>
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe f90f 	bl	8000f3c <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe f90b 	bl	8000f3c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e17b      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ed      	beq.n	8002d22 <HAL_RCC_OscConfig+0x532>
 8002d46:	e01a      	b.n	8002d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe f8f8 	bl	8000f3c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d4e:	e00f      	b.n	8002d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe f8f4 	bl	8000f3c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d906      	bls.n	8002d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e164      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d70:	4ba8      	ldr	r3, [pc, #672]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e8      	bne.n	8002d50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4ba3      	ldr	r3, [pc, #652]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4aa2      	ldr	r2, [pc, #648]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d03c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01c      	beq.n	8002dde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002da4:	4b9b      	ldr	r3, [pc, #620]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002daa:	4a9a      	ldr	r2, [pc, #616]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe f8c2 	bl	8000f3c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dbc:	f7fe f8be 	bl	8000f3c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e130      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dce:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCC_OscConfig+0x5cc>
 8002ddc:	e01b      	b.n	8002e16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de4:	4a8b      	ldr	r2, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe f8a5 	bl	8000f3c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df6:	f7fe f8a1 	bl	8000f3c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e113      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e08:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ef      	bne.n	8002df6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8107 	beq.w	800302e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	f040 80cb 	bne.w	8002fc0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d12c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d123      	bne.n	8002e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d11b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d113      	bne.n	8002e98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d109      	bne.n	8002e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d06d      	beq.n	8002f74 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d068      	beq.n	8002f70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0ba      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002eba:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a55      	ldr	r2, [pc, #340]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec6:	f7fe f839 	bl	8000f3c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe f835 	bl	8000f3c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0a7      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eec:	4b49      	ldr	r3, [pc, #292]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCC_OscConfig+0x828>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0112      	lsls	r2, r2, #4
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f06:	0212      	lsls	r2, r2, #8
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f0e:	0852      	lsrs	r2, r2, #1
 8002f10:	3a01      	subs	r2, #1
 8002f12:	0552      	lsls	r2, r2, #21
 8002f14:	4311      	orrs	r1, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0652      	lsls	r2, r2, #25
 8002f20:	4311      	orrs	r1, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f26:	06d2      	lsls	r2, r2, #27
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	493a      	ldr	r1, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f30:	4b38      	ldr	r3, [pc, #224]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a37      	ldr	r2, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a34      	ldr	r2, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f48:	f7fd fff8 	bl	8000f3c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd fff4 	bl	8000f3c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e066      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f62:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6e:	e05e      	b.n	800302e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e05d      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d156      	bne.n	800302e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a23      	ldr	r2, [pc, #140]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f98:	f7fd ffd0 	bl	8000f3c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd ffcc 	bl	8000f3c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e03e      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x7b0>
 8002fbe:	e036      	b.n	800302e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d031      	beq.n	800302a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fe4:	f023 0303 	bic.w	r3, r3, #3
 8002fe8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_OscConfig+0x824>)
 8002ff0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fd ff9f 	bl	8000f3c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fd ff9b 	bl	8000f3c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d905      	bls.n	800301c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e00d      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
 8003014:	40021000 	.word	0x40021000
 8003018:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x848>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ec      	bne.n	8003002 <HAL_RCC_OscConfig+0x812>
 8003028:	e001      	b.n	800302e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e10f      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b89      	ldr	r3, [pc, #548]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b86      	ldr	r3, [pc, #536]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 020f 	bic.w	r2, r3, #15
 800306a:	4984      	ldr	r1, [pc, #528]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0f7      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8089 	beq.w	80031a4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d133      	bne.n	8003102 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0e4      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80030aa:	f000 fa0f 	bl	80034cc <RCC_GetSysClockFreqFromPLLSource>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b74      	ldr	r3, [pc, #464]	; (8003284 <HAL_RCC_ClockConfig+0x248>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d955      	bls.n	8003162 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ca:	4a6d      	ldr	r2, [pc, #436]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e044      	b.n	8003162 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03e      	beq.n	8003162 <HAL_RCC_ClockConfig+0x126>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d13a      	bne.n	8003162 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030ec:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f4:	4a62      	ldr	r2, [pc, #392]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e02f      	b.n	8003162 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0ac      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	4b57      	ldr	r3, [pc, #348]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0a0      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e098      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003142:	f000 f8a7 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <HAL_RCC_ClockConfig+0x248>)
 800314a:	429a      	cmp	r2, r3
 800314c:	d909      	bls.n	8003162 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003156:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4944      	ldr	r1, [pc, #272]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fd fee2 	bl	8000f3c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fd fede 	bl	8000f3c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e070      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b33      	ldr	r3, [pc, #204]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4930      	ldr	r1, [pc, #192]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d210      	bcs.n	8003206 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 020f 	bic.w	r2, r3, #15
 80031ec:	4923      	ldr	r1, [pc, #140]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_RCC_ClockConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e036      	b.n	8003274 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4918      	ldr	r1, [pc, #96]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4910      	ldr	r1, [pc, #64]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003244:	f000 f826 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003248:	4601      	mov	r1, r0
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCC_ClockConfig+0x244>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_RCC_ClockConfig+0x24c>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x250>)
 8003262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x254>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fe17 	bl	8000e9c <HAL_InitTick>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]

  return status;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40022000 	.word	0x40022000
 8003280:	40021000 	.word	0x40021000
 8003284:	04c4b400 	.word	0x04c4b400
 8003288:	080058cc 	.word	0x080058cc
 800328c:	20000040 	.word	0x20000040
 8003290:	20000044 	.word	0x20000044

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x34>
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d121      	bne.n	8003306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d11e      	bne.n	8003306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032c8:	4b33      	ldr	r3, [pc, #204]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e005      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e4:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003304:	e00a      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d102      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e004      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d101      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800331a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d133      	bne.n	800338a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0xa4>
 8003332:	2b03      	cmp	r3, #3
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0xaa>
 8003336:	e005      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800333a:	617b      	str	r3, [r7, #20]
      break;
 800333c:	e005      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003340:	617b      	str	r3, [r7, #20]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	617b      	str	r3, [r7, #20]
      break;
 8003348:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	3301      	adds	r3, #1
 8003356:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	fb02 f203 	mul.w	r2, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_GetSysClockFreq+0x104>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0e5b      	lsrs	r3, r3, #25
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800338a:	69bb      	ldr	r3, [r7, #24]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3724      	adds	r7, #36	; 0x24
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40021000 	.word	0x40021000
 800339c:	080058e4 	.word	0x080058e4
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000040 	.word	0x20000040

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	080058dc 	.word	0x080058dc

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033f0:	f7ff ffda 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f4:	4601      	mov	r1, r0
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003402:	5cd3      	ldrb	r3, [r2, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	080058dc 	.word	0x080058dc

08003418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f91a 	bl	8002668 <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
 8003436:	e014      	b.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f90a 	bl	8002668 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003468:	d10b      	bne.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d913      	bls.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2ba0      	cmp	r3, #160	; 0xa0
 8003474:	d902      	bls.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003476:	2302      	movs	r3, #2
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e00d      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800347c:	2301      	movs	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e00a      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b7f      	cmp	r3, #127	; 0x7f
 8003486:	d902      	bls.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003488:	2302      	movs	r3, #2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e004      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b70      	cmp	r3, #112	; 0x70
 8003492:	d101      	bne.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 020f 	bic.w	r2, r3, #15
 80034a0:	4909      	ldr	r1, [pc, #36]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40022000 	.word	0x40022000

080034cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d118      	bne.n	8003514 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034e2:	4b2a      	ldr	r3, [pc, #168]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034ee:	4b27      	ldr	r3, [pc, #156]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e005      	b.n	800350a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800350a:	4a21      	ldr	r2, [pc, #132]	; (8003590 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d002      	beq.n	800352a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003524:	2b03      	cmp	r3, #3
 8003526:	d003      	beq.n	8003530 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003528:	e005      	b.n	8003536 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800352c:	613b      	str	r3, [r7, #16]
    break;
 800352e:	e005      	b.n	800353c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003532:	613b      	str	r3, [r7, #16]
    break;
 8003534:	e002      	b.n	800353c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	613b      	str	r3, [r7, #16]
    break;
 800353a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0e5b      	lsrs	r3, r3, #25
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800357c:	683b      	ldr	r3, [r7, #0]
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	080058e4 	.word	0x080058e4
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a4:	2300      	movs	r3, #0
 80035a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d00b      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d804      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d015      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035cc:	e01d      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80035ce:	2b60      	cmp	r3, #96	; 0x60
 80035d0:	d01e      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d01c      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035d6:	e018      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035d8:	4b86      	ldr	r3, [pc, #536]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a85      	ldr	r2, [pc, #532]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e4:	e015      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fafd 	bl	8003bec <RCCEx_PLLSAI1_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f6:	e00c      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3320      	adds	r3, #32
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fbe4 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003608:	e003      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	74fb      	strb	r3, [r7, #19]
      break;
 800360e:	e000      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003618:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	4973      	ldr	r1, [pc, #460]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800362e:	e001      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d042      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d00f      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d805      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d017      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800365a:	e01f      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800365c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003660:	d01f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d01c      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003668:	e018      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366a:	4b62      	ldr	r3, [pc, #392]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a61      	ldr	r2, [pc, #388]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003676:	e015      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fab4 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3320      	adds	r3, #32
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fb9b 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	74fb      	strb	r3, [r7, #19]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	494e      	ldr	r1, [pc, #312]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80036c0:	e001      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 809f 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6593      	str	r3, [r2, #88]	; 0x58
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003716:	f7fd fc11 	bl	8000f3c <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371c:	e009      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fd fc0d 	bl	8000f3c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d902      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	74fb      	strb	r3, [r7, #19]
        break;
 8003730:	e005      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ef      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d15b      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	429a      	cmp	r2, r3
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800378e:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fbcc 	bl	8000f3c <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	e00b      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd fbc8 	bl	8000f3c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d902      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	74fb      	strb	r3, [r7, #19]
            break;
 80037be:	e006      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ec      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10c      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	74bb      	strb	r3, [r7, #18]
 80037f2:	e005      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003800:	7c7b      	ldrb	r3, [r7, #17]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	4a9f      	ldr	r2, [pc, #636]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381e:	4b9a      	ldr	r3, [pc, #616]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	4996      	ldr	r1, [pc, #600]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 020c 	bic.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	498e      	ldr	r1, [pc, #568]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	4985      	ldr	r1, [pc, #532]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	497d      	ldr	r1, [pc, #500]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	4974      	ldr	r1, [pc, #464]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	496c      	ldr	r1, [pc, #432]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ea:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f8:	4963      	ldr	r1, [pc, #396]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390c:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	495b      	ldr	r1, [pc, #364]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	4952      	ldr	r1, [pc, #328]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003950:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	494a      	ldr	r1, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	4941      	ldr	r1, [pc, #260]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003994:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d028      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	4930      	ldr	r1, [pc, #192]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e0:	60d3      	str	r3, [r2, #12]
 80039e2:	e011      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f8f9 	bl	8003bec <RCCEx_PLLSAI1_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d04d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1c:	d108      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a2e:	e012      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a4e:	490e      	ldr	r1, [pc, #56]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e020      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a76:	d109      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a02      	ldr	r2, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	60d3      	str	r3, [r2, #12]
 8003a84:	e014      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f8a5 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d028      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003abc:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aca:	4947      	ldr	r1, [pc, #284]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ada:	d106      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a41      	ldr	r2, [pc, #260]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
 8003ae8:	e011      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f876 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2a:	492f      	ldr	r1, [pc, #188]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2102      	movs	r1, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f851 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b6a:	f023 0204 	bic.w	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b74:	491c      	ldr	r1, [pc, #112]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8e:	f023 0218 	bic.w	r2, r3, #24
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	4913      	ldr	r1, [pc, #76]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bfa:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d103      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
       ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d13f      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	e03c      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d00c      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x5a>
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d013      	beq.n	8003c58 <RCCEx_PLLSAI1_Config+0x6c>
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d120      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c34:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11d      	bne.n	8003c7c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e01a      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c46:	4b5d      	ldr	r3, [pc, #372]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c56:	e013      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c58:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c64:	4b55      	ldr	r3, [pc, #340]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c74:	e006      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7a:	e004      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c7c:	bf00      	nop
 8003c7e:	e002      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c84:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d108      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f023 0203 	bic.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4948      	ldr	r1, [pc, #288]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8086 	bne.w	8003db2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a44      	ldr	r2, [pc, #272]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fd f943 	bl	8000f3c <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb8:	e009      	b.n	8003cce <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cba:	f7fd f93f 	bl	8000f3c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d902      	bls.n	8003cce <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	73fb      	strb	r3, [r7, #15]
        break;
 8003ccc:	e005      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d168      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce6:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	0211      	lsls	r1, r2, #8
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68d2      	ldr	r2, [r2, #12]
 8003cf8:	06d2      	lsls	r2, r2, #27
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6852      	ldr	r2, [r2, #4]
 8003d00:	3a01      	subs	r2, #1
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	430a      	orrs	r2, r1
 8003d06:	492d      	ldr	r1, [pc, #180]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	610b      	str	r3, [r1, #16]
 8003d0c:	e02d      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d115      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	0211      	lsls	r1, r2, #8
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6912      	ldr	r2, [r2, #16]
 8003d26:	0852      	lsrs	r2, r2, #1
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	0552      	lsls	r2, r2, #21
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6852      	ldr	r2, [r2, #4]
 8003d32:	3a01      	subs	r2, #1
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	430a      	orrs	r2, r1
 8003d38:	4920      	ldr	r1, [pc, #128]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	610b      	str	r3, [r1, #16]
 8003d3e:	e014      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6892      	ldr	r2, [r2, #8]
 8003d4c:	0211      	lsls	r1, r2, #8
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6952      	ldr	r2, [r2, #20]
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0652      	lsls	r2, r2, #25
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	430a      	orrs	r2, r1
 8003d64:	4915      	ldr	r1, [pc, #84]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd f8e1 	bl	8000f3c <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d7c:	e009      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7e:	f7fd f8dd 	bl	8000f3c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d90:	e005      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ef      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4903      	ldr	r1, [pc, #12]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	07ff800f 	.word	0x07ff800f
 8003dc4:	ff9f800f 	.word	0xff9f800f
 8003dc8:	f9ff800f 	.word	0xf9ff800f

08003dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dda:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003de6:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d103      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d13f      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	e03c      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d00c      	beq.n	8003e26 <RCCEx_PLLSAI2_Config+0x5a>
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d013      	beq.n	8003e38 <RCCEx_PLLSAI2_Config+0x6c>
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d120      	bne.n	8003e56 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11d      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e24:	e01a      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d116      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e36:	e013      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e38:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10f      	bne.n	8003e64 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e44:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e54:	e006      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5a:	e004      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e5c:	bf00      	nop
 8003e5e:	e002      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e64:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f023 0203 	bic.w	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4948      	ldr	r1, [pc, #288]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f040 8086 	bne.w	8003f92 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e86:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a44      	ldr	r2, [pc, #272]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e92:	f7fd f853 	bl	8000f3c <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e98:	e009      	b.n	8003eae <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e9a:	f7fd f84f 	bl	8000f3c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d902      	bls.n	8003eae <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	73fb      	strb	r3, [r7, #15]
        break;
 8003eac:	e005      	b.n	8003eba <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ef      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d168      	bne.n	8003f92 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec6:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	0211      	lsls	r1, r2, #8
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	06d2      	lsls	r2, r2, #27
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6852      	ldr	r2, [r2, #4]
 8003ee0:	3a01      	subs	r2, #1
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	492d      	ldr	r1, [pc, #180]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	614b      	str	r3, [r1, #20]
 8003eec:	e02d      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d115      	bne.n	8003f20 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef4:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6892      	ldr	r2, [r2, #8]
 8003f00:	0211      	lsls	r1, r2, #8
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6912      	ldr	r2, [r2, #16]
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0552      	lsls	r2, r2, #21
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6852      	ldr	r2, [r2, #4]
 8003f12:	3a01      	subs	r2, #1
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	430a      	orrs	r2, r1
 8003f18:	4920      	ldr	r1, [pc, #128]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	614b      	str	r3, [r1, #20]
 8003f1e:	e014      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6892      	ldr	r2, [r2, #8]
 8003f2c:	0211      	lsls	r1, r2, #8
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6952      	ldr	r2, [r2, #20]
 8003f32:	0852      	lsrs	r2, r2, #1
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0652      	lsls	r2, r2, #25
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6852      	ldr	r2, [r2, #4]
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	430a      	orrs	r2, r1
 8003f44:	4915      	ldr	r1, [pc, #84]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fc fff1 	bl	8000f3c <HAL_GetTick>
 8003f5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f5c:	e009      	b.n	8003f72 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f5e:	f7fc ffed 	bl	8000f3c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d902      	bls.n	8003f72 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f70:	e005      	b.n	8003f7e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ef      	beq.n	8003f5e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	07ff800f 	.word	0x07ff800f
 8003fa4:	ff9f800f 	.word	0xff9f800f
 8003fa8:	f9ff800f 	.word	0xf9ff800f

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e049      	b.n	8004052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe16 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 faa6 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e04f      	b.n	8004114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <HAL_TIM_Base_Start_IT+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d018      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <HAL_TIM_Base_Start_IT+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <HAL_TIM_Base_Start_IT+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_TIM_Base_Start_IT+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_TIM_Base_Start_IT+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d115      	bne.n	80040fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <HAL_TIM_Base_Start_IT+0xdc>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d015      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d011      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	e008      	b.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e000      	b.n	8004112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40013400 	.word	0x40013400
 8004134:	40014000 	.word	0x40014000
 8004138:	00010007 	.word	0x00010007

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9be 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9b0 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9c1 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f994 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f986 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f997 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0208 	mvn.w	r2, #8
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f96a 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f95c 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f96d 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f940 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f932 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f943 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc f91e 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 faee 	bl	80048c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fae1 	bl	80048dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8f1 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d10e      	bne.n	8004372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d107      	bne.n	8004372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0220 	mvn.w	r2, #32
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 faa1 	bl	80048b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_ConfigClockSource+0x18>
 800438e:	2302      	movs	r3, #2
 8004390:	e0a8      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x16a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d067      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x124>
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d80b      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x70>
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d073      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x144>
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d802      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x66>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06f      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043de:	e078      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d06c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x144>
 80043e4:	2b30      	cmp	r3, #48	; 0x30
 80043e6:	d06a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x144>
      break;
 80043e8:	e073      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043ea:	2b70      	cmp	r3, #112	; 0x70
 80043ec:	d00d      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x90>
 80043ee:	2b70      	cmp	r3, #112	; 0x70
 80043f0:	d804      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x82>
 80043f2:	2b50      	cmp	r3, #80	; 0x50
 80043f4:	d033      	beq.n	800445e <HAL_TIM_ConfigClockSource+0xe4>
 80043f6:	2b60      	cmp	r3, #96	; 0x60
 80043f8:	d041      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80043fa:	e06a      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d066      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x156>
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004406:	d017      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004408:	e063      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f000 f9a3 	bl	8004764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800442c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
      break;
 8004436:	e04c      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f000 f98c 	bl	8004764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445a:	609a      	str	r2, [r3, #8]
      break;
 800445c:	e039      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f000 f900 	bl	8004670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2150      	movs	r1, #80	; 0x50
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f959 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 800447c:	e029      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f91f 	bl	80046ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2160      	movs	r1, #96	; 0x60
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f949 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 800449c:	e019      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f8e0 	bl	8004670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f939 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 80044bc:	e009      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 f930 	bl	800472e <TIM_ITRx_SetConfig>
        break;
 80044ce:	e000      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80044d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a40      	ldr	r2, [pc, #256]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3d      	ldr	r2, [pc, #244]	; (8004654 <TIM_Base_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3b      	ldr	r2, [pc, #236]	; (800465c <TIM_Base_SetConfig+0x120>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <TIM_Base_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	; (800465c <TIM_Base_SetConfig+0x120>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <TIM_Base_SetConfig+0x124>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_Base_SetConfig+0x128>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <TIM_Base_SetConfig+0x12c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0x9a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <TIM_Base_SetConfig+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <TIM_Base_SetConfig+0x128>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <TIM_Base_SetConfig+0x12c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0f      	ldr	r2, [pc, #60]	; (800466c <TIM_Base_SetConfig+0x130>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	615a      	str	r2, [r3, #20]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40013400 	.word	0x40013400
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800

08004670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0201 	bic.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 030a 	bic.w	r3, r3, #10
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e068      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2e      	ldr	r2, [pc, #184]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d108      	bne.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01d      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d018      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10c      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e042      	b.n	8004988 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc f9b7 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2224      	movs	r2, #36	; 0x24
 800491e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9c0 	bl	8004cb8 <UART_SetConfig>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e022      	b.n	8004988 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fc86 	bl	800525c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fd0d 	bl	80053a0 <UART_CheckIdleState>
 8004986:	4603      	mov	r3, r0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d118      	bne.n	80049f2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8145 	beq.w	8004c72 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	4798      	blx	r3
      }
      return;
 80049f0:	e13f      	b.n	8004c72 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80e8 	beq.w	8004bca <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4ba1      	ldr	r3, [pc, #644]	; (8004c84 <HAL_UART_IRQHandler+0x2f4>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4ba0      	ldr	r3, [pc, #640]	; (8004c88 <HAL_UART_IRQHandler+0x2f8>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80dd 	beq.w	8004bca <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_UART_IRQHandler+0xac>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_UART_IRQHandler+0xd8>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2202      	movs	r2, #2
 8004a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f043 0204 	orr.w	r2, r3, #4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_UART_IRQHandler+0x104>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2204      	movs	r2, #4
 8004a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f043 0202 	orr.w	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_UART_IRQHandler+0x2f4>)
 8004aac:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f043 0208 	orr.w	r2, r3, #8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d011      	beq.n	8004af8 <HAL_UART_IRQHandler+0x168>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80b9 	beq.w	8004c76 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d011      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d004      	beq.n	8004b52 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d031      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fcec 	bl	8005530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d123      	bne.n	8004bae <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d013      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b82:	4a42      	ldr	r2, [pc, #264]	; (8004c8c <HAL_UART_IRQHandler+0x2fc>)
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fb63 	bl	8002256 <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d017      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00f      	b.n	8004bc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f87c 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e00b      	b.n	8004bc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f878 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	e007      	b.n	8004bc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f874 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004bc4:	e057      	b.n	8004c76 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc6:	bf00      	nop
    return;
 8004bc8:	e055      	b.n	8004c76 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x260>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fcf4 	bl	80055d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bee:	e045      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d012      	beq.n	8004c20 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d031      	beq.n	8004c7a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
    }
    return;
 8004c1e:	e02c      	b.n	8004c7a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x2ac>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fcb4 	bl	80055a2 <UART_EndTransmit_IT>
    return;
 8004c3a:	e01f      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_UART_IRQHandler+0x2c8>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fcd4 	bl	80055fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c56:	e011      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da09      	bge.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fcbe 	bl	80055ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c6e:	bf00      	nop
 8004c70:	e004      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
      return;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
    return;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_UART_IRQHandler+0x2ec>
    return;
 8004c7a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	10000001 	.word	0x10000001
 8004c88:	04000120 	.word	0x04000120
 8004c8c:	08005577 	.word	0x08005577

08004c90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cbc:	b088      	sub	sp, #32
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4bb1      	ldr	r3, [pc, #708]	; (8004fb4 <UART_SetConfig+0x2fc>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	69f9      	ldr	r1, [r7, #28]
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4aa6      	ldr	r2, [pc, #664]	; (8004fb8 <UART_SetConfig+0x300>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	69f9      	ldr	r1, [r7, #28]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f023 010f 	bic.w	r1, r3, #15
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a97      	ldr	r2, [pc, #604]	; (8004fbc <UART_SetConfig+0x304>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d121      	bne.n	8004da8 <UART_SetConfig+0xf0>
 8004d64:	4b96      	ldr	r3, [pc, #600]	; (8004fc0 <UART_SetConfig+0x308>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d816      	bhi.n	8004da0 <UART_SetConfig+0xe8>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0xc0>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d8f 	.word	0x08004d8f
 8004d84:	08004d9b 	.word	0x08004d9b
 8004d88:	2301      	movs	r3, #1
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	e0e8      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	76fb      	strb	r3, [r7, #27]
 8004d92:	e0e5      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004d94:	2304      	movs	r3, #4
 8004d96:	76fb      	strb	r3, [r7, #27]
 8004d98:	e0e2      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	76fb      	strb	r3, [r7, #27]
 8004d9e:	e0df      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004da0:	2310      	movs	r3, #16
 8004da2:	76fb      	strb	r3, [r7, #27]
 8004da4:	bf00      	nop
 8004da6:	e0db      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a85      	ldr	r2, [pc, #532]	; (8004fc4 <UART_SetConfig+0x30c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d134      	bne.n	8004e1c <UART_SetConfig+0x164>
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <UART_SetConfig+0x308>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d829      	bhi.n	8004e14 <UART_SetConfig+0x15c>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <UART_SetConfig+0x110>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e15 	.word	0x08004e15
 8004dd0:	08004e15 	.word	0x08004e15
 8004dd4:	08004e15 	.word	0x08004e15
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004e15 	.word	0x08004e15
 8004de0:	08004e15 	.word	0x08004e15
 8004de4:	08004e15 	.word	0x08004e15
 8004de8:	08004e03 	.word	0x08004e03
 8004dec:	08004e15 	.word	0x08004e15
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e15 	.word	0x08004e15
 8004df8:	08004e0f 	.word	0x08004e0f
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	76fb      	strb	r3, [r7, #27]
 8004e00:	e0ae      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e02:	2302      	movs	r3, #2
 8004e04:	76fb      	strb	r3, [r7, #27]
 8004e06:	e0ab      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	76fb      	strb	r3, [r7, #27]
 8004e0c:	e0a8      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	76fb      	strb	r3, [r7, #27]
 8004e12:	e0a5      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e14:	2310      	movs	r3, #16
 8004e16:	76fb      	strb	r3, [r7, #27]
 8004e18:	bf00      	nop
 8004e1a:	e0a1      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a69      	ldr	r2, [pc, #420]	; (8004fc8 <UART_SetConfig+0x310>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d120      	bne.n	8004e68 <UART_SetConfig+0x1b0>
 8004e26:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <UART_SetConfig+0x308>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d00f      	beq.n	8004e54 <UART_SetConfig+0x19c>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d802      	bhi.n	8004e3e <UART_SetConfig+0x186>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <UART_SetConfig+0x190>
 8004e3c:	e010      	b.n	8004e60 <UART_SetConfig+0x1a8>
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d005      	beq.n	8004e4e <UART_SetConfig+0x196>
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x1a2>
 8004e46:	e00b      	b.n	8004e60 <UART_SetConfig+0x1a8>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	76fb      	strb	r3, [r7, #27]
 8004e4c:	e088      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	76fb      	strb	r3, [r7, #27]
 8004e52:	e085      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e54:	2304      	movs	r3, #4
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e082      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e07f      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e60:	2310      	movs	r3, #16
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	bf00      	nop
 8004e66:	e07b      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a57      	ldr	r2, [pc, #348]	; (8004fcc <UART_SetConfig+0x314>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d120      	bne.n	8004eb4 <UART_SetConfig+0x1fc>
 8004e72:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <UART_SetConfig+0x308>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d00f      	beq.n	8004ea0 <UART_SetConfig+0x1e8>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d802      	bhi.n	8004e8a <UART_SetConfig+0x1d2>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <UART_SetConfig+0x1dc>
 8004e88:	e010      	b.n	8004eac <UART_SetConfig+0x1f4>
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d005      	beq.n	8004e9a <UART_SetConfig+0x1e2>
 8004e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e90:	d009      	beq.n	8004ea6 <UART_SetConfig+0x1ee>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x1f4>
 8004e94:	2300      	movs	r3, #0
 8004e96:	76fb      	strb	r3, [r7, #27]
 8004e98:	e062      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	76fb      	strb	r3, [r7, #27]
 8004e9e:	e05f      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	76fb      	strb	r3, [r7, #27]
 8004ea4:	e05c      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	76fb      	strb	r3, [r7, #27]
 8004eaa:	e059      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004eac:	2310      	movs	r3, #16
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	bf00      	nop
 8004eb2:	e055      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a45      	ldr	r2, [pc, #276]	; (8004fd0 <UART_SetConfig+0x318>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d124      	bne.n	8004f08 <UART_SetConfig+0x250>
 8004ebe:	4b40      	ldr	r3, [pc, #256]	; (8004fc0 <UART_SetConfig+0x308>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ecc:	d012      	beq.n	8004ef4 <UART_SetConfig+0x23c>
 8004ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed2:	d802      	bhi.n	8004eda <UART_SetConfig+0x222>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <UART_SetConfig+0x230>
 8004ed8:	e012      	b.n	8004f00 <UART_SetConfig+0x248>
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ede:	d006      	beq.n	8004eee <UART_SetConfig+0x236>
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d009      	beq.n	8004efa <UART_SetConfig+0x242>
 8004ee6:	e00b      	b.n	8004f00 <UART_SetConfig+0x248>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	76fb      	strb	r3, [r7, #27]
 8004eec:	e038      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	76fb      	strb	r3, [r7, #27]
 8004ef2:	e035      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	76fb      	strb	r3, [r7, #27]
 8004ef8:	e032      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004efa:	2308      	movs	r3, #8
 8004efc:	76fb      	strb	r3, [r7, #27]
 8004efe:	e02f      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f00:	2310      	movs	r3, #16
 8004f02:	76fb      	strb	r3, [r7, #27]
 8004f04:	bf00      	nop
 8004f06:	e02b      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <UART_SetConfig+0x300>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d124      	bne.n	8004f5c <UART_SetConfig+0x2a4>
 8004f12:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <UART_SetConfig+0x308>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d012      	beq.n	8004f48 <UART_SetConfig+0x290>
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	d802      	bhi.n	8004f2e <UART_SetConfig+0x276>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <UART_SetConfig+0x284>
 8004f2c:	e012      	b.n	8004f54 <UART_SetConfig+0x29c>
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d006      	beq.n	8004f42 <UART_SetConfig+0x28a>
 8004f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f38:	d009      	beq.n	8004f4e <UART_SetConfig+0x296>
 8004f3a:	e00b      	b.n	8004f54 <UART_SetConfig+0x29c>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	76fb      	strb	r3, [r7, #27]
 8004f40:	e00e      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f42:	2302      	movs	r3, #2
 8004f44:	76fb      	strb	r3, [r7, #27]
 8004f46:	e00b      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	76fb      	strb	r3, [r7, #27]
 8004f4c:	e008      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f4e:	2308      	movs	r3, #8
 8004f50:	76fb      	strb	r3, [r7, #27]
 8004f52:	e005      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f54:	2310      	movs	r3, #16
 8004f56:	76fb      	strb	r3, [r7, #27]
 8004f58:	bf00      	nop
 8004f5a:	e001      	b.n	8004f60 <UART_SetConfig+0x2a8>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <UART_SetConfig+0x300>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	f040 80a1 	bne.w	80050ae <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f6c:	7efb      	ldrb	r3, [r7, #27]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d836      	bhi.n	8004fe0 <UART_SetConfig+0x328>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <UART_SetConfig+0x2c0>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08004fab 	.word	0x08004fab
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fd9 	.word	0x08004fd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f9c:	f7fe fa10 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004fa0:	6178      	str	r0, [r7, #20]
        break;
 8004fa2:	e022      	b.n	8004fea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <UART_SetConfig+0x31c>)
 8004fa6:	617b      	str	r3, [r7, #20]
        break;
 8004fa8:	e01f      	b.n	8004fea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004faa:	f7fe f973 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8004fae:	6178      	str	r0, [r7, #20]
        break;
 8004fb0:	e01b      	b.n	8004fea <UART_SetConfig+0x332>
 8004fb2:	bf00      	nop
 8004fb4:	cfff69f3 	.word	0xcfff69f3
 8004fb8:	40008000 	.word	0x40008000
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40004800 	.word	0x40004800
 8004fcc:	40004c00 	.word	0x40004c00
 8004fd0:	40005000 	.word	0x40005000
 8004fd4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fdc:	617b      	str	r3, [r7, #20]
        break;
 8004fde:	e004      	b.n	8004fea <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	76bb      	strb	r3, [r7, #26]
        break;
 8004fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 811d 	beq.w	800522c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	4a97      	ldr	r2, [pc, #604]	; (8005254 <UART_SetConfig+0x59c>)
 8004ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	fbb3 f3f2 	udiv	r3, r3, r2
 8005004:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d305      	bcc.n	8005022 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d902      	bls.n	8005028 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	76bb      	strb	r3, [r7, #26]
 8005026:	e101      	b.n	800522c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4618      	mov	r0, r3
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	4a87      	ldr	r2, [pc, #540]	; (8005254 <UART_SetConfig+0x59c>)
 8005036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f04f 0400 	mov.w	r4, #0
 8005040:	461a      	mov	r2, r3
 8005042:	4623      	mov	r3, r4
 8005044:	f7fb f8da 	bl	80001fc <__aeabi_uldivmod>
 8005048:	4603      	mov	r3, r0
 800504a:	460c      	mov	r4, r1
 800504c:	4619      	mov	r1, r3
 800504e:	4622      	mov	r2, r4
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	0214      	lsls	r4, r2, #8
 800505a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800505e:	020b      	lsls	r3, r1, #8
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6852      	ldr	r2, [r2, #4]
 8005064:	0852      	lsrs	r2, r2, #1
 8005066:	4611      	mov	r1, r2
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	eb13 0b01 	adds.w	fp, r3, r1
 8005070:	eb44 0c02 	adc.w	ip, r4, r2
 8005074:	4658      	mov	r0, fp
 8005076:	4661      	mov	r1, ip
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f04f 0400 	mov.w	r4, #0
 8005080:	461a      	mov	r2, r3
 8005082:	4623      	mov	r3, r4
 8005084:	f7fb f8ba 	bl	80001fc <__aeabi_uldivmod>
 8005088:	4603      	mov	r3, r0
 800508a:	460c      	mov	r4, r1
 800508c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005094:	d308      	bcc.n	80050a8 <UART_SetConfig+0x3f0>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509c:	d204      	bcs.n	80050a8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e0c1      	b.n	800522c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	76bb      	strb	r3, [r7, #26]
 80050ac:	e0be      	b.n	800522c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b6:	d164      	bne.n	8005182 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80050b8:	7efb      	ldrb	r3, [r7, #27]
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d827      	bhi.n	800510e <UART_SetConfig+0x456>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x40c>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050ff 	.word	0x080050ff
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	0800510f 	.word	0x0800510f
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7fe f96a 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80050ec:	6178      	str	r0, [r7, #20]
        break;
 80050ee:	e013      	b.n	8005118 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f0:	f7fe f97c 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 80050f4:	6178      	str	r0, [r7, #20]
        break;
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b57      	ldr	r3, [pc, #348]	; (8005258 <UART_SetConfig+0x5a0>)
 80050fa:	617b      	str	r3, [r7, #20]
        break;
 80050fc:	e00c      	b.n	8005118 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7fe f8c9 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8005102:	6178      	str	r0, [r7, #20]
        break;
 8005104:	e008      	b.n	8005118 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510a:	617b      	str	r3, [r7, #20]
        break;
 800510c:	e004      	b.n	8005118 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	76bb      	strb	r3, [r7, #26]
        break;
 8005116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8086 	beq.w	800522c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <UART_SetConfig+0x59c>)
 8005126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512a:	461a      	mov	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005132:	005a      	lsls	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	441a      	add	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d916      	bls.n	800517c <UART_SetConfig+0x4c4>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d212      	bcs.n	800517c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f023 030f 	bic.w	r3, r3, #15
 800515e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	b29a      	uxth	r2, r3
 800516c:	89fb      	ldrh	r3, [r7, #14]
 800516e:	4313      	orrs	r3, r2
 8005170:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	89fa      	ldrh	r2, [r7, #14]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	e057      	b.n	800522c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	76bb      	strb	r3, [r7, #26]
 8005180:	e054      	b.n	800522c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005182:	7efb      	ldrb	r3, [r7, #27]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d828      	bhi.n	80051da <UART_SetConfig+0x522>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x4d8>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051db 	.word	0x080051db
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051db 	.word	0x080051db
 80051a8:	080051db 	.word	0x080051db
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe f904 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80051b8:	6178      	str	r0, [r7, #20]
        break;
 80051ba:	e013      	b.n	80051e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe f916 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 80051c0:	6178      	str	r0, [r7, #20]
        break;
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <UART_SetConfig+0x5a0>)
 80051c6:	617b      	str	r3, [r7, #20]
        break;
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fe f863 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 80051ce:	6178      	str	r0, [r7, #20]
        break;
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	617b      	str	r3, [r7, #20]
        break;
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	76bb      	strb	r3, [r7, #26]
        break;
 80051e2:	bf00      	nop
    }

    if (pclk != 0U)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	4a19      	ldr	r2, [pc, #100]	; (8005254 <UART_SetConfig+0x59c>)
 80051f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f4:	461a      	mov	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	b29b      	uxth	r3, r3
 800520e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b0f      	cmp	r3, #15
 8005214:	d908      	bls.n	8005228 <UART_SetConfig+0x570>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521c:	d204      	bcs.n	8005228 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e001      	b.n	800522c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005248:	7ebb      	ldrb	r3, [r7, #26]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005254:	08005914 	.word	0x08005914
 8005258:	00f42400 	.word	0x00f42400

0800525c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01a      	beq.n	8005372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535a:	d10a      	bne.n	8005372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80053b0:	f7fb fdc4 	bl	8000f3c <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d10e      	bne.n	80053e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f82c 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e022      	b.n	8005428 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d10e      	bne.n	800540e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f816 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e00c      	b.n	8005428 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e062      	b.n	8005508 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d05e      	beq.n	8005508 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fb fd77 	bl	8000f3c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11d      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800546e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e045      	b.n	8005528 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02e      	beq.n	8005508 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b8:	d126      	bne.n	8005508 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054d2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e00f      	b.n	8005528 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	429a      	cmp	r2, r3
 8005524:	d08d      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005546:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff fb85 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fb61 	bl	8004c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UARTEx_DisableFifoMode+0x16>
 8005624:	2302      	movs	r3, #2
 8005626:	e027      	b.n	8005678 <HAL_UARTEx_DisableFifoMode+0x66>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e02d      	b.n	80056f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	; 0x24
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f84f 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e02d      	b.n	8005774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f811 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005784:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <UARTEx_SetNbDataToProcess+0xc8>)
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800578e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005792:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <UARTEx_SetNbDataToProcess+0xcc>)
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800579c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d108      	bne.n	80057ba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057b8:	e03d      	b.n	8005836 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057ba:	2308      	movs	r3, #8
 80057bc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057be:	2308      	movs	r3, #8
 80057c0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	0e5b      	lsrs	r3, r3, #25
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	0f5b      	lsrs	r3, r3, #29
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80057e2:	7fbb      	ldrb	r3, [r7, #30]
 80057e4:	7f3a      	ldrb	r2, [r7, #28]
 80057e6:	f107 0120 	add.w	r1, r7, #32
 80057ea:	440a      	add	r2, r1
 80057ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	7f3a      	ldrb	r2, [r7, #28]
 80057f6:	f107 0120 	add.w	r1, r7, #32
 80057fa:	440a      	add	r2, r1
 80057fc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005800:	fb93 f3f2 	sdiv	r3, r3, r2
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	7f7a      	ldrb	r2, [r7, #29]
 8005810:	f107 0120 	add.w	r1, r7, #32
 8005814:	440a      	add	r2, r1
 8005816:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	7f7a      	ldrb	r2, [r7, #29]
 8005820:	f107 0120 	add.w	r1, r7, #32
 8005824:	440a      	add	r2, r1
 8005826:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800582a:	fb93 f3f2 	sdiv	r3, r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005836:	bf00      	nop
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	080058bc 	.word	0x080058bc
 8005848:	080058c4 	.word	0x080058c4

0800584c <__libc_init_array>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4e0d      	ldr	r6, [pc, #52]	; (8005884 <__libc_init_array+0x38>)
 8005850:	4c0d      	ldr	r4, [pc, #52]	; (8005888 <__libc_init_array+0x3c>)
 8005852:	1ba4      	subs	r4, r4, r6
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	2500      	movs	r5, #0
 8005858:	42a5      	cmp	r5, r4
 800585a:	d109      	bne.n	8005870 <__libc_init_array+0x24>
 800585c:	4e0b      	ldr	r6, [pc, #44]	; (800588c <__libc_init_array+0x40>)
 800585e:	4c0c      	ldr	r4, [pc, #48]	; (8005890 <__libc_init_array+0x44>)
 8005860:	f000 f820 	bl	80058a4 <_init>
 8005864:	1ba4      	subs	r4, r4, r6
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	2500      	movs	r5, #0
 800586a:	42a5      	cmp	r5, r4
 800586c:	d105      	bne.n	800587a <__libc_init_array+0x2e>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005874:	4798      	blx	r3
 8005876:	3501      	adds	r5, #1
 8005878:	e7ee      	b.n	8005858 <__libc_init_array+0xc>
 800587a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800587e:	4798      	blx	r3
 8005880:	3501      	adds	r5, #1
 8005882:	e7f2      	b.n	800586a <__libc_init_array+0x1e>
 8005884:	08005934 	.word	0x08005934
 8005888:	08005934 	.word	0x08005934
 800588c:	08005934 	.word	0x08005934
 8005890:	08005938 	.word	0x08005938

08005894 <memset>:
 8005894:	4402      	add	r2, r0
 8005896:	4603      	mov	r3, r0
 8005898:	4293      	cmp	r3, r2
 800589a:	d100      	bne.n	800589e <memset+0xa>
 800589c:	4770      	bx	lr
 800589e:	f803 1b01 	strb.w	r1, [r3], #1
 80058a2:	e7f9      	b.n	8005898 <memset+0x4>

080058a4 <_init>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr

080058b0 <_fini>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr
