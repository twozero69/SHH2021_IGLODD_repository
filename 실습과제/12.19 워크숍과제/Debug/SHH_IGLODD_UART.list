
SHH_IGLODD_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  200001dc  0800337c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000024c  0800337c  0002024c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b457  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bd4  00000000  00000000  0002b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028dd  00000000  00000000  0002d230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000530  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000033df  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002023  00000000  00000000  00033b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035b5a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019e8  00000000  00000000  00035bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000375c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  0003762c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f5c 	.word	0x08002f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08002f5c 	.word	0x08002f5c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff82 	bl	80010b4 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000204 	.word	0x20000204
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000204 	.word	0x20000204

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002ac:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002b0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d003      	beq.n	80002be <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002b6:	2304      	movs	r3, #4
 80002b8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002be:	6803      	ldr	r3, [r0, #0]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	f022 020e 	bic.w	r2, r2, #14
 80002c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	f022 0201 	bic.w	r2, r2, #1
 80002ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <HAL_DMA_Abort_IT+0x88>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d01f      	beq.n	8000316 <HAL_DMA_Abort_IT+0x6a>
 80002d6:	3214      	adds	r2, #20
 80002d8:	4293      	cmp	r3, r2
 80002da:	d01e      	beq.n	800031a <HAL_DMA_Abort_IT+0x6e>
 80002dc:	3214      	adds	r2, #20
 80002de:	4293      	cmp	r3, r2
 80002e0:	d01d      	beq.n	800031e <HAL_DMA_Abort_IT+0x72>
 80002e2:	3214      	adds	r2, #20
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d01d      	beq.n	8000324 <HAL_DMA_Abort_IT+0x78>
 80002e8:	3214      	adds	r2, #20
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d01d      	beq.n	800032a <HAL_DMA_Abort_IT+0x7e>
 80002ee:	3214      	adds	r2, #20
 80002f0:	4293      	cmp	r3, r2
 80002f2:	bf0c      	ite	eq
 80002f4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80002f8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80002fe:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000300:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000302:	2301      	movs	r3, #1
 8000304:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000308:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800030a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800030e:	b17b      	cbz	r3, 8000330 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000310:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000312:	4620      	mov	r0, r4
 8000314:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000316:	2301      	movs	r3, #1
 8000318:	e7f0      	b.n	80002fc <HAL_DMA_Abort_IT+0x50>
 800031a:	2310      	movs	r3, #16
 800031c:	e7ee      	b.n	80002fc <HAL_DMA_Abort_IT+0x50>
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	e7eb      	b.n	80002fc <HAL_DMA_Abort_IT+0x50>
 8000324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000328:	e7e8      	b.n	80002fc <HAL_DMA_Abort_IT+0x50>
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	e7e5      	b.n	80002fc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000330:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000332:	bd10      	pop	{r4, pc}
 8000334:	40020008 	.word	0x40020008
 8000338:	40020000 	.word	0x40020000

0800033c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800033c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000340:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000342:	4616      	mov	r6, r2
 8000344:	4b65      	ldr	r3, [pc, #404]	; (80004dc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000346:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004ec <HAL_GPIO_Init+0x1b0>
 800034a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004f0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800034e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000352:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000354:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000358:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800035c:	45a0      	cmp	r8, r4
 800035e:	d17f      	bne.n	8000460 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000360:	684d      	ldr	r5, [r1, #4]
 8000362:	2d12      	cmp	r5, #18
 8000364:	f000 80af 	beq.w	80004c6 <HAL_GPIO_Init+0x18a>
 8000368:	f200 8088 	bhi.w	800047c <HAL_GPIO_Init+0x140>
 800036c:	2d02      	cmp	r5, #2
 800036e:	f000 80a7 	beq.w	80004c0 <HAL_GPIO_Init+0x184>
 8000372:	d87c      	bhi.n	800046e <HAL_GPIO_Init+0x132>
 8000374:	2d00      	cmp	r5, #0
 8000376:	f000 808e 	beq.w	8000496 <HAL_GPIO_Init+0x15a>
 800037a:	2d01      	cmp	r5, #1
 800037c:	f000 809e 	beq.w	80004bc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000380:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000384:	2cff      	cmp	r4, #255	; 0xff
 8000386:	bf93      	iteet	ls
 8000388:	4682      	movls	sl, r0
 800038a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800038e:	3d08      	subhi	r5, #8
 8000390:	f8d0 b000 	ldrls.w	fp, [r0]
 8000394:	bf92      	itee	ls
 8000396:	00b5      	lslls	r5, r6, #2
 8000398:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800039c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800039e:	fa09 f805 	lsl.w	r8, r9, r5
 80003a2:	ea2b 0808 	bic.w	r8, fp, r8
 80003a6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003aa:	bf88      	it	hi
 80003ac:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003b0:	ea48 0505 	orr.w	r5, r8, r5
 80003b4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003b8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003bc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003c0:	d04e      	beq.n	8000460 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4d47      	ldr	r5, [pc, #284]	; (80004e0 <HAL_GPIO_Init+0x1a4>)
 80003c4:	4f46      	ldr	r7, [pc, #280]	; (80004e0 <HAL_GPIO_Init+0x1a4>)
 80003c6:	69ad      	ldr	r5, [r5, #24]
 80003c8:	f026 0803 	bic.w	r8, r6, #3
 80003cc:	f045 0501 	orr.w	r5, r5, #1
 80003d0:	61bd      	str	r5, [r7, #24]
 80003d2:	69bd      	ldr	r5, [r7, #24]
 80003d4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003d8:	f005 0501 	and.w	r5, r5, #1
 80003dc:	9501      	str	r5, [sp, #4]
 80003de:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003e2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f0:	fa09 f90b 	lsl.w	r9, r9, fp
 80003f4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f8:	4d3a      	ldr	r5, [pc, #232]	; (80004e4 <HAL_GPIO_Init+0x1a8>)
 80003fa:	42a8      	cmp	r0, r5
 80003fc:	d068      	beq.n	80004d0 <HAL_GPIO_Init+0x194>
 80003fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000402:	42a8      	cmp	r0, r5
 8000404:	d066      	beq.n	80004d4 <HAL_GPIO_Init+0x198>
 8000406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800040a:	42a8      	cmp	r0, r5
 800040c:	d064      	beq.n	80004d8 <HAL_GPIO_Init+0x19c>
 800040e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000412:	42a8      	cmp	r0, r5
 8000414:	bf0c      	ite	eq
 8000416:	2503      	moveq	r5, #3
 8000418:	2504      	movne	r5, #4
 800041a:	fa05 f50b 	lsl.w	r5, r5, fp
 800041e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000422:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000426:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000428:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800042c:	bf14      	ite	ne
 800042e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000430:	43a5      	biceq	r5, r4
 8000432:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000434:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000436:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800043a:	bf14      	ite	ne
 800043c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800043e:	43a5      	biceq	r5, r4
 8000440:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000442:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000444:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000448:	bf14      	ite	ne
 800044a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800044c:	43a5      	biceq	r5, r4
 800044e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000450:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000452:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000456:	bf14      	ite	ne
 8000458:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800045a:	ea25 0404 	biceq.w	r4, r5, r4
 800045e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000460:	3601      	adds	r6, #1
 8000462:	2e10      	cmp	r6, #16
 8000464:	f47f af73 	bne.w	800034e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000468:	b003      	add	sp, #12
 800046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800046e:	2d03      	cmp	r5, #3
 8000470:	d022      	beq.n	80004b8 <HAL_GPIO_Init+0x17c>
 8000472:	2d11      	cmp	r5, #17
 8000474:	d184      	bne.n	8000380 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000476:	68ca      	ldr	r2, [r1, #12]
 8000478:	3204      	adds	r2, #4
          break;
 800047a:	e781      	b.n	8000380 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800047c:	4f1a      	ldr	r7, [pc, #104]	; (80004e8 <HAL_GPIO_Init+0x1ac>)
 800047e:	42bd      	cmp	r5, r7
 8000480:	d009      	beq.n	8000496 <HAL_GPIO_Init+0x15a>
 8000482:	d812      	bhi.n	80004aa <HAL_GPIO_Init+0x16e>
 8000484:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004f4 <HAL_GPIO_Init+0x1b8>
 8000488:	454d      	cmp	r5, r9
 800048a:	d004      	beq.n	8000496 <HAL_GPIO_Init+0x15a>
 800048c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000490:	454d      	cmp	r5, r9
 8000492:	f47f af75 	bne.w	8000380 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000496:	688a      	ldr	r2, [r1, #8]
 8000498:	b1c2      	cbz	r2, 80004cc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800049a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800049c:	bf0c      	ite	eq
 800049e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004a2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a6:	2208      	movs	r2, #8
 80004a8:	e76a      	b.n	8000380 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004aa:	4575      	cmp	r5, lr
 80004ac:	d0f3      	beq.n	8000496 <HAL_GPIO_Init+0x15a>
 80004ae:	4565      	cmp	r5, ip
 80004b0:	d0f1      	beq.n	8000496 <HAL_GPIO_Init+0x15a>
 80004b2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004f8 <HAL_GPIO_Init+0x1bc>
 80004b6:	e7eb      	b.n	8000490 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b8:	2200      	movs	r2, #0
 80004ba:	e761      	b.n	8000380 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004bc:	68ca      	ldr	r2, [r1, #12]
          break;
 80004be:	e75f      	b.n	8000380 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c0:	68ca      	ldr	r2, [r1, #12]
 80004c2:	3208      	adds	r2, #8
          break;
 80004c4:	e75c      	b.n	8000380 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c6:	68ca      	ldr	r2, [r1, #12]
 80004c8:	320c      	adds	r2, #12
          break;
 80004ca:	e759      	b.n	8000380 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004cc:	2204      	movs	r2, #4
 80004ce:	e757      	b.n	8000380 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004d0:	2500      	movs	r5, #0
 80004d2:	e7a2      	b.n	800041a <HAL_GPIO_Init+0xde>
 80004d4:	2501      	movs	r5, #1
 80004d6:	e7a0      	b.n	800041a <HAL_GPIO_Init+0xde>
 80004d8:	2502      	movs	r5, #2
 80004da:	e79e      	b.n	800041a <HAL_GPIO_Init+0xde>
 80004dc:	40010400 	.word	0x40010400
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	10210000 	.word	0x10210000
 80004ec:	10310000 	.word	0x10310000
 80004f0:	10320000 	.word	0x10320000
 80004f4:	10110000 	.word	0x10110000
 80004f8:	10220000 	.word	0x10220000

080004fc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fc:	6803      	ldr	r3, [r0, #0]
{
 80004fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000502:	07db      	lsls	r3, r3, #31
{
 8000504:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000506:	d410      	bmi.n	800052a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000508:	682b      	ldr	r3, [r5, #0]
 800050a:	079f      	lsls	r7, r3, #30
 800050c:	d45e      	bmi.n	80005cc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800050e:	682b      	ldr	r3, [r5, #0]
 8000510:	0719      	lsls	r1, r3, #28
 8000512:	f100 8095 	bmi.w	8000640 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000516:	682b      	ldr	r3, [r5, #0]
 8000518:	075a      	lsls	r2, r3, #29
 800051a:	f100 80bf 	bmi.w	800069c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800051e:	69ea      	ldr	r2, [r5, #28]
 8000520:	2a00      	cmp	r2, #0
 8000522:	f040 812d 	bne.w	8000780 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000526:	2000      	movs	r0, #0
 8000528:	e014      	b.n	8000554 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800052a:	4c90      	ldr	r4, [pc, #576]	; (800076c <HAL_RCC_OscConfig+0x270>)
 800052c:	6863      	ldr	r3, [r4, #4]
 800052e:	f003 030c 	and.w	r3, r3, #12
 8000532:	2b04      	cmp	r3, #4
 8000534:	d007      	beq.n	8000546 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000536:	6863      	ldr	r3, [r4, #4]
 8000538:	f003 030c 	and.w	r3, r3, #12
 800053c:	2b08      	cmp	r3, #8
 800053e:	d10c      	bne.n	800055a <HAL_RCC_OscConfig+0x5e>
 8000540:	6863      	ldr	r3, [r4, #4]
 8000542:	03de      	lsls	r6, r3, #15
 8000544:	d509      	bpl.n	800055a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	039c      	lsls	r4, r3, #14
 800054a:	d5dd      	bpl.n	8000508 <HAL_RCC_OscConfig+0xc>
 800054c:	686b      	ldr	r3, [r5, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1da      	bne.n	8000508 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
}
 8000554:	b002      	add	sp, #8
 8000556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055a:	686b      	ldr	r3, [r5, #4]
 800055c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000560:	d110      	bne.n	8000584 <HAL_RCC_OscConfig+0x88>
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800056a:	f7ff fe31 	bl	80001d0 <HAL_GetTick>
 800056e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000570:	6823      	ldr	r3, [r4, #0]
 8000572:	0398      	lsls	r0, r3, #14
 8000574:	d4c8      	bmi.n	8000508 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000576:	f7ff fe2b 	bl	80001d0 <HAL_GetTick>
 800057a:	1b80      	subs	r0, r0, r6
 800057c:	2864      	cmp	r0, #100	; 0x64
 800057e:	d9f7      	bls.n	8000570 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000580:	2003      	movs	r0, #3
 8000582:	e7e7      	b.n	8000554 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000584:	b99b      	cbnz	r3, 80005ae <HAL_RCC_OscConfig+0xb2>
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058c:	6023      	str	r3, [r4, #0]
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000594:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000596:	f7ff fe1b 	bl	80001d0 <HAL_GetTick>
 800059a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	0399      	lsls	r1, r3, #14
 80005a0:	d5b2      	bpl.n	8000508 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a2:	f7ff fe15 	bl	80001d0 <HAL_GetTick>
 80005a6:	1b80      	subs	r0, r0, r6
 80005a8:	2864      	cmp	r0, #100	; 0x64
 80005aa:	d9f7      	bls.n	800059c <HAL_RCC_OscConfig+0xa0>
 80005ac:	e7e8      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	d103      	bne.n	80005be <HAL_RCC_OscConfig+0xc2>
 80005b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ba:	6023      	str	r3, [r4, #0]
 80005bc:	e7d1      	b.n	8000562 <HAL_RCC_OscConfig+0x66>
 80005be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ca:	e7cd      	b.n	8000568 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005cc:	4c67      	ldr	r4, [pc, #412]	; (800076c <HAL_RCC_OscConfig+0x270>)
 80005ce:	6863      	ldr	r3, [r4, #4]
 80005d0:	f013 0f0c 	tst.w	r3, #12
 80005d4:	d007      	beq.n	80005e6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005d6:	6863      	ldr	r3, [r4, #4]
 80005d8:	f003 030c 	and.w	r3, r3, #12
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d110      	bne.n	8000602 <HAL_RCC_OscConfig+0x106>
 80005e0:	6863      	ldr	r3, [r4, #4]
 80005e2:	03da      	lsls	r2, r3, #15
 80005e4:	d40d      	bmi.n	8000602 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	079b      	lsls	r3, r3, #30
 80005ea:	d502      	bpl.n	80005f2 <HAL_RCC_OscConfig+0xf6>
 80005ec:	692b      	ldr	r3, [r5, #16]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d1af      	bne.n	8000552 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	696a      	ldr	r2, [r5, #20]
 80005f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005fe:	6023      	str	r3, [r4, #0]
 8000600:	e785      	b.n	800050e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000602:	692a      	ldr	r2, [r5, #16]
 8000604:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <HAL_RCC_OscConfig+0x274>)
 8000606:	b16a      	cbz	r2, 8000624 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800060c:	f7ff fde0 	bl	80001d0 <HAL_GetTick>
 8000610:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	079f      	lsls	r7, r3, #30
 8000616:	d4ec      	bmi.n	80005f2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000618:	f7ff fdda 	bl	80001d0 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9f7      	bls.n	8000612 <HAL_RCC_OscConfig+0x116>
 8000622:	e7ad      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000624:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000626:	f7ff fdd3 	bl	80001d0 <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	0798      	lsls	r0, r3, #30
 8000630:	f57f af6d 	bpl.w	800050e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000634:	f7ff fdcc 	bl	80001d0 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2802      	cmp	r0, #2
 800063c:	d9f6      	bls.n	800062c <HAL_RCC_OscConfig+0x130>
 800063e:	e79f      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000640:	69aa      	ldr	r2, [r5, #24]
 8000642:	4c4a      	ldr	r4, [pc, #296]	; (800076c <HAL_RCC_OscConfig+0x270>)
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <HAL_RCC_OscConfig+0x278>)
 8000646:	b1da      	cbz	r2, 8000680 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064c:	f7ff fdc0 	bl	80001d0 <HAL_GetTick>
 8000650:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000654:	079b      	lsls	r3, r3, #30
 8000656:	d50d      	bpl.n	8000674 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000658:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <HAL_RCC_OscConfig+0x27c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	fbb3 f3f2 	udiv	r3, r3, r2
 8000664:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000666:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000668:	9b01      	ldr	r3, [sp, #4]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f9      	bne.n	8000666 <HAL_RCC_OscConfig+0x16a>
 8000672:	e750      	b.n	8000516 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000674:	f7ff fdac 	bl	80001d0 <HAL_GetTick>
 8000678:	1b80      	subs	r0, r0, r6
 800067a:	2802      	cmp	r0, #2
 800067c:	d9e9      	bls.n	8000652 <HAL_RCC_OscConfig+0x156>
 800067e:	e77f      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000680:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800068a:	079f      	lsls	r7, r3, #30
 800068c:	f57f af43 	bpl.w	8000516 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000690:	f7ff fd9e 	bl	80001d0 <HAL_GetTick>
 8000694:	1b80      	subs	r0, r0, r6
 8000696:	2802      	cmp	r0, #2
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x18c>
 800069a:	e771      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800069c:	4c33      	ldr	r4, [pc, #204]	; (800076c <HAL_RCC_OscConfig+0x270>)
 800069e:	69e3      	ldr	r3, [r4, #28]
 80006a0:	00d8      	lsls	r0, r3, #3
 80006a2:	d424      	bmi.n	80006ee <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006a4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	69e3      	ldr	r3, [r4, #28]
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61e3      	str	r3, [r4, #28]
 80006ae:	69e3      	ldr	r3, [r4, #28]
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b8:	4e30      	ldr	r6, [pc, #192]	; (800077c <HAL_RCC_OscConfig+0x280>)
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	05d9      	lsls	r1, r3, #23
 80006be:	d518      	bpl.n	80006f2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c0:	68eb      	ldr	r3, [r5, #12]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d126      	bne.n	8000714 <HAL_RCC_OscConfig+0x218>
 80006c6:	6a23      	ldr	r3, [r4, #32]
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fd7f 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006d6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006d8:	6a23      	ldr	r3, [r4, #32]
 80006da:	079b      	lsls	r3, r3, #30
 80006dc:	d53f      	bpl.n	800075e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006de:	2f00      	cmp	r7, #0
 80006e0:	f43f af1d 	beq.w	800051e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006e4:	69e3      	ldr	r3, [r4, #28]
 80006e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006ea:	61e3      	str	r3, [r4, #28]
 80006ec:	e717      	b.n	800051e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006ee:	2700      	movs	r7, #0
 80006f0:	e7e2      	b.n	80006b8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006f2:	6833      	ldr	r3, [r6, #0]
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006fa:	f7ff fd69 	bl	80001d0 <HAL_GetTick>
 80006fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000700:	6833      	ldr	r3, [r6, #0]
 8000702:	05da      	lsls	r2, r3, #23
 8000704:	d4dc      	bmi.n	80006c0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000706:	f7ff fd63 	bl	80001d0 <HAL_GetTick>
 800070a:	eba0 0008 	sub.w	r0, r0, r8
 800070e:	2864      	cmp	r0, #100	; 0x64
 8000710:	d9f6      	bls.n	8000700 <HAL_RCC_OscConfig+0x204>
 8000712:	e735      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000714:	b9ab      	cbnz	r3, 8000742 <HAL_RCC_OscConfig+0x246>
 8000716:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000718:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6223      	str	r3, [r4, #32]
 8000722:	6a23      	ldr	r3, [r4, #32]
 8000724:	f023 0304 	bic.w	r3, r3, #4
 8000728:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800072a:	f7ff fd51 	bl	80001d0 <HAL_GetTick>
 800072e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	0798      	lsls	r0, r3, #30
 8000734:	d5d3      	bpl.n	80006de <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000736:	f7ff fd4b 	bl	80001d0 <HAL_GetTick>
 800073a:	1b80      	subs	r0, r0, r6
 800073c:	4540      	cmp	r0, r8
 800073e:	d9f7      	bls.n	8000730 <HAL_RCC_OscConfig+0x234>
 8000740:	e71e      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000742:	2b05      	cmp	r3, #5
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	d103      	bne.n	8000750 <HAL_RCC_OscConfig+0x254>
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6223      	str	r3, [r4, #32]
 800074e:	e7ba      	b.n	80006c6 <HAL_RCC_OscConfig+0x1ca>
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	6223      	str	r3, [r4, #32]
 8000756:	6a23      	ldr	r3, [r4, #32]
 8000758:	f023 0304 	bic.w	r3, r3, #4
 800075c:	e7b6      	b.n	80006cc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800075e:	f7ff fd37 	bl	80001d0 <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	42b0      	cmp	r0, r6
 8000768:	d9b6      	bls.n	80006d8 <HAL_RCC_OscConfig+0x1dc>
 800076a:	e709      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
 800076c:	40021000 	.word	0x40021000
 8000770:	42420000 	.word	0x42420000
 8000774:	42420480 	.word	0x42420480
 8000778:	20000008 	.word	0x20000008
 800077c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000780:	4c22      	ldr	r4, [pc, #136]	; (800080c <HAL_RCC_OscConfig+0x310>)
 8000782:	6863      	ldr	r3, [r4, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	2b08      	cmp	r3, #8
 800078a:	f43f aee2 	beq.w	8000552 <HAL_RCC_OscConfig+0x56>
 800078e:	2300      	movs	r3, #0
 8000790:	4e1f      	ldr	r6, [pc, #124]	; (8000810 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000792:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000794:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000796:	d12b      	bne.n	80007f0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000798:	f7ff fd1a 	bl	80001d0 <HAL_GetTick>
 800079c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	0199      	lsls	r1, r3, #6
 80007a2:	d41f      	bmi.n	80007e4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007a4:	6a2b      	ldr	r3, [r5, #32]
 80007a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007aa:	d105      	bne.n	80007b8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007ac:	6862      	ldr	r2, [r4, #4]
 80007ae:	68a9      	ldr	r1, [r5, #8]
 80007b0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007b4:	430a      	orrs	r2, r1
 80007b6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007ba:	6862      	ldr	r2, [r4, #4]
 80007bc:	430b      	orrs	r3, r1
 80007be:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007c2:	4313      	orrs	r3, r2
 80007c4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007c6:	2301      	movs	r3, #1
 80007c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007ca:	f7ff fd01 	bl	80001d0 <HAL_GetTick>
 80007ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	019a      	lsls	r2, r3, #6
 80007d4:	f53f aea7 	bmi.w	8000526 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007d8:	f7ff fcfa 	bl	80001d0 <HAL_GetTick>
 80007dc:	1b40      	subs	r0, r0, r5
 80007de:	2802      	cmp	r0, #2
 80007e0:	d9f6      	bls.n	80007d0 <HAL_RCC_OscConfig+0x2d4>
 80007e2:	e6cd      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e4:	f7ff fcf4 	bl	80001d0 <HAL_GetTick>
 80007e8:	1bc0      	subs	r0, r0, r7
 80007ea:	2802      	cmp	r0, #2
 80007ec:	d9d7      	bls.n	800079e <HAL_RCC_OscConfig+0x2a2>
 80007ee:	e6c7      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007f0:	f7ff fcee 	bl	80001d0 <HAL_GetTick>
 80007f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	f57f ae94 	bpl.w	8000526 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007fe:	f7ff fce7 	bl	80001d0 <HAL_GetTick>
 8000802:	1b40      	subs	r0, r0, r5
 8000804:	2802      	cmp	r0, #2
 8000806:	d9f6      	bls.n	80007f6 <HAL_RCC_OscConfig+0x2fa>
 8000808:	e6ba      	b.n	8000580 <HAL_RCC_OscConfig+0x84>
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	42420060 	.word	0x42420060

08000814 <HAL_RCC_GetSysClockFreq>:
{
 8000814:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000818:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800081a:	ac02      	add	r4, sp, #8
 800081c:	f103 0510 	add.w	r5, r3, #16
 8000820:	4622      	mov	r2, r4
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	6859      	ldr	r1, [r3, #4]
 8000826:	3308      	adds	r3, #8
 8000828:	c203      	stmia	r2!, {r0, r1}
 800082a:	42ab      	cmp	r3, r5
 800082c:	4614      	mov	r4, r2
 800082e:	d1f7      	bne.n	8000820 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000830:	2301      	movs	r3, #1
 8000832:	f88d 3004 	strb.w	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000838:	4911      	ldr	r1, [pc, #68]	; (8000880 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800083a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800083e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000840:	f003 020c 	and.w	r2, r3, #12
 8000844:	2a08      	cmp	r2, #8
 8000846:	d117      	bne.n	8000878 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000848:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800084c:	a806      	add	r0, sp, #24
 800084e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000850:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000852:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000856:	d50c      	bpl.n	8000872 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000858:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800085c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000860:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000862:	aa06      	add	r2, sp, #24
 8000864:	4413      	add	r3, r2
 8000866:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800086a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800086e:	b007      	add	sp, #28
 8000870:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_RCC_GetSysClockFreq+0x74>)
 8000874:	4350      	muls	r0, r2
 8000876:	e7fa      	b.n	800086e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800087a:	e7f8      	b.n	800086e <HAL_RCC_GetSysClockFreq+0x5a>
 800087c:	08002f74 	.word	0x08002f74
 8000880:	40021000 	.word	0x40021000
 8000884:	007a1200 	.word	0x007a1200
 8000888:	003d0900 	.word	0x003d0900

0800088c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800088c:	4a54      	ldr	r2, [pc, #336]	; (80009e0 <HAL_RCC_ClockConfig+0x154>)
{
 800088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000892:	6813      	ldr	r3, [r2, #0]
{
 8000894:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	428b      	cmp	r3, r1
{
 800089c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800089e:	d32a      	bcc.n	80008f6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008a0:	6829      	ldr	r1, [r5, #0]
 80008a2:	078c      	lsls	r4, r1, #30
 80008a4:	d434      	bmi.n	8000910 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008a6:	07ca      	lsls	r2, r1, #31
 80008a8:	d447      	bmi.n	800093a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008aa:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <HAL_RCC_ClockConfig+0x154>)
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	429e      	cmp	r6, r3
 80008b4:	f0c0 8082 	bcc.w	80009bc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b8:	682a      	ldr	r2, [r5, #0]
 80008ba:	4c4a      	ldr	r4, [pc, #296]	; (80009e4 <HAL_RCC_ClockConfig+0x158>)
 80008bc:	f012 0f04 	tst.w	r2, #4
 80008c0:	f040 8087 	bne.w	80009d2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c4:	0713      	lsls	r3, r2, #28
 80008c6:	d506      	bpl.n	80008d6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	692a      	ldr	r2, [r5, #16]
 80008cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008d4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008d6:	f7ff ff9d 	bl	8000814 <HAL_RCC_GetSysClockFreq>
 80008da:	6863      	ldr	r3, [r4, #4]
 80008dc:	4a42      	ldr	r2, [pc, #264]	; (80009e8 <HAL_RCC_ClockConfig+0x15c>)
 80008de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	40d8      	lsrs	r0, r3
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <HAL_RCC_ClockConfig+0x160>)
 80008e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fc2e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008f0:	2000      	movs	r0, #0
}
 80008f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f023 0307 	bic.w	r3, r3, #7
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	4299      	cmp	r1, r3
 8000908:	d0ca      	beq.n	80008a0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800090a:	2001      	movs	r0, #1
 800090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000910:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000912:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000916:	bf1e      	ittt	ne
 8000918:	685a      	ldrne	r2, [r3, #4]
 800091a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800091e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000920:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000922:	bf42      	ittt	mi
 8000924:	685a      	ldrmi	r2, [r3, #4]
 8000926:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800092a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	68a8      	ldr	r0, [r5, #8]
 8000930:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000934:	4302      	orrs	r2, r0
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	e7b5      	b.n	80008a6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093a:	686a      	ldr	r2, [r5, #4]
 800093c:	4c29      	ldr	r4, [pc, #164]	; (80009e4 <HAL_RCC_ClockConfig+0x158>)
 800093e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000940:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000942:	d11c      	bne.n	800097e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000944:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	d0df      	beq.n	800090a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800094a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800094c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000950:	f023 0303 	bic.w	r3, r3, #3
 8000954:	4313      	orrs	r3, r2
 8000956:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000958:	f7ff fc3a 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800095e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000960:	2b01      	cmp	r3, #1
 8000962:	d114      	bne.n	800098e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000964:	6863      	ldr	r3, [r4, #4]
 8000966:	f003 030c 	and.w	r3, r3, #12
 800096a:	2b04      	cmp	r3, #4
 800096c:	d09d      	beq.n	80008aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800096e:	f7ff fc2f 	bl	80001d0 <HAL_GetTick>
 8000972:	1bc0      	subs	r0, r0, r7
 8000974:	4540      	cmp	r0, r8
 8000976:	d9f5      	bls.n	8000964 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000978:	2003      	movs	r0, #3
 800097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800097e:	2a02      	cmp	r2, #2
 8000980:	d102      	bne.n	8000988 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000982:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000986:	e7df      	b.n	8000948 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000988:	f013 0f02 	tst.w	r3, #2
 800098c:	e7dc      	b.n	8000948 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098e:	2b02      	cmp	r3, #2
 8000990:	d10f      	bne.n	80009b2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000992:	6863      	ldr	r3, [r4, #4]
 8000994:	f003 030c 	and.w	r3, r3, #12
 8000998:	2b08      	cmp	r3, #8
 800099a:	d086      	beq.n	80008aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099c:	f7ff fc18 	bl	80001d0 <HAL_GetTick>
 80009a0:	1bc0      	subs	r0, r0, r7
 80009a2:	4540      	cmp	r0, r8
 80009a4:	d9f5      	bls.n	8000992 <HAL_RCC_ClockConfig+0x106>
 80009a6:	e7e7      	b.n	8000978 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a8:	f7ff fc12 	bl	80001d0 <HAL_GetTick>
 80009ac:	1bc0      	subs	r0, r0, r7
 80009ae:	4540      	cmp	r0, r8
 80009b0:	d8e2      	bhi.n	8000978 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b2:	6863      	ldr	r3, [r4, #4]
 80009b4:	f013 0f0c 	tst.w	r3, #12
 80009b8:	d1f6      	bne.n	80009a8 <HAL_RCC_ClockConfig+0x11c>
 80009ba:	e776      	b.n	80008aa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	4333      	orrs	r3, r6
 80009c4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	429e      	cmp	r6, r3
 80009ce:	d19c      	bne.n	800090a <HAL_RCC_ClockConfig+0x7e>
 80009d0:	e772      	b.n	80008b8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	68e9      	ldr	r1, [r5, #12]
 80009d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009da:	430b      	orrs	r3, r1
 80009dc:	6063      	str	r3, [r4, #4]
 80009de:	e771      	b.n	80008c4 <HAL_RCC_ClockConfig+0x38>
 80009e0:	40022000 	.word	0x40022000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08002fbd 	.word	0x08002fbd
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009fe:	6810      	ldr	r0, [r2, #0]
}    
 8000a00:	40d8      	lsrs	r0, r3
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	08002fcd 	.word	0x08002fcd
 8000a0c:	20000008 	.word	0x20000008

08000a10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a1e:	6810      	ldr	r0, [r2, #0]
} 
 8000a20:	40d8      	lsrs	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000
 8000a28:	08002fcd 	.word	0x08002fcd
 8000a2c:	20000008 	.word	0x20000008

08000a30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a30:	6803      	ldr	r3, [r0, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	f022 0201 	bic.w	r2, r2, #1
 8000a40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a42:	2320      	movs	r3, #32
 8000a44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000a48:	4770      	bx	lr
	...

08000a4c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a50:	6805      	ldr	r5, [r0, #0]
 8000a52:	68c2      	ldr	r2, [r0, #12]
 8000a54:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a56:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a60:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a62:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a68:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a6c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a70:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a76:	696b      	ldr	r3, [r5, #20]
 8000a78:	6982      	ldr	r2, [r0, #24]
 8000a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a82:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <UART_SetConfig+0x138>)
{
 8000a84:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a86:	429d      	cmp	r5, r3
 8000a88:	f04f 0419 	mov.w	r4, #25
 8000a8c:	d146      	bne.n	8000b1c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a8e:	f7ff ffbf 	bl	8000a10 <HAL_RCC_GetPCLK2Freq>
 8000a92:	fb04 f300 	mul.w	r3, r4, r0
 8000a96:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000a9a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000a9e:	00b6      	lsls	r6, r6, #2
 8000aa0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000aa4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aa8:	011e      	lsls	r6, r3, #4
 8000aaa:	f7ff ffb1 	bl	8000a10 <HAL_RCC_GetPCLK2Freq>
 8000aae:	4360      	muls	r0, r4
 8000ab0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000aba:	f7ff ffa9 	bl	8000a10 <HAL_RCC_GetPCLK2Freq>
 8000abe:	4360      	muls	r0, r4
 8000ac0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000aca:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ace:	fb08 7313 	mls	r3, r8, r3, r7
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	3332      	adds	r3, #50	; 0x32
 8000ad6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ada:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ade:	f7ff ff97 	bl	8000a10 <HAL_RCC_GetPCLK2Freq>
 8000ae2:	4360      	muls	r0, r4
 8000ae4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	fbb0 faf2 	udiv	sl, r0, r2
 8000aee:	f7ff ff8f 	bl	8000a10 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000af2:	4360      	muls	r0, r4
 8000af4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000afe:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b02:	fb08 a313 	mls	r3, r8, r3, sl
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	3332      	adds	r3, #50	; 0x32
 8000b0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	433b      	orrs	r3, r7
 8000b14:	4433      	add	r3, r6
 8000b16:	60ab      	str	r3, [r5, #8]
 8000b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1c:	f7ff ff68 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8000b20:	fb04 f300 	mul.w	r3, r4, r0
 8000b24:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b28:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b2c:	00b6      	lsls	r6, r6, #2
 8000b2e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b36:	011e      	lsls	r6, r3, #4
 8000b38:	f7ff ff5a 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8000b3c:	4360      	muls	r0, r4
 8000b3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b48:	f7ff ff52 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	4360      	muls	r0, r4
 8000b4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b58:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b5c:	fb08 7313 	mls	r3, r8, r3, r7
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	3332      	adds	r3, #50	; 0x32
 8000b64:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b68:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b6c:	f7ff ff40 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8000b70:	4360      	muls	r0, r4
 8000b72:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	fbb0 faf2 	udiv	sl, r0, r2
 8000b7c:	f7ff ff38 	bl	80009f0 <HAL_RCC_GetPCLK1Freq>
 8000b80:	e7b7      	b.n	8000af2 <UART_SetConfig+0xa6>
 8000b82:	bf00      	nop
 8000b84:	40013800 	.word	0x40013800

08000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	460e      	mov	r6, r1
 8000b8e:	4617      	mov	r7, r2
 8000b90:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	680b      	ldr	r3, [r1, #0]
 8000b96:	ea36 0303 	bics.w	r3, r6, r3
 8000b9a:	d101      	bne.n	8000ba0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000b9c:	2000      	movs	r0, #0
}
 8000b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ba0:	1c6b      	adds	r3, r5, #1
 8000ba2:	d0f7      	beq.n	8000b94 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ba4:	b995      	cbnz	r5, 8000bcc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ba6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000ba8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000bb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	f022 0201 	bic.w	r2, r2, #1
 8000bb8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000bc0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bcc:	f7ff fb00 	bl	80001d0 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	4285      	cmp	r5, r0
 8000bd4:	d2dd      	bcs.n	8000b92 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000bd6:	e7e6      	b.n	8000ba6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000bd8 <HAL_UART_Init>:
{
 8000bd8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000bda:	4604      	mov	r4, r0
 8000bdc:	b340      	cbz	r0, 8000c30 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000bde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000be2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000be6:	b91b      	cbnz	r3, 8000bf0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000be8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000bec:	f000 fa84 	bl	80010f8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000bf0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000bf2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000bf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000bf8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bfa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c00:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c02:	f7ff ff23 	bl	8000a4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c06:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c08:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c20:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c22:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c24:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c2a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
}
 8000c32:	bd10      	pop	{r4, pc}

08000c34 <HAL_UART_Transmit>:
{
 8000c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c38:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c3e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c40:	2b20      	cmp	r3, #32
{
 8000c42:	460d      	mov	r5, r1
 8000c44:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c46:	d14e      	bne.n	8000ce6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d049      	beq.n	8000ce0 <HAL_UART_Transmit+0xac>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d047      	beq.n	8000ce0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000c50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d046      	beq.n	8000ce6 <HAL_UART_Transmit+0xb2>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c62:	2321      	movs	r3, #33	; 0x21
 8000c64:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000c68:	f7ff fab2 	bl	80001d0 <HAL_GetTick>
 8000c6c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000c6e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c72:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000c76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b96b      	cbnz	r3, 8000c98 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4632      	mov	r2, r6
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff ff80 	bl	8000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c88:	b9a8      	cbnz	r0, 8000cb6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000c8a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000c8c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000c90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000c98:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c9a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ca2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ca4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000caa:	4620      	mov	r0, r4
 8000cac:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cae:	d10e      	bne.n	8000cce <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cb0:	f7ff ff6a 	bl	8000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cb4:	b110      	cbz	r0, 8000cbc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000cbc:	882b      	ldrh	r3, [r5, #0]
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cc4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000cc6:	6923      	ldr	r3, [r4, #16]
 8000cc8:	b943      	cbnz	r3, 8000cdc <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000cca:	3502      	adds	r5, #2
 8000ccc:	e7d3      	b.n	8000c76 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cce:	f7ff ff5b 	bl	8000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d1ef      	bne.n	8000cb6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	782a      	ldrb	r2, [r5, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	3501      	adds	r5, #1
 8000cde:	e7ca      	b.n	8000c76 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000ce6:	2002      	movs	r0, #2
}
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000cec <HAL_UART_Receive>:
{
 8000cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf0:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8000cf2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000cf6:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8000cf8:	2b20      	cmp	r3, #32
{
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000cfe:	d151      	bne.n	8000da4 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d04c      	beq.n	8000d9e <HAL_UART_Receive+0xb2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d04a      	beq.n	8000d9e <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8000d08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d049      	beq.n	8000da4 <HAL_UART_Receive+0xb8>
 8000d10:	2301      	movs	r3, #1
 8000d12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d1a:	2322      	movs	r3, #34	; 0x22
 8000d1c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8000d20:	f7ff fa56 	bl	80001d0 <HAL_GetTick>
 8000d24:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8000d26:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000d2a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8000d2e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8000d30:	b280      	uxth	r0, r0
 8000d32:	b930      	cbnz	r0, 8000d42 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8000d34:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000d36:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8000d3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8000d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8000d42:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d44:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d4c:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d4e:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d54:	4620      	mov	r0, r4
 8000d56:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d58:	d112      	bne.n	8000d80 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d5a:	f7ff ff15 	bl	8000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d5e:	b110      	cbz	r0, 8000d66 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8000d60:	2003      	movs	r0, #3
 8000d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d66:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d68:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d6a:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d6c:	b922      	cbnz	r2, 8000d78 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	f825 3b02 	strh.w	r3, [r5], #2
 8000d76:	e7da      	b.n	8000d2e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f825 3b01 	strh.w	r3, [r5], #1
 8000d7e:	e7d6      	b.n	8000d2e <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d80:	f7ff ff02 	bl	8000b88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d1eb      	bne.n	8000d60 <HAL_UART_Receive+0x74>
 8000d88:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d8a:	6921      	ldr	r1, [r4, #16]
 8000d8c:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000d8e:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d90:	b911      	cbnz	r1, 8000d98 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000d92:	702b      	strb	r3, [r5, #0]
 8000d94:	4615      	mov	r5, r2
 8000d96:	e7ca      	b.n	8000d2e <HAL_UART_Receive+0x42>
 8000d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d9c:	e7f9      	b.n	8000d92 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000da4:	2002      	movs	r0, #2
}
 8000da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000daa <HAL_UART_TxCpltCallback>:
 8000daa:	4770      	bx	lr

08000dac <HAL_UART_RxCpltCallback>:
 8000dac:	4770      	bx	lr

08000dae <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000dae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000db2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000db4:	2b22      	cmp	r3, #34	; 0x22
 8000db6:	d136      	bne.n	8000e26 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000db8:	6883      	ldr	r3, [r0, #8]
 8000dba:	6901      	ldr	r1, [r0, #16]
 8000dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc0:	6802      	ldr	r2, [r0, #0]
 8000dc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dc4:	d123      	bne.n	8000e0e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dc6:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000dc8:	b9e9      	cbnz	r1, 8000e06 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dce:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000dd2:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000dd4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000dd6:	3c01      	subs	r4, #1
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000ddc:	b98c      	cbnz	r4, 8000e02 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000dde:	6803      	ldr	r3, [r0, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	f022 0220 	bic.w	r2, r2, #32
 8000de6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dee:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	f022 0201 	bic.w	r2, r2, #1
 8000df6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000dfe:	f7ff ffd5 	bl	8000dac <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000e02:	2000      	movs	r0, #0
}
 8000e04:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	f823 2b01 	strh.w	r2, [r3], #1
 8000e0c:	e7e1      	b.n	8000dd2 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000e0e:	b921      	cbnz	r1, 8000e1a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000e10:	1c59      	adds	r1, r3, #1
 8000e12:	6852      	ldr	r2, [r2, #4]
 8000e14:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e7dc      	b.n	8000dd4 <UART_Receive_IT+0x26>
 8000e1a:	6852      	ldr	r2, [r2, #4]
 8000e1c:	1c59      	adds	r1, r3, #1
 8000e1e:	6281      	str	r1, [r0, #40]	; 0x28
 8000e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e24:	e7f7      	b.n	8000e16 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000e26:	2002      	movs	r0, #2
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <HAL_UART_ErrorCallback>:
 8000e2a:	4770      	bx	lr

08000e2c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e2c:	6803      	ldr	r3, [r0, #0]
{
 8000e2e:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e30:	681a      	ldr	r2, [r3, #0]
{
 8000e32:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000e34:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e36:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000e38:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000e3a:	d107      	bne.n	8000e4c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e3c:	0696      	lsls	r6, r2, #26
 8000e3e:	d55a      	bpl.n	8000ef6 <HAL_UART_IRQHandler+0xca>
 8000e40:	068d      	lsls	r5, r1, #26
 8000e42:	d558      	bpl.n	8000ef6 <HAL_UART_IRQHandler+0xca>
}
 8000e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e48:	f7ff bfb1 	b.w	8000dae <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e4c:	f015 0501 	ands.w	r5, r5, #1
 8000e50:	d102      	bne.n	8000e58 <HAL_UART_IRQHandler+0x2c>
 8000e52:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e56:	d04e      	beq.n	8000ef6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e58:	07d3      	lsls	r3, r2, #31
 8000e5a:	d505      	bpl.n	8000e68 <HAL_UART_IRQHandler+0x3c>
 8000e5c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e5e:	bf42      	ittt	mi
 8000e60:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e62:	f043 0301 	orrmi.w	r3, r3, #1
 8000e66:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e68:	0750      	lsls	r0, r2, #29
 8000e6a:	d504      	bpl.n	8000e76 <HAL_UART_IRQHandler+0x4a>
 8000e6c:	b11d      	cbz	r5, 8000e76 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e76:	0793      	lsls	r3, r2, #30
 8000e78:	d504      	bpl.n	8000e84 <HAL_UART_IRQHandler+0x58>
 8000e7a:	b11d      	cbz	r5, 8000e84 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e84:	0716      	lsls	r6, r2, #28
 8000e86:	d504      	bpl.n	8000e92 <HAL_UART_IRQHandler+0x66>
 8000e88:	b11d      	cbz	r5, 8000e92 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d066      	beq.n	8000f66 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e98:	0695      	lsls	r5, r2, #26
 8000e9a:	d504      	bpl.n	8000ea6 <HAL_UART_IRQHandler+0x7a>
 8000e9c:	0688      	lsls	r0, r1, #26
 8000e9e:	d502      	bpl.n	8000ea6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff84 	bl	8000dae <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000ea6:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000ea8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000eaa:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000eac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000eae:	0711      	lsls	r1, r2, #28
 8000eb0:	d402      	bmi.n	8000eb8 <HAL_UART_IRQHandler+0x8c>
 8000eb2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000eb6:	d01a      	beq.n	8000eee <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000eb8:	f7ff fdba 	bl	8000a30 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	0652      	lsls	r2, r2, #25
 8000ec2:	d510      	bpl.n	8000ee6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ec4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000ec6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ecc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000ece:	b150      	cbz	r0, 8000ee6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_UART_IRQHandler+0x13c>)
 8000ed2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000ed4:	f7ff f9ea 	bl	80002ac <HAL_DMA_Abort_IT>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d044      	beq.n	8000f66 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000edc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ee2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ee4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f7ff ff9f 	bl	8000e2a <HAL_UART_ErrorCallback>
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000eee:	f7ff ff9c 	bl	8000e2a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef2:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ef6:	0616      	lsls	r6, r2, #24
 8000ef8:	d527      	bpl.n	8000f4a <HAL_UART_IRQHandler+0x11e>
 8000efa:	060d      	lsls	r5, r1, #24
 8000efc:	d525      	bpl.n	8000f4a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000efe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000f02:	2a21      	cmp	r2, #33	; 0x21
 8000f04:	d12f      	bne.n	8000f66 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f06:	68a2      	ldr	r2, [r4, #8]
 8000f08:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f0c:	6a22      	ldr	r2, [r4, #32]
 8000f0e:	d117      	bne.n	8000f40 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000f10:	8811      	ldrh	r1, [r2, #0]
 8000f12:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000f16:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000f18:	6921      	ldr	r1, [r4, #16]
 8000f1a:	b979      	cbnz	r1, 8000f3c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000f1c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000f1e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000f20:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000f22:	3a01      	subs	r2, #1
 8000f24:	b292      	uxth	r2, r2
 8000f26:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000f28:	b9ea      	cbnz	r2, 8000f66 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f30:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	e7ee      	b.n	8000f1e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f40:	1c51      	adds	r1, r2, #1
 8000f42:	6221      	str	r1, [r4, #32]
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	e7ea      	b.n	8000f20 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f4a:	0650      	lsls	r0, r2, #25
 8000f4c:	d50b      	bpl.n	8000f66 <HAL_UART_IRQHandler+0x13a>
 8000f4e:	064a      	lsls	r2, r1, #25
 8000f50:	d509      	bpl.n	8000f66 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f52:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f54:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f5a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f62:	f7ff ff22 	bl	8000daa <HAL_UART_TxCpltCallback>
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
 8000f68:	08000f6d 	.word	0x08000f6d

08000f6c <UART_DMAAbortOnError>:
{
 8000f6c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f6e:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f70:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f72:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f74:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f76:	f7ff ff58 	bl	8000e2a <HAL_UART_ErrorCallback>
 8000f7a:	bd08      	pop	{r3, pc}

08000f7c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000f7c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 0xFFFF);
 8000f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000f82:	4614      	mov	r4, r2
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 0xFFFF);
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <_write+0x1c>)
 8000f86:	b292      	uxth	r2, r2
 8000f88:	f7ff fe54 	bl	8000c34 <HAL_UART_Transmit>
	return (status == HAL_OK? len:0);
 8000f8c:	2800      	cmp	r0, #0
}
 8000f8e:	bf0c      	ite	eq
 8000f90:	4620      	moveq	r0, r4
 8000f92:	2000      	movne	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	bf00      	nop
 8000f98:	20000208 	.word	0x20000208

08000f9c <_read>:

int _read(int32_t file, uint8_t *result, int32_t len)
{
 8000f9c:	b510      	push	{r4, lr}
    HAL_StatusTypeDef status;
    int retcode = 0;

    if (len != 0) {
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	b15a      	cbz	r2, 8000fba <_read+0x1e>
        status = HAL_UART_Receive( &huart3, (uint8_t *) result, len, HAL_MAX_DELAY);
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <_read+0x24>)
 8000faa:	f7ff fe9f 	bl	8000cec <HAL_UART_Receive>

        if (status == HAL_OK) {
 8000fae:	2800      	cmp	r0, #0
            retcode = len;
        } else {
            retcode = -1;
 8000fb0:	bf0c      	ite	eq
 8000fb2:	4620      	moveq	r0, r4
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	bd10      	pop	{r4, pc}
    int retcode = 0;
 8000fba:	4610      	mov	r0, r2
        }
    }
    return(retcode);
}
 8000fbc:	bd10      	pop	{r4, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000208 	.word	0x20000208

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b500      	push	{lr}
 8000fc6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc8:	2228      	movs	r2, #40	; 0x28
 8000fca:	2100      	movs	r1, #0
 8000fcc:	a806      	add	r0, sp, #24
 8000fce:	f000 f957 	bl	8001280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd2:	2214      	movs	r2, #20
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	a801      	add	r0, sp, #4
 8000fd8:	f000 f952 	bl	8001280 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f7ff fa87 	bl	80004fc <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fee:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffe:	f7ff fc45 	bl	800088c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001002:	b011      	add	sp, #68	; 0x44
 8001004:	f85d fb04 	ldr.w	pc, [sp], #4

08001008 <main>:
{
 8001008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 800100a:	f7ff f8c3 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800100e:	f7ff ffd9 	bl	8000fc4 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <main+0x90>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001014:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	699a      	ldr	r2, [r3, #24]
  huart3.Instance = USART3;
 8001018:	4820      	ldr	r0, [pc, #128]	; (800109c <main+0x94>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	f042 0220 	orr.w	r2, r2, #32
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	699a      	ldr	r2, [r3, #24]
	  printf("please type only number.\r\n");
 8001022:	4e1f      	ldr	r6, [pc, #124]	; (80010a0 <main+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001024:	f002 0220 	and.w	r2, r2, #32
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	699a      	ldr	r2, [r3, #24]
	  scanf("%d", &num);
 800102e:	4d1d      	ldr	r5, [pc, #116]	; (80010a4 <main+0x9c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	f042 0208 	orr.w	r2, r2, #8
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	f002 0208 	and.w	r2, r2, #8
 800103c:	9202      	str	r2, [sp, #8]
 800103e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	f042 0204 	orr.w	r2, r2, #4
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	699b      	ldr	r3, [r3, #24]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <main+0xa0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	9303      	str	r3, [sp, #12]
 8001052:	9b03      	ldr	r3, [sp, #12]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001054:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001058:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800105c:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105e:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001060:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001062:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001064:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001066:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001068:	f7ff fdb6 	bl	8000bd8 <HAL_UART_Init>
  setvbuf(stdin, NULL, _IONBF, 0);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <main+0xa4>)
 800106e:	4621      	mov	r1, r4
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	2202      	movs	r2, #2
 8001074:	4623      	mov	r3, r4
 8001076:	6840      	ldr	r0, [r0, #4]
 8001078:	f000 f99e 	bl	80013b8 <setvbuf>
	  printf("number is %d.\r\n", num);
 800107c:	4c0c      	ldr	r4, [pc, #48]	; (80010b0 <main+0xa8>)
	  printf("please type only number.\r\n");
 800107e:	4630      	mov	r0, r6
 8001080:	f000 f97a 	bl	8001378 <puts>
	  scanf("%d", &num);
 8001084:	4669      	mov	r1, sp
 8001086:	4628      	mov	r0, r5
 8001088:	f000 f97e 	bl	8001388 <iscanf>
	  printf("number is %d.\r\n", num);
 800108c:	9900      	ldr	r1, [sp, #0]
 800108e:	4620      	mov	r0, r4
 8001090:	f000 f8fe 	bl	8001290 <iprintf>
 8001094:	e7f3      	b.n	800107e <main+0x76>
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	20000208 	.word	0x20000208
 80010a0:	08002f90 	.word	0x08002f90
 80010a4:	08002faa 	.word	0x08002faa
 80010a8:	40004800 	.word	0x40004800
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	08002fad 	.word	0x08002fad

080010b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_MspInit+0x3c>)
{
 80010b6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	619a      	str	r2, [r3, #24]
 80010c0:	699a      	ldr	r2, [r3, #24]
 80010c2:	f002 0201 	and.w	r2, r2, #1
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d0:	61da      	str	r2, [r3, #28]
 80010d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	6853      	ldr	r3, [r2, #4]
 80010e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	b002      	add	sp, #8
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b510      	push	{r4, lr}
 80010fa:	4604      	mov	r4, r0
 80010fc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	2210      	movs	r2, #16
 8001100:	2100      	movs	r1, #0
 8001102:	a802      	add	r0, sp, #8
 8001104:	f000 f8bc 	bl	8001280 <memset>
  if(huart->Instance==USART3)
 8001108:	6822      	ldr	r2, [r4, #0]
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x80>)
 800110c:	429a      	cmp	r2, r3
 800110e:	d130      	bne.n	8001172 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001110:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001114:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001118:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800111c:	61da      	str	r2, [r3, #28]
 800111e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f7ff f8f6 	bl	800033c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001150:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	a902      	add	r1, sp, #8
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001158:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f7ff f8ed 	bl	800033c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001162:	2027      	movs	r0, #39	; 0x27
 8001164:	4622      	mov	r2, r4
 8001166:	4621      	mov	r1, r4
 8001168:	f7ff f84a 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116c:	2027      	movs	r0, #39	; 0x27
 800116e:	f7ff f87b 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001172:	b006      	add	sp, #24
 8001174:	bd10      	pop	{r4, pc}
 8001176:	bf00      	nop
 8001178:	40004800 	.word	0x40004800
 800117c:	40010c00 	.word	0x40010c00

08001180 <NMI_Handler>:
 8001180:	4770      	bx	lr

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler>

0800118a <SVC_Handler>:
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f7ff b812 	b.w	80001b8 <HAL_IncTick>

08001194 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001194:	4801      	ldr	r0, [pc, #4]	; (800119c <USART3_IRQHandler+0x8>)
 8001196:	f7ff be49 	b.w	8000e2c <HAL_UART_IRQHandler>
 800119a:	bf00      	nop
 800119c:	20000208 	.word	0x20000208

080011a0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <SystemInit+0x40>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <SystemInit+0x44>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011bc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011c4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011cc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SystemInit+0x48>)
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	f8ff0000 	.word	0xf8ff0000
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffc5 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f000 f80f 	bl	8001238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fef5 	bl	8001008 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r3, =_sidata
 8001220:	080031a0 	.word	0x080031a0
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001228:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800122c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001230:	2000024c 	.word	0x2000024c

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <__libc_init_array>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	2500      	movs	r5, #0
 800123c:	4e0c      	ldr	r6, [pc, #48]	; (8001270 <__libc_init_array+0x38>)
 800123e:	4c0d      	ldr	r4, [pc, #52]	; (8001274 <__libc_init_array+0x3c>)
 8001240:	1ba4      	subs	r4, r4, r6
 8001242:	10a4      	asrs	r4, r4, #2
 8001244:	42a5      	cmp	r5, r4
 8001246:	d109      	bne.n	800125c <__libc_init_array+0x24>
 8001248:	f001 fe88 	bl	8002f5c <_init>
 800124c:	2500      	movs	r5, #0
 800124e:	4e0a      	ldr	r6, [pc, #40]	; (8001278 <__libc_init_array+0x40>)
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <__libc_init_array+0x44>)
 8001252:	1ba4      	subs	r4, r4, r6
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	42a5      	cmp	r5, r4
 8001258:	d105      	bne.n	8001266 <__libc_init_array+0x2e>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001260:	4798      	blx	r3
 8001262:	3501      	adds	r5, #1
 8001264:	e7ee      	b.n	8001244 <__libc_init_array+0xc>
 8001266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800126a:	4798      	blx	r3
 800126c:	3501      	adds	r5, #1
 800126e:	e7f2      	b.n	8001256 <__libc_init_array+0x1e>
 8001270:	08003198 	.word	0x08003198
 8001274:	08003198 	.word	0x08003198
 8001278:	08003198 	.word	0x08003198
 800127c:	0800319c 	.word	0x0800319c

08001280 <memset>:
 8001280:	4603      	mov	r3, r0
 8001282:	4402      	add	r2, r0
 8001284:	4293      	cmp	r3, r2
 8001286:	d100      	bne.n	800128a <memset+0xa>
 8001288:	4770      	bx	lr
 800128a:	f803 1b01 	strb.w	r1, [r3], #1
 800128e:	e7f9      	b.n	8001284 <memset+0x4>

08001290 <iprintf>:
 8001290:	b40f      	push	{r0, r1, r2, r3}
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <iprintf+0x2c>)
 8001294:	b513      	push	{r0, r1, r4, lr}
 8001296:	681c      	ldr	r4, [r3, #0]
 8001298:	b124      	cbz	r4, 80012a4 <iprintf+0x14>
 800129a:	69a3      	ldr	r3, [r4, #24]
 800129c:	b913      	cbnz	r3, 80012a4 <iprintf+0x14>
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 fafc 	bl	800189c <__sinit>
 80012a4:	ab05      	add	r3, sp, #20
 80012a6:	9a04      	ldr	r2, [sp, #16]
 80012a8:	68a1      	ldr	r1, [r4, #8]
 80012aa:	4620      	mov	r0, r4
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f000 fcd9 	bl	8001c64 <_vfiprintf_r>
 80012b2:	b002      	add	sp, #8
 80012b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <_puts_r>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	460e      	mov	r6, r1
 80012c4:	4605      	mov	r5, r0
 80012c6:	b118      	cbz	r0, 80012d0 <_puts_r+0x10>
 80012c8:	6983      	ldr	r3, [r0, #24]
 80012ca:	b90b      	cbnz	r3, 80012d0 <_puts_r+0x10>
 80012cc:	f000 fae6 	bl	800189c <__sinit>
 80012d0:	69ab      	ldr	r3, [r5, #24]
 80012d2:	68ac      	ldr	r4, [r5, #8]
 80012d4:	b913      	cbnz	r3, 80012dc <_puts_r+0x1c>
 80012d6:	4628      	mov	r0, r5
 80012d8:	f000 fae0 	bl	800189c <__sinit>
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <_puts_r+0xac>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	d117      	bne.n	8001312 <_puts_r+0x52>
 80012e2:	686c      	ldr	r4, [r5, #4]
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	071b      	lsls	r3, r3, #28
 80012e8:	d51d      	bpl.n	8001326 <_puts_r+0x66>
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	b1db      	cbz	r3, 8001326 <_puts_r+0x66>
 80012ee:	3e01      	subs	r6, #1
 80012f0:	68a3      	ldr	r3, [r4, #8]
 80012f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	b9e9      	cbnz	r1, 8001338 <_puts_r+0x78>
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da2e      	bge.n	800135e <_puts_r+0x9e>
 8001300:	4622      	mov	r2, r4
 8001302:	210a      	movs	r1, #10
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f905 	bl	8001514 <__swbuf_r>
 800130a:	3001      	adds	r0, #1
 800130c:	d011      	beq.n	8001332 <_puts_r+0x72>
 800130e:	200a      	movs	r0, #10
 8001310:	bd70      	pop	{r4, r5, r6, pc}
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <_puts_r+0xb0>)
 8001314:	429c      	cmp	r4, r3
 8001316:	d101      	bne.n	800131c <_puts_r+0x5c>
 8001318:	68ac      	ldr	r4, [r5, #8]
 800131a:	e7e3      	b.n	80012e4 <_puts_r+0x24>
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_puts_r+0xb4>)
 800131e:	429c      	cmp	r4, r3
 8001320:	bf08      	it	eq
 8001322:	68ec      	ldreq	r4, [r5, #12]
 8001324:	e7de      	b.n	80012e4 <_puts_r+0x24>
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f000 f945 	bl	80015b8 <__swsetup_r>
 800132e:	2800      	cmp	r0, #0
 8001330:	d0dd      	beq.n	80012ee <_puts_r+0x2e>
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	bd70      	pop	{r4, r5, r6, pc}
 8001338:	2b00      	cmp	r3, #0
 800133a:	da04      	bge.n	8001346 <_puts_r+0x86>
 800133c:	69a2      	ldr	r2, [r4, #24]
 800133e:	4293      	cmp	r3, r2
 8001340:	db06      	blt.n	8001350 <_puts_r+0x90>
 8001342:	290a      	cmp	r1, #10
 8001344:	d004      	beq.n	8001350 <_puts_r+0x90>
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	6022      	str	r2, [r4, #0]
 800134c:	7019      	strb	r1, [r3, #0]
 800134e:	e7cf      	b.n	80012f0 <_puts_r+0x30>
 8001350:	4622      	mov	r2, r4
 8001352:	4628      	mov	r0, r5
 8001354:	f000 f8de 	bl	8001514 <__swbuf_r>
 8001358:	3001      	adds	r0, #1
 800135a:	d1c9      	bne.n	80012f0 <_puts_r+0x30>
 800135c:	e7e9      	b.n	8001332 <_puts_r+0x72>
 800135e:	200a      	movs	r0, #10
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	6022      	str	r2, [r4, #0]
 8001366:	7018      	strb	r0, [r3, #0]
 8001368:	bd70      	pop	{r4, r5, r6, pc}
 800136a:	bf00      	nop
 800136c:	08002ffc 	.word	0x08002ffc
 8001370:	0800301c 	.word	0x0800301c
 8001374:	08002fdc 	.word	0x08002fdc

08001378 <puts>:
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <puts+0xc>)
 800137a:	4601      	mov	r1, r0
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f7ff bf9f 	b.w	80012c0 <_puts_r>
 8001382:	bf00      	nop
 8001384:	2000000c 	.word	0x2000000c

08001388 <iscanf>:
 8001388:	b40f      	push	{r0, r1, r2, r3}
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <iscanf+0x2c>)
 800138c:	b513      	push	{r0, r1, r4, lr}
 800138e:	681c      	ldr	r4, [r3, #0]
 8001390:	b124      	cbz	r4, 800139c <iscanf+0x14>
 8001392:	69a3      	ldr	r3, [r4, #24]
 8001394:	b913      	cbnz	r3, 800139c <iscanf+0x14>
 8001396:	4620      	mov	r0, r4
 8001398:	f000 fa80 	bl	800189c <__sinit>
 800139c:	ab05      	add	r3, sp, #20
 800139e:	9a04      	ldr	r2, [sp, #16]
 80013a0:	6861      	ldr	r1, [r4, #4]
 80013a2:	4620      	mov	r0, r4
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f001 f85f 	bl	8002468 <_vfiscanf_r>
 80013aa:	b002      	add	sp, #8
 80013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013b0:	b004      	add	sp, #16
 80013b2:	4770      	bx	lr
 80013b4:	2000000c 	.word	0x2000000c

080013b8 <setvbuf>:
 80013b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013bc:	461d      	mov	r5, r3
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <setvbuf+0x14c>)
 80013c0:	4604      	mov	r4, r0
 80013c2:	681e      	ldr	r6, [r3, #0]
 80013c4:	460f      	mov	r7, r1
 80013c6:	4690      	mov	r8, r2
 80013c8:	b126      	cbz	r6, 80013d4 <setvbuf+0x1c>
 80013ca:	69b3      	ldr	r3, [r6, #24]
 80013cc:	b913      	cbnz	r3, 80013d4 <setvbuf+0x1c>
 80013ce:	4630      	mov	r0, r6
 80013d0:	f000 fa64 	bl	800189c <__sinit>
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <setvbuf+0x150>)
 80013d6:	429c      	cmp	r4, r3
 80013d8:	d152      	bne.n	8001480 <setvbuf+0xc8>
 80013da:	6874      	ldr	r4, [r6, #4]
 80013dc:	f1b8 0f02 	cmp.w	r8, #2
 80013e0:	d006      	beq.n	80013f0 <setvbuf+0x38>
 80013e2:	f1b8 0f01 	cmp.w	r8, #1
 80013e6:	f200 8089 	bhi.w	80014fc <setvbuf+0x144>
 80013ea:	2d00      	cmp	r5, #0
 80013ec:	f2c0 8086 	blt.w	80014fc <setvbuf+0x144>
 80013f0:	4621      	mov	r1, r4
 80013f2:	4630      	mov	r0, r6
 80013f4:	f000 f9d6 	bl	80017a4 <_fflush_r>
 80013f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013fa:	b141      	cbz	r1, 800140e <setvbuf+0x56>
 80013fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001400:	4299      	cmp	r1, r3
 8001402:	d002      	beq.n	800140a <setvbuf+0x52>
 8001404:	4630      	mov	r0, r6
 8001406:	f000 fb5b 	bl	8001ac0 <_free_r>
 800140a:	2300      	movs	r3, #0
 800140c:	6363      	str	r3, [r4, #52]	; 0x34
 800140e:	2300      	movs	r3, #0
 8001410:	61a3      	str	r3, [r4, #24]
 8001412:	6063      	str	r3, [r4, #4]
 8001414:	89a3      	ldrh	r3, [r4, #12]
 8001416:	061b      	lsls	r3, r3, #24
 8001418:	d503      	bpl.n	8001422 <setvbuf+0x6a>
 800141a:	6921      	ldr	r1, [r4, #16]
 800141c:	4630      	mov	r0, r6
 800141e:	f000 fb4f 	bl	8001ac0 <_free_r>
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	f1b8 0f02 	cmp.w	r8, #2
 8001428:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800142c:	f023 0303 	bic.w	r3, r3, #3
 8001430:	81a3      	strh	r3, [r4, #12]
 8001432:	d05d      	beq.n	80014f0 <setvbuf+0x138>
 8001434:	ab01      	add	r3, sp, #4
 8001436:	466a      	mov	r2, sp
 8001438:	4621      	mov	r1, r4
 800143a:	4630      	mov	r0, r6
 800143c:	f000 fad4 	bl	80019e8 <__swhatbuf_r>
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	4318      	orrs	r0, r3
 8001444:	81a0      	strh	r0, [r4, #12]
 8001446:	bb2d      	cbnz	r5, 8001494 <setvbuf+0xdc>
 8001448:	9d00      	ldr	r5, [sp, #0]
 800144a:	4628      	mov	r0, r5
 800144c:	f000 fb30 	bl	8001ab0 <malloc>
 8001450:	4607      	mov	r7, r0
 8001452:	2800      	cmp	r0, #0
 8001454:	d14e      	bne.n	80014f4 <setvbuf+0x13c>
 8001456:	f8dd 9000 	ldr.w	r9, [sp]
 800145a:	45a9      	cmp	r9, r5
 800145c:	d13c      	bne.n	80014d8 <setvbuf+0x120>
 800145e:	f04f 30ff 	mov.w	r0, #4294967295
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	81a3      	strh	r3, [r4, #12]
 800146a:	2300      	movs	r3, #0
 800146c:	60a3      	str	r3, [r4, #8]
 800146e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001472:	6023      	str	r3, [r4, #0]
 8001474:	6123      	str	r3, [r4, #16]
 8001476:	2301      	movs	r3, #1
 8001478:	6163      	str	r3, [r4, #20]
 800147a:	b003      	add	sp, #12
 800147c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <setvbuf+0x154>)
 8001482:	429c      	cmp	r4, r3
 8001484:	d101      	bne.n	800148a <setvbuf+0xd2>
 8001486:	68b4      	ldr	r4, [r6, #8]
 8001488:	e7a8      	b.n	80013dc <setvbuf+0x24>
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <setvbuf+0x158>)
 800148c:	429c      	cmp	r4, r3
 800148e:	bf08      	it	eq
 8001490:	68f4      	ldreq	r4, [r6, #12]
 8001492:	e7a3      	b.n	80013dc <setvbuf+0x24>
 8001494:	2f00      	cmp	r7, #0
 8001496:	d0d8      	beq.n	800144a <setvbuf+0x92>
 8001498:	69b3      	ldr	r3, [r6, #24]
 800149a:	b913      	cbnz	r3, 80014a2 <setvbuf+0xea>
 800149c:	4630      	mov	r0, r6
 800149e:	f000 f9fd 	bl	800189c <__sinit>
 80014a2:	f1b8 0f01 	cmp.w	r8, #1
 80014a6:	bf08      	it	eq
 80014a8:	89a3      	ldrheq	r3, [r4, #12]
 80014aa:	6027      	str	r7, [r4, #0]
 80014ac:	bf04      	itt	eq
 80014ae:	f043 0301 	orreq.w	r3, r3, #1
 80014b2:	81a3      	strheq	r3, [r4, #12]
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	6127      	str	r7, [r4, #16]
 80014b8:	f013 0008 	ands.w	r0, r3, #8
 80014bc:	6165      	str	r5, [r4, #20]
 80014be:	d01b      	beq.n	80014f8 <setvbuf+0x140>
 80014c0:	f013 0001 	ands.w	r0, r3, #1
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	bf1f      	itttt	ne
 80014ca:	426d      	negne	r5, r5
 80014cc:	60a3      	strne	r3, [r4, #8]
 80014ce:	61a5      	strne	r5, [r4, #24]
 80014d0:	4618      	movne	r0, r3
 80014d2:	bf08      	it	eq
 80014d4:	60a5      	streq	r5, [r4, #8]
 80014d6:	e7d0      	b.n	800147a <setvbuf+0xc2>
 80014d8:	4648      	mov	r0, r9
 80014da:	f000 fae9 	bl	8001ab0 <malloc>
 80014de:	4607      	mov	r7, r0
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d0bc      	beq.n	800145e <setvbuf+0xa6>
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	464d      	mov	r5, r9
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	e7d3      	b.n	8001498 <setvbuf+0xe0>
 80014f0:	2000      	movs	r0, #0
 80014f2:	e7b6      	b.n	8001462 <setvbuf+0xaa>
 80014f4:	46a9      	mov	r9, r5
 80014f6:	e7f5      	b.n	80014e4 <setvbuf+0x12c>
 80014f8:	60a0      	str	r0, [r4, #8]
 80014fa:	e7be      	b.n	800147a <setvbuf+0xc2>
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	e7bb      	b.n	800147a <setvbuf+0xc2>
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	08002ffc 	.word	0x08002ffc
 800150c:	0800301c 	.word	0x0800301c
 8001510:	08002fdc 	.word	0x08002fdc

08001514 <__swbuf_r>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	460e      	mov	r6, r1
 8001518:	4614      	mov	r4, r2
 800151a:	4605      	mov	r5, r0
 800151c:	b118      	cbz	r0, 8001526 <__swbuf_r+0x12>
 800151e:	6983      	ldr	r3, [r0, #24]
 8001520:	b90b      	cbnz	r3, 8001526 <__swbuf_r+0x12>
 8001522:	f000 f9bb 	bl	800189c <__sinit>
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <__swbuf_r+0x98>)
 8001528:	429c      	cmp	r4, r3
 800152a:	d12a      	bne.n	8001582 <__swbuf_r+0x6e>
 800152c:	686c      	ldr	r4, [r5, #4]
 800152e:	69a3      	ldr	r3, [r4, #24]
 8001530:	60a3      	str	r3, [r4, #8]
 8001532:	89a3      	ldrh	r3, [r4, #12]
 8001534:	071a      	lsls	r2, r3, #28
 8001536:	d52e      	bpl.n	8001596 <__swbuf_r+0x82>
 8001538:	6923      	ldr	r3, [r4, #16]
 800153a:	b363      	cbz	r3, 8001596 <__swbuf_r+0x82>
 800153c:	6923      	ldr	r3, [r4, #16]
 800153e:	6820      	ldr	r0, [r4, #0]
 8001540:	b2f6      	uxtb	r6, r6
 8001542:	1ac0      	subs	r0, r0, r3
 8001544:	6963      	ldr	r3, [r4, #20]
 8001546:	4637      	mov	r7, r6
 8001548:	4298      	cmp	r0, r3
 800154a:	db04      	blt.n	8001556 <__swbuf_r+0x42>
 800154c:	4621      	mov	r1, r4
 800154e:	4628      	mov	r0, r5
 8001550:	f000 f928 	bl	80017a4 <_fflush_r>
 8001554:	bb28      	cbnz	r0, 80015a2 <__swbuf_r+0x8e>
 8001556:	68a3      	ldr	r3, [r4, #8]
 8001558:	3001      	adds	r0, #1
 800155a:	3b01      	subs	r3, #1
 800155c:	60a3      	str	r3, [r4, #8]
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	6022      	str	r2, [r4, #0]
 8001564:	701e      	strb	r6, [r3, #0]
 8001566:	6963      	ldr	r3, [r4, #20]
 8001568:	4298      	cmp	r0, r3
 800156a:	d004      	beq.n	8001576 <__swbuf_r+0x62>
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	07db      	lsls	r3, r3, #31
 8001570:	d519      	bpl.n	80015a6 <__swbuf_r+0x92>
 8001572:	2e0a      	cmp	r6, #10
 8001574:	d117      	bne.n	80015a6 <__swbuf_r+0x92>
 8001576:	4621      	mov	r1, r4
 8001578:	4628      	mov	r0, r5
 800157a:	f000 f913 	bl	80017a4 <_fflush_r>
 800157e:	b190      	cbz	r0, 80015a6 <__swbuf_r+0x92>
 8001580:	e00f      	b.n	80015a2 <__swbuf_r+0x8e>
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <__swbuf_r+0x9c>)
 8001584:	429c      	cmp	r4, r3
 8001586:	d101      	bne.n	800158c <__swbuf_r+0x78>
 8001588:	68ac      	ldr	r4, [r5, #8]
 800158a:	e7d0      	b.n	800152e <__swbuf_r+0x1a>
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <__swbuf_r+0xa0>)
 800158e:	429c      	cmp	r4, r3
 8001590:	bf08      	it	eq
 8001592:	68ec      	ldreq	r4, [r5, #12]
 8001594:	e7cb      	b.n	800152e <__swbuf_r+0x1a>
 8001596:	4621      	mov	r1, r4
 8001598:	4628      	mov	r0, r5
 800159a:	f000 f80d 	bl	80015b8 <__swsetup_r>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d0cc      	beq.n	800153c <__swbuf_r+0x28>
 80015a2:	f04f 37ff 	mov.w	r7, #4294967295
 80015a6:	4638      	mov	r0, r7
 80015a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08002ffc 	.word	0x08002ffc
 80015b0:	0800301c 	.word	0x0800301c
 80015b4:	08002fdc 	.word	0x08002fdc

080015b8 <__swsetup_r>:
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <__swsetup_r+0xcc>)
 80015ba:	b570      	push	{r4, r5, r6, lr}
 80015bc:	681d      	ldr	r5, [r3, #0]
 80015be:	4606      	mov	r6, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	b125      	cbz	r5, 80015ce <__swsetup_r+0x16>
 80015c4:	69ab      	ldr	r3, [r5, #24]
 80015c6:	b913      	cbnz	r3, 80015ce <__swsetup_r+0x16>
 80015c8:	4628      	mov	r0, r5
 80015ca:	f000 f967 	bl	800189c <__sinit>
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <__swsetup_r+0xd0>)
 80015d0:	429c      	cmp	r4, r3
 80015d2:	d10f      	bne.n	80015f4 <__swsetup_r+0x3c>
 80015d4:	686c      	ldr	r4, [r5, #4]
 80015d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	0715      	lsls	r5, r2, #28
 80015de:	d42c      	bmi.n	800163a <__swsetup_r+0x82>
 80015e0:	06d0      	lsls	r0, r2, #27
 80015e2:	d411      	bmi.n	8001608 <__swsetup_r+0x50>
 80015e4:	2209      	movs	r2, #9
 80015e6:	6032      	str	r2, [r6, #0]
 80015e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <__swsetup_r+0xd4>)
 80015f6:	429c      	cmp	r4, r3
 80015f8:	d101      	bne.n	80015fe <__swsetup_r+0x46>
 80015fa:	68ac      	ldr	r4, [r5, #8]
 80015fc:	e7eb      	b.n	80015d6 <__swsetup_r+0x1e>
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <__swsetup_r+0xd8>)
 8001600:	429c      	cmp	r4, r3
 8001602:	bf08      	it	eq
 8001604:	68ec      	ldreq	r4, [r5, #12]
 8001606:	e7e6      	b.n	80015d6 <__swsetup_r+0x1e>
 8001608:	0751      	lsls	r1, r2, #29
 800160a:	d512      	bpl.n	8001632 <__swsetup_r+0x7a>
 800160c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160e:	b141      	cbz	r1, 8001622 <__swsetup_r+0x6a>
 8001610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001614:	4299      	cmp	r1, r3
 8001616:	d002      	beq.n	800161e <__swsetup_r+0x66>
 8001618:	4630      	mov	r0, r6
 800161a:	f000 fa51 	bl	8001ac0 <_free_r>
 800161e:	2300      	movs	r3, #0
 8001620:	6363      	str	r3, [r4, #52]	; 0x34
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	2300      	movs	r3, #0
 800162c:	6063      	str	r3, [r4, #4]
 800162e:	6923      	ldr	r3, [r4, #16]
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	81a3      	strh	r3, [r4, #12]
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	b94b      	cbnz	r3, 8001652 <__swsetup_r+0x9a>
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001648:	d003      	beq.n	8001652 <__swsetup_r+0x9a>
 800164a:	4621      	mov	r1, r4
 800164c:	4630      	mov	r0, r6
 800164e:	f000 f9ef 	bl	8001a30 <__smakebuf_r>
 8001652:	89a2      	ldrh	r2, [r4, #12]
 8001654:	f012 0301 	ands.w	r3, r2, #1
 8001658:	d00c      	beq.n	8001674 <__swsetup_r+0xbc>
 800165a:	2300      	movs	r3, #0
 800165c:	60a3      	str	r3, [r4, #8]
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	425b      	negs	r3, r3
 8001662:	61a3      	str	r3, [r4, #24]
 8001664:	6923      	ldr	r3, [r4, #16]
 8001666:	b953      	cbnz	r3, 800167e <__swsetup_r+0xc6>
 8001668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001670:	d1ba      	bne.n	80015e8 <__swsetup_r+0x30>
 8001672:	bd70      	pop	{r4, r5, r6, pc}
 8001674:	0792      	lsls	r2, r2, #30
 8001676:	bf58      	it	pl
 8001678:	6963      	ldrpl	r3, [r4, #20]
 800167a:	60a3      	str	r3, [r4, #8]
 800167c:	e7f2      	b.n	8001664 <__swsetup_r+0xac>
 800167e:	2000      	movs	r0, #0
 8001680:	e7f7      	b.n	8001672 <__swsetup_r+0xba>
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c
 8001688:	08002ffc 	.word	0x08002ffc
 800168c:	0800301c 	.word	0x0800301c
 8001690:	08002fdc 	.word	0x08002fdc

08001694 <__sflush_r>:
 8001694:	898a      	ldrh	r2, [r1, #12]
 8001696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169a:	4605      	mov	r5, r0
 800169c:	0710      	lsls	r0, r2, #28
 800169e:	460c      	mov	r4, r1
 80016a0:	d45a      	bmi.n	8001758 <__sflush_r+0xc4>
 80016a2:	684b      	ldr	r3, [r1, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dc05      	bgt.n	80016b4 <__sflush_r+0x20>
 80016a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dc02      	bgt.n	80016b4 <__sflush_r+0x20>
 80016ae:	2000      	movs	r0, #0
 80016b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d0f9      	beq.n	80016ae <__sflush_r+0x1a>
 80016ba:	2300      	movs	r3, #0
 80016bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016c0:	682f      	ldr	r7, [r5, #0]
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	d033      	beq.n	800172e <__sflush_r+0x9a>
 80016c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	075a      	lsls	r2, r3, #29
 80016cc:	d505      	bpl.n	80016da <__sflush_r+0x46>
 80016ce:	6863      	ldr	r3, [r4, #4]
 80016d0:	1ac0      	subs	r0, r0, r3
 80016d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016d4:	b10b      	cbz	r3, 80016da <__sflush_r+0x46>
 80016d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d8:	1ac0      	subs	r0, r0, r3
 80016da:	2300      	movs	r3, #0
 80016dc:	4602      	mov	r2, r0
 80016de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016e0:	6a21      	ldr	r1, [r4, #32]
 80016e2:	4628      	mov	r0, r5
 80016e4:	47b0      	blx	r6
 80016e6:	1c43      	adds	r3, r0, #1
 80016e8:	89a3      	ldrh	r3, [r4, #12]
 80016ea:	d106      	bne.n	80016fa <__sflush_r+0x66>
 80016ec:	6829      	ldr	r1, [r5, #0]
 80016ee:	291d      	cmp	r1, #29
 80016f0:	d84b      	bhi.n	800178a <__sflush_r+0xf6>
 80016f2:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <__sflush_r+0x10c>)
 80016f4:	40ca      	lsrs	r2, r1
 80016f6:	07d6      	lsls	r6, r2, #31
 80016f8:	d547      	bpl.n	800178a <__sflush_r+0xf6>
 80016fa:	2200      	movs	r2, #0
 80016fc:	6062      	str	r2, [r4, #4]
 80016fe:	6922      	ldr	r2, [r4, #16]
 8001700:	04d9      	lsls	r1, r3, #19
 8001702:	6022      	str	r2, [r4, #0]
 8001704:	d504      	bpl.n	8001710 <__sflush_r+0x7c>
 8001706:	1c42      	adds	r2, r0, #1
 8001708:	d101      	bne.n	800170e <__sflush_r+0x7a>
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	b903      	cbnz	r3, 8001710 <__sflush_r+0x7c>
 800170e:	6560      	str	r0, [r4, #84]	; 0x54
 8001710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001712:	602f      	str	r7, [r5, #0]
 8001714:	2900      	cmp	r1, #0
 8001716:	d0ca      	beq.n	80016ae <__sflush_r+0x1a>
 8001718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800171c:	4299      	cmp	r1, r3
 800171e:	d002      	beq.n	8001726 <__sflush_r+0x92>
 8001720:	4628      	mov	r0, r5
 8001722:	f000 f9cd 	bl	8001ac0 <_free_r>
 8001726:	2000      	movs	r0, #0
 8001728:	6360      	str	r0, [r4, #52]	; 0x34
 800172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800172e:	6a21      	ldr	r1, [r4, #32]
 8001730:	2301      	movs	r3, #1
 8001732:	4628      	mov	r0, r5
 8001734:	47b0      	blx	r6
 8001736:	1c41      	adds	r1, r0, #1
 8001738:	d1c6      	bne.n	80016c8 <__sflush_r+0x34>
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0c3      	beq.n	80016c8 <__sflush_r+0x34>
 8001740:	2b1d      	cmp	r3, #29
 8001742:	d001      	beq.n	8001748 <__sflush_r+0xb4>
 8001744:	2b16      	cmp	r3, #22
 8001746:	d101      	bne.n	800174c <__sflush_r+0xb8>
 8001748:	602f      	str	r7, [r5, #0]
 800174a:	e7b0      	b.n	80016ae <__sflush_r+0x1a>
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001752:	81a3      	strh	r3, [r4, #12]
 8001754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001758:	690f      	ldr	r7, [r1, #16]
 800175a:	2f00      	cmp	r7, #0
 800175c:	d0a7      	beq.n	80016ae <__sflush_r+0x1a>
 800175e:	0793      	lsls	r3, r2, #30
 8001760:	bf18      	it	ne
 8001762:	2300      	movne	r3, #0
 8001764:	680e      	ldr	r6, [r1, #0]
 8001766:	bf08      	it	eq
 8001768:	694b      	ldreq	r3, [r1, #20]
 800176a:	eba6 0807 	sub.w	r8, r6, r7
 800176e:	600f      	str	r7, [r1, #0]
 8001770:	608b      	str	r3, [r1, #8]
 8001772:	f1b8 0f00 	cmp.w	r8, #0
 8001776:	dd9a      	ble.n	80016ae <__sflush_r+0x1a>
 8001778:	4643      	mov	r3, r8
 800177a:	463a      	mov	r2, r7
 800177c:	6a21      	ldr	r1, [r4, #32]
 800177e:	4628      	mov	r0, r5
 8001780:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001782:	47b0      	blx	r6
 8001784:	2800      	cmp	r0, #0
 8001786:	dc07      	bgt.n	8001798 <__sflush_r+0x104>
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178e:	81a3      	strh	r3, [r4, #12]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001798:	4407      	add	r7, r0
 800179a:	eba8 0800 	sub.w	r8, r8, r0
 800179e:	e7e8      	b.n	8001772 <__sflush_r+0xde>
 80017a0:	20400001 	.word	0x20400001

080017a4 <_fflush_r>:
 80017a4:	b538      	push	{r3, r4, r5, lr}
 80017a6:	690b      	ldr	r3, [r1, #16]
 80017a8:	4605      	mov	r5, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	b1db      	cbz	r3, 80017e6 <_fflush_r+0x42>
 80017ae:	b118      	cbz	r0, 80017b8 <_fflush_r+0x14>
 80017b0:	6983      	ldr	r3, [r0, #24]
 80017b2:	b90b      	cbnz	r3, 80017b8 <_fflush_r+0x14>
 80017b4:	f000 f872 	bl	800189c <__sinit>
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <_fflush_r+0x48>)
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d109      	bne.n	80017d2 <_fflush_r+0x2e>
 80017be:	686c      	ldr	r4, [r5, #4]
 80017c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017c4:	b17b      	cbz	r3, 80017e6 <_fflush_r+0x42>
 80017c6:	4621      	mov	r1, r4
 80017c8:	4628      	mov	r0, r5
 80017ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017ce:	f7ff bf61 	b.w	8001694 <__sflush_r>
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_fflush_r+0x4c>)
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d101      	bne.n	80017dc <_fflush_r+0x38>
 80017d8:	68ac      	ldr	r4, [r5, #8]
 80017da:	e7f1      	b.n	80017c0 <_fflush_r+0x1c>
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <_fflush_r+0x50>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	bf08      	it	eq
 80017e2:	68ec      	ldreq	r4, [r5, #12]
 80017e4:	e7ec      	b.n	80017c0 <_fflush_r+0x1c>
 80017e6:	2000      	movs	r0, #0
 80017e8:	bd38      	pop	{r3, r4, r5, pc}
 80017ea:	bf00      	nop
 80017ec:	08002ffc 	.word	0x08002ffc
 80017f0:	0800301c 	.word	0x0800301c
 80017f4:	08002fdc 	.word	0x08002fdc

080017f8 <fflush>:
 80017f8:	4601      	mov	r1, r0
 80017fa:	b920      	cbnz	r0, 8001806 <fflush+0xe>
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <fflush+0x18>)
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <fflush+0x1c>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f000 b8d3 	b.w	80019ac <_fwalk_reent>
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <fflush+0x20>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	f7ff bfcb 	b.w	80017a4 <_fflush_r>
 800180e:	bf00      	nop
 8001810:	08002fd8 	.word	0x08002fd8
 8001814:	080017a5 	.word	0x080017a5
 8001818:	2000000c 	.word	0x2000000c

0800181c <_cleanup_r>:
 800181c:	4901      	ldr	r1, [pc, #4]	; (8001824 <_cleanup_r+0x8>)
 800181e:	f000 b8c5 	b.w	80019ac <_fwalk_reent>
 8001822:	bf00      	nop
 8001824:	080017a5 	.word	0x080017a5

08001828 <std.isra.0>:
 8001828:	2300      	movs	r3, #0
 800182a:	b510      	push	{r4, lr}
 800182c:	4604      	mov	r4, r0
 800182e:	6003      	str	r3, [r0, #0]
 8001830:	6043      	str	r3, [r0, #4]
 8001832:	6083      	str	r3, [r0, #8]
 8001834:	8181      	strh	r1, [r0, #12]
 8001836:	6643      	str	r3, [r0, #100]	; 0x64
 8001838:	81c2      	strh	r2, [r0, #14]
 800183a:	6103      	str	r3, [r0, #16]
 800183c:	6143      	str	r3, [r0, #20]
 800183e:	6183      	str	r3, [r0, #24]
 8001840:	4619      	mov	r1, r3
 8001842:	2208      	movs	r2, #8
 8001844:	305c      	adds	r0, #92	; 0x5c
 8001846:	f7ff fd1b 	bl	8001280 <memset>
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <std.isra.0+0x38>)
 800184c:	6224      	str	r4, [r4, #32]
 800184e:	6263      	str	r3, [r4, #36]	; 0x24
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <std.isra.0+0x3c>)
 8001852:	62a3      	str	r3, [r4, #40]	; 0x28
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <std.isra.0+0x40>)
 8001856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <std.isra.0+0x44>)
 800185a:	6323      	str	r3, [r4, #48]	; 0x30
 800185c:	bd10      	pop	{r4, pc}
 800185e:	bf00      	nop
 8001860:	08002917 	.word	0x08002917
 8001864:	08002939 	.word	0x08002939
 8001868:	08002971 	.word	0x08002971
 800186c:	08002995 	.word	0x08002995

08001870 <__sfmoreglue>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	2568      	movs	r5, #104	; 0x68
 8001874:	1e4a      	subs	r2, r1, #1
 8001876:	4355      	muls	r5, r2
 8001878:	460e      	mov	r6, r1
 800187a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800187e:	f000 f96b 	bl	8001b58 <_malloc_r>
 8001882:	4604      	mov	r4, r0
 8001884:	b140      	cbz	r0, 8001898 <__sfmoreglue+0x28>
 8001886:	2100      	movs	r1, #0
 8001888:	e880 0042 	stmia.w	r0, {r1, r6}
 800188c:	300c      	adds	r0, #12
 800188e:	60a0      	str	r0, [r4, #8]
 8001890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001894:	f7ff fcf4 	bl	8001280 <memset>
 8001898:	4620      	mov	r0, r4
 800189a:	bd70      	pop	{r4, r5, r6, pc}

0800189c <__sinit>:
 800189c:	6983      	ldr	r3, [r0, #24]
 800189e:	b510      	push	{r4, lr}
 80018a0:	4604      	mov	r4, r0
 80018a2:	bb33      	cbnz	r3, 80018f2 <__sinit+0x56>
 80018a4:	6483      	str	r3, [r0, #72]	; 0x48
 80018a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80018a8:	6503      	str	r3, [r0, #80]	; 0x50
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <__sinit+0x58>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <__sinit+0x5c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6282      	str	r2, [r0, #40]	; 0x28
 80018b2:	4298      	cmp	r0, r3
 80018b4:	bf04      	itt	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	6183      	streq	r3, [r0, #24]
 80018ba:	f000 f81f 	bl	80018fc <__sfp>
 80018be:	6060      	str	r0, [r4, #4]
 80018c0:	4620      	mov	r0, r4
 80018c2:	f000 f81b 	bl	80018fc <__sfp>
 80018c6:	60a0      	str	r0, [r4, #8]
 80018c8:	4620      	mov	r0, r4
 80018ca:	f000 f817 	bl	80018fc <__sfp>
 80018ce:	2200      	movs	r2, #0
 80018d0:	60e0      	str	r0, [r4, #12]
 80018d2:	2104      	movs	r1, #4
 80018d4:	6860      	ldr	r0, [r4, #4]
 80018d6:	f7ff ffa7 	bl	8001828 <std.isra.0>
 80018da:	2201      	movs	r2, #1
 80018dc:	2109      	movs	r1, #9
 80018de:	68a0      	ldr	r0, [r4, #8]
 80018e0:	f7ff ffa2 	bl	8001828 <std.isra.0>
 80018e4:	2202      	movs	r2, #2
 80018e6:	2112      	movs	r1, #18
 80018e8:	68e0      	ldr	r0, [r4, #12]
 80018ea:	f7ff ff9d 	bl	8001828 <std.isra.0>
 80018ee:	2301      	movs	r3, #1
 80018f0:	61a3      	str	r3, [r4, #24]
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	08002fd8 	.word	0x08002fd8
 80018f8:	0800181d 	.word	0x0800181d

080018fc <__sfp>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <__sfp+0x74>)
 8001900:	4607      	mov	r7, r0
 8001902:	681e      	ldr	r6, [r3, #0]
 8001904:	69b3      	ldr	r3, [r6, #24]
 8001906:	b913      	cbnz	r3, 800190e <__sfp+0x12>
 8001908:	4630      	mov	r0, r6
 800190a:	f7ff ffc7 	bl	800189c <__sinit>
 800190e:	3648      	adds	r6, #72	; 0x48
 8001910:	68b4      	ldr	r4, [r6, #8]
 8001912:	6873      	ldr	r3, [r6, #4]
 8001914:	3b01      	subs	r3, #1
 8001916:	d503      	bpl.n	8001920 <__sfp+0x24>
 8001918:	6833      	ldr	r3, [r6, #0]
 800191a:	b133      	cbz	r3, 800192a <__sfp+0x2e>
 800191c:	6836      	ldr	r6, [r6, #0]
 800191e:	e7f7      	b.n	8001910 <__sfp+0x14>
 8001920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001924:	b16d      	cbz	r5, 8001942 <__sfp+0x46>
 8001926:	3468      	adds	r4, #104	; 0x68
 8001928:	e7f4      	b.n	8001914 <__sfp+0x18>
 800192a:	2104      	movs	r1, #4
 800192c:	4638      	mov	r0, r7
 800192e:	f7ff ff9f 	bl	8001870 <__sfmoreglue>
 8001932:	6030      	str	r0, [r6, #0]
 8001934:	2800      	cmp	r0, #0
 8001936:	d1f1      	bne.n	800191c <__sfp+0x20>
 8001938:	230c      	movs	r3, #12
 800193a:	4604      	mov	r4, r0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4620      	mov	r0, r4
 8001940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	81e3      	strh	r3, [r4, #14]
 8001948:	2301      	movs	r3, #1
 800194a:	6665      	str	r5, [r4, #100]	; 0x64
 800194c:	81a3      	strh	r3, [r4, #12]
 800194e:	6025      	str	r5, [r4, #0]
 8001950:	60a5      	str	r5, [r4, #8]
 8001952:	6065      	str	r5, [r4, #4]
 8001954:	6125      	str	r5, [r4, #16]
 8001956:	6165      	str	r5, [r4, #20]
 8001958:	61a5      	str	r5, [r4, #24]
 800195a:	2208      	movs	r2, #8
 800195c:	4629      	mov	r1, r5
 800195e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001962:	f7ff fc8d 	bl	8001280 <memset>
 8001966:	6365      	str	r5, [r4, #52]	; 0x34
 8001968:	63a5      	str	r5, [r4, #56]	; 0x38
 800196a:	64a5      	str	r5, [r4, #72]	; 0x48
 800196c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800196e:	e7e6      	b.n	800193e <__sfp+0x42>
 8001970:	08002fd8 	.word	0x08002fd8

08001974 <_fwalk>:
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001978:	4688      	mov	r8, r1
 800197a:	2600      	movs	r6, #0
 800197c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001980:	b914      	cbnz	r4, 8001988 <_fwalk+0x14>
 8001982:	4630      	mov	r0, r6
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001988:	68a5      	ldr	r5, [r4, #8]
 800198a:	6867      	ldr	r7, [r4, #4]
 800198c:	3f01      	subs	r7, #1
 800198e:	d501      	bpl.n	8001994 <_fwalk+0x20>
 8001990:	6824      	ldr	r4, [r4, #0]
 8001992:	e7f5      	b.n	8001980 <_fwalk+0xc>
 8001994:	89ab      	ldrh	r3, [r5, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d906      	bls.n	80019a8 <_fwalk+0x34>
 800199a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800199e:	3301      	adds	r3, #1
 80019a0:	d002      	beq.n	80019a8 <_fwalk+0x34>
 80019a2:	4628      	mov	r0, r5
 80019a4:	47c0      	blx	r8
 80019a6:	4306      	orrs	r6, r0
 80019a8:	3568      	adds	r5, #104	; 0x68
 80019aa:	e7ef      	b.n	800198c <_fwalk+0x18>

080019ac <_fwalk_reent>:
 80019ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b0:	4680      	mov	r8, r0
 80019b2:	4689      	mov	r9, r1
 80019b4:	2600      	movs	r6, #0
 80019b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019ba:	b914      	cbnz	r4, 80019c2 <_fwalk_reent+0x16>
 80019bc:	4630      	mov	r0, r6
 80019be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019c2:	68a5      	ldr	r5, [r4, #8]
 80019c4:	6867      	ldr	r7, [r4, #4]
 80019c6:	3f01      	subs	r7, #1
 80019c8:	d501      	bpl.n	80019ce <_fwalk_reent+0x22>
 80019ca:	6824      	ldr	r4, [r4, #0]
 80019cc:	e7f5      	b.n	80019ba <_fwalk_reent+0xe>
 80019ce:	89ab      	ldrh	r3, [r5, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d907      	bls.n	80019e4 <_fwalk_reent+0x38>
 80019d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019d8:	3301      	adds	r3, #1
 80019da:	d003      	beq.n	80019e4 <_fwalk_reent+0x38>
 80019dc:	4629      	mov	r1, r5
 80019de:	4640      	mov	r0, r8
 80019e0:	47c8      	blx	r9
 80019e2:	4306      	orrs	r6, r0
 80019e4:	3568      	adds	r5, #104	; 0x68
 80019e6:	e7ee      	b.n	80019c6 <_fwalk_reent+0x1a>

080019e8 <__swhatbuf_r>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	460e      	mov	r6, r1
 80019ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f0:	b090      	sub	sp, #64	; 0x40
 80019f2:	2900      	cmp	r1, #0
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	da07      	bge.n	8001a0a <__swhatbuf_r+0x22>
 80019fa:	2300      	movs	r3, #0
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	89b3      	ldrh	r3, [r6, #12]
 8001a00:	061a      	lsls	r2, r3, #24
 8001a02:	d410      	bmi.n	8001a26 <__swhatbuf_r+0x3e>
 8001a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a08:	e00e      	b.n	8001a28 <__swhatbuf_r+0x40>
 8001a0a:	aa01      	add	r2, sp, #4
 8001a0c:	f001 f9b6 	bl	8002d7c <_fstat_r>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	dbf2      	blt.n	80019fa <__swhatbuf_r+0x12>
 8001a14:	9a02      	ldr	r2, [sp, #8]
 8001a16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a1e:	425a      	negs	r2, r3
 8001a20:	415a      	adcs	r2, r3
 8001a22:	602a      	str	r2, [r5, #0]
 8001a24:	e7ee      	b.n	8001a04 <__swhatbuf_r+0x1c>
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	2000      	movs	r0, #0
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	b010      	add	sp, #64	; 0x40
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}

08001a30 <__smakebuf_r>:
 8001a30:	898b      	ldrh	r3, [r1, #12]
 8001a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a34:	079d      	lsls	r5, r3, #30
 8001a36:	4606      	mov	r6, r0
 8001a38:	460c      	mov	r4, r1
 8001a3a:	d507      	bpl.n	8001a4c <__smakebuf_r+0x1c>
 8001a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	6123      	str	r3, [r4, #16]
 8001a44:	2301      	movs	r3, #1
 8001a46:	6163      	str	r3, [r4, #20]
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
 8001a4c:	ab01      	add	r3, sp, #4
 8001a4e:	466a      	mov	r2, sp
 8001a50:	f7ff ffca 	bl	80019e8 <__swhatbuf_r>
 8001a54:	9900      	ldr	r1, [sp, #0]
 8001a56:	4605      	mov	r5, r0
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f000 f87d 	bl	8001b58 <_malloc_r>
 8001a5e:	b948      	cbnz	r0, 8001a74 <__smakebuf_r+0x44>
 8001a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a64:	059a      	lsls	r2, r3, #22
 8001a66:	d4ef      	bmi.n	8001a48 <__smakebuf_r+0x18>
 8001a68:	f023 0303 	bic.w	r3, r3, #3
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	e7e3      	b.n	8001a3c <__smakebuf_r+0xc>
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <__smakebuf_r+0x7c>)
 8001a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	6020      	str	r0, [r4, #0]
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	6120      	str	r0, [r4, #16]
 8001a86:	6163      	str	r3, [r4, #20]
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	b15b      	cbz	r3, 8001aa4 <__smakebuf_r+0x74>
 8001a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a90:	4630      	mov	r0, r6
 8001a92:	f001 f985 	bl	8002da0 <_isatty_r>
 8001a96:	b128      	cbz	r0, 8001aa4 <__smakebuf_r+0x74>
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	431d      	orrs	r5, r3
 8001aa8:	81a5      	strh	r5, [r4, #12]
 8001aaa:	e7cd      	b.n	8001a48 <__smakebuf_r+0x18>
 8001aac:	0800181d 	.word	0x0800181d

08001ab0 <malloc>:
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <malloc+0xc>)
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	f000 b84f 	b.w	8001b58 <_malloc_r>
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <_free_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	d043      	beq.n	8001b50 <_free_r+0x90>
 8001ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001acc:	1f0c      	subs	r4, r1, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bfb8      	it	lt
 8001ad2:	18e4      	addlt	r4, r4, r3
 8001ad4:	f001 f9c3 	bl	8002e5e <__malloc_lock>
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <_free_r+0x94>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	4610      	mov	r0, r2
 8001ade:	b933      	cbnz	r3, 8001aee <_free_r+0x2e>
 8001ae0:	6063      	str	r3, [r4, #4]
 8001ae2:	6014      	str	r4, [r2, #0]
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aea:	f001 b9b9 	b.w	8002e60 <__malloc_unlock>
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	d90b      	bls.n	8001b0a <_free_r+0x4a>
 8001af2:	6821      	ldr	r1, [r4, #0]
 8001af4:	1862      	adds	r2, r4, r1
 8001af6:	4293      	cmp	r3, r2
 8001af8:	bf01      	itttt	eq
 8001afa:	681a      	ldreq	r2, [r3, #0]
 8001afc:	685b      	ldreq	r3, [r3, #4]
 8001afe:	1852      	addeq	r2, r2, r1
 8001b00:	6022      	streq	r2, [r4, #0]
 8001b02:	6063      	str	r3, [r4, #4]
 8001b04:	6004      	str	r4, [r0, #0]
 8001b06:	e7ed      	b.n	8001ae4 <_free_r+0x24>
 8001b08:	4613      	mov	r3, r2
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	b10a      	cbz	r2, 8001b12 <_free_r+0x52>
 8001b0e:	42a2      	cmp	r2, r4
 8001b10:	d9fa      	bls.n	8001b08 <_free_r+0x48>
 8001b12:	6819      	ldr	r1, [r3, #0]
 8001b14:	1858      	adds	r0, r3, r1
 8001b16:	42a0      	cmp	r0, r4
 8001b18:	d10b      	bne.n	8001b32 <_free_r+0x72>
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	4401      	add	r1, r0
 8001b1e:	1858      	adds	r0, r3, r1
 8001b20:	4282      	cmp	r2, r0
 8001b22:	6019      	str	r1, [r3, #0]
 8001b24:	d1de      	bne.n	8001ae4 <_free_r+0x24>
 8001b26:	6810      	ldr	r0, [r2, #0]
 8001b28:	6852      	ldr	r2, [r2, #4]
 8001b2a:	4401      	add	r1, r0
 8001b2c:	6019      	str	r1, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	e7d8      	b.n	8001ae4 <_free_r+0x24>
 8001b32:	d902      	bls.n	8001b3a <_free_r+0x7a>
 8001b34:	230c      	movs	r3, #12
 8001b36:	602b      	str	r3, [r5, #0]
 8001b38:	e7d4      	b.n	8001ae4 <_free_r+0x24>
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	1821      	adds	r1, r4, r0
 8001b3e:	428a      	cmp	r2, r1
 8001b40:	bf01      	itttt	eq
 8001b42:	6811      	ldreq	r1, [r2, #0]
 8001b44:	6852      	ldreq	r2, [r2, #4]
 8001b46:	1809      	addeq	r1, r1, r0
 8001b48:	6021      	streq	r1, [r4, #0]
 8001b4a:	6062      	str	r2, [r4, #4]
 8001b4c:	605c      	str	r4, [r3, #4]
 8001b4e:	e7c9      	b.n	8001ae4 <_free_r+0x24>
 8001b50:	bd38      	pop	{r3, r4, r5, pc}
 8001b52:	bf00      	nop
 8001b54:	200001f8 	.word	0x200001f8

08001b58 <_malloc_r>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	1ccd      	adds	r5, r1, #3
 8001b5c:	f025 0503 	bic.w	r5, r5, #3
 8001b60:	3508      	adds	r5, #8
 8001b62:	2d0c      	cmp	r5, #12
 8001b64:	bf38      	it	cc
 8001b66:	250c      	movcc	r5, #12
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	4606      	mov	r6, r0
 8001b6c:	db01      	blt.n	8001b72 <_malloc_r+0x1a>
 8001b6e:	42a9      	cmp	r1, r5
 8001b70:	d903      	bls.n	8001b7a <_malloc_r+0x22>
 8001b72:	230c      	movs	r3, #12
 8001b74:	6033      	str	r3, [r6, #0]
 8001b76:	2000      	movs	r0, #0
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	f001 f970 	bl	8002e5e <__malloc_lock>
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <_malloc_r+0xb4>)
 8001b80:	6814      	ldr	r4, [r2, #0]
 8001b82:	4621      	mov	r1, r4
 8001b84:	b991      	cbnz	r1, 8001bac <_malloc_r+0x54>
 8001b86:	4c22      	ldr	r4, [pc, #136]	; (8001c10 <_malloc_r+0xb8>)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	b91b      	cbnz	r3, 8001b94 <_malloc_r+0x3c>
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f000 fe83 	bl	8002898 <_sbrk_r>
 8001b92:	6020      	str	r0, [r4, #0]
 8001b94:	4629      	mov	r1, r5
 8001b96:	4630      	mov	r0, r6
 8001b98:	f000 fe7e 	bl	8002898 <_sbrk_r>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d126      	bne.n	8001bee <_malloc_r+0x96>
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	6033      	str	r3, [r6, #0]
 8001ba6:	f001 f95b 	bl	8002e60 <__malloc_unlock>
 8001baa:	e7e4      	b.n	8001b76 <_malloc_r+0x1e>
 8001bac:	680b      	ldr	r3, [r1, #0]
 8001bae:	1b5b      	subs	r3, r3, r5
 8001bb0:	d41a      	bmi.n	8001be8 <_malloc_r+0x90>
 8001bb2:	2b0b      	cmp	r3, #11
 8001bb4:	d90f      	bls.n	8001bd6 <_malloc_r+0x7e>
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	18cc      	adds	r4, r1, r3
 8001bba:	50cd      	str	r5, [r1, r3]
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f001 f94f 	bl	8002e60 <__malloc_unlock>
 8001bc2:	f104 000b 	add.w	r0, r4, #11
 8001bc6:	1d23      	adds	r3, r4, #4
 8001bc8:	f020 0007 	bic.w	r0, r0, #7
 8001bcc:	1ac3      	subs	r3, r0, r3
 8001bce:	d01b      	beq.n	8001c08 <_malloc_r+0xb0>
 8001bd0:	425a      	negs	r2, r3
 8001bd2:	50e2      	str	r2, [r4, r3]
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	428c      	cmp	r4, r1
 8001bd8:	bf0b      	itete	eq
 8001bda:	6863      	ldreq	r3, [r4, #4]
 8001bdc:	684b      	ldrne	r3, [r1, #4]
 8001bde:	6013      	streq	r3, [r2, #0]
 8001be0:	6063      	strne	r3, [r4, #4]
 8001be2:	bf18      	it	ne
 8001be4:	460c      	movne	r4, r1
 8001be6:	e7e9      	b.n	8001bbc <_malloc_r+0x64>
 8001be8:	460c      	mov	r4, r1
 8001bea:	6849      	ldr	r1, [r1, #4]
 8001bec:	e7ca      	b.n	8001b84 <_malloc_r+0x2c>
 8001bee:	1cc4      	adds	r4, r0, #3
 8001bf0:	f024 0403 	bic.w	r4, r4, #3
 8001bf4:	42a0      	cmp	r0, r4
 8001bf6:	d005      	beq.n	8001c04 <_malloc_r+0xac>
 8001bf8:	1a21      	subs	r1, r4, r0
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f000 fe4c 	bl	8002898 <_sbrk_r>
 8001c00:	3001      	adds	r0, #1
 8001c02:	d0cd      	beq.n	8001ba0 <_malloc_r+0x48>
 8001c04:	6025      	str	r5, [r4, #0]
 8001c06:	e7d9      	b.n	8001bbc <_malloc_r+0x64>
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001f8 	.word	0x200001f8
 8001c10:	200001fc 	.word	0x200001fc

08001c14 <__sfputc_r>:
 8001c14:	6893      	ldr	r3, [r2, #8]
 8001c16:	b410      	push	{r4}
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	6093      	str	r3, [r2, #8]
 8001c1e:	da08      	bge.n	8001c32 <__sfputc_r+0x1e>
 8001c20:	6994      	ldr	r4, [r2, #24]
 8001c22:	42a3      	cmp	r3, r4
 8001c24:	db02      	blt.n	8001c2c <__sfputc_r+0x18>
 8001c26:	b2cb      	uxtb	r3, r1
 8001c28:	2b0a      	cmp	r3, #10
 8001c2a:	d102      	bne.n	8001c32 <__sfputc_r+0x1e>
 8001c2c:	bc10      	pop	{r4}
 8001c2e:	f7ff bc71 	b.w	8001514 <__swbuf_r>
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	1c58      	adds	r0, r3, #1
 8001c36:	6010      	str	r0, [r2, #0]
 8001c38:	7019      	strb	r1, [r3, #0]
 8001c3a:	b2c8      	uxtb	r0, r1
 8001c3c:	bc10      	pop	{r4}
 8001c3e:	4770      	bx	lr

08001c40 <__sfputs_r>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	4606      	mov	r6, r0
 8001c44:	460f      	mov	r7, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	18d5      	adds	r5, r2, r3
 8001c4a:	42ac      	cmp	r4, r5
 8001c4c:	d101      	bne.n	8001c52 <__sfputs_r+0x12>
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e007      	b.n	8001c62 <__sfputs_r+0x22>
 8001c52:	463a      	mov	r2, r7
 8001c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f7ff ffdb 	bl	8001c14 <__sfputc_r>
 8001c5e:	1c43      	adds	r3, r0, #1
 8001c60:	d1f3      	bne.n	8001c4a <__sfputs_r+0xa>
 8001c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c64 <_vfiprintf_r>:
 8001c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c68:	b09d      	sub	sp, #116	; 0x74
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4617      	mov	r7, r2
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	4606      	mov	r6, r0
 8001c72:	b118      	cbz	r0, 8001c7c <_vfiprintf_r+0x18>
 8001c74:	6983      	ldr	r3, [r0, #24]
 8001c76:	b90b      	cbnz	r3, 8001c7c <_vfiprintf_r+0x18>
 8001c78:	f7ff fe10 	bl	800189c <__sinit>
 8001c7c:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <_vfiprintf_r+0x20c>)
 8001c7e:	429c      	cmp	r4, r3
 8001c80:	d157      	bne.n	8001d32 <_vfiprintf_r+0xce>
 8001c82:	6874      	ldr	r4, [r6, #4]
 8001c84:	89a3      	ldrh	r3, [r4, #12]
 8001c86:	0718      	lsls	r0, r3, #28
 8001c88:	d55d      	bpl.n	8001d46 <_vfiprintf_r+0xe2>
 8001c8a:	6923      	ldr	r3, [r4, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05a      	beq.n	8001d46 <_vfiprintf_r+0xe2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	9309      	str	r3, [sp, #36]	; 0x24
 8001c94:	2320      	movs	r3, #32
 8001c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c9a:	2330      	movs	r3, #48	; 0x30
 8001c9c:	f04f 0b01 	mov.w	fp, #1
 8001ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ca4:	46b8      	mov	r8, r7
 8001ca6:	4645      	mov	r5, r8
 8001ca8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d155      	bne.n	8001d5c <_vfiprintf_r+0xf8>
 8001cb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8001cb4:	d00b      	beq.n	8001cce <_vfiprintf_r+0x6a>
 8001cb6:	4653      	mov	r3, sl
 8001cb8:	463a      	mov	r2, r7
 8001cba:	4621      	mov	r1, r4
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7ff ffbf 	bl	8001c40 <__sfputs_r>
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	f000 80c4 	beq.w	8001e50 <_vfiprintf_r+0x1ec>
 8001cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cca:	4453      	add	r3, sl
 8001ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cce:	f898 3000 	ldrb.w	r3, [r8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80bc 	beq.w	8001e50 <_vfiprintf_r+0x1ec>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	9304      	str	r3, [sp, #16]
 8001ce0:	9307      	str	r3, [sp, #28]
 8001ce2:	9205      	str	r2, [sp, #20]
 8001ce4:	9306      	str	r3, [sp, #24]
 8001ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cea:	931a      	str	r3, [sp, #104]	; 0x68
 8001cec:	2205      	movs	r2, #5
 8001cee:	7829      	ldrb	r1, [r5, #0]
 8001cf0:	4860      	ldr	r0, [pc, #384]	; (8001e74 <_vfiprintf_r+0x210>)
 8001cf2:	f001 f89b 	bl	8002e2c <memchr>
 8001cf6:	f105 0801 	add.w	r8, r5, #1
 8001cfa:	9b04      	ldr	r3, [sp, #16]
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d131      	bne.n	8001d64 <_vfiprintf_r+0x100>
 8001d00:	06d9      	lsls	r1, r3, #27
 8001d02:	bf44      	itt	mi
 8001d04:	2220      	movmi	r2, #32
 8001d06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d0a:	071a      	lsls	r2, r3, #28
 8001d0c:	bf44      	itt	mi
 8001d0e:	222b      	movmi	r2, #43	; 0x2b
 8001d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d14:	782a      	ldrb	r2, [r5, #0]
 8001d16:	2a2a      	cmp	r2, #42	; 0x2a
 8001d18:	d02c      	beq.n	8001d74 <_vfiprintf_r+0x110>
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	9a07      	ldr	r2, [sp, #28]
 8001d20:	46a8      	mov	r8, r5
 8001d22:	f898 3000 	ldrb.w	r3, [r8]
 8001d26:	3501      	adds	r5, #1
 8001d28:	3b30      	subs	r3, #48	; 0x30
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d96d      	bls.n	8001e0a <_vfiprintf_r+0x1a6>
 8001d2e:	b371      	cbz	r1, 8001d8e <_vfiprintf_r+0x12a>
 8001d30:	e026      	b.n	8001d80 <_vfiprintf_r+0x11c>
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <_vfiprintf_r+0x214>)
 8001d34:	429c      	cmp	r4, r3
 8001d36:	d101      	bne.n	8001d3c <_vfiprintf_r+0xd8>
 8001d38:	68b4      	ldr	r4, [r6, #8]
 8001d3a:	e7a3      	b.n	8001c84 <_vfiprintf_r+0x20>
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <_vfiprintf_r+0x218>)
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	bf08      	it	eq
 8001d42:	68f4      	ldreq	r4, [r6, #12]
 8001d44:	e79e      	b.n	8001c84 <_vfiprintf_r+0x20>
 8001d46:	4621      	mov	r1, r4
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f7ff fc35 	bl	80015b8 <__swsetup_r>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d09e      	beq.n	8001c90 <_vfiprintf_r+0x2c>
 8001d52:	f04f 30ff 	mov.w	r0, #4294967295
 8001d56:	b01d      	add	sp, #116	; 0x74
 8001d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d5c:	2b25      	cmp	r3, #37	; 0x25
 8001d5e:	d0a7      	beq.n	8001cb0 <_vfiprintf_r+0x4c>
 8001d60:	46a8      	mov	r8, r5
 8001d62:	e7a0      	b.n	8001ca6 <_vfiprintf_r+0x42>
 8001d64:	4a43      	ldr	r2, [pc, #268]	; (8001e74 <_vfiprintf_r+0x210>)
 8001d66:	4645      	mov	r5, r8
 8001d68:	1a80      	subs	r0, r0, r2
 8001d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8001d6e:	4318      	orrs	r0, r3
 8001d70:	9004      	str	r0, [sp, #16]
 8001d72:	e7bb      	b.n	8001cec <_vfiprintf_r+0x88>
 8001d74:	9a03      	ldr	r2, [sp, #12]
 8001d76:	1d11      	adds	r1, r2, #4
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	9103      	str	r1, [sp, #12]
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	db01      	blt.n	8001d84 <_vfiprintf_r+0x120>
 8001d80:	9207      	str	r2, [sp, #28]
 8001d82:	e004      	b.n	8001d8e <_vfiprintf_r+0x12a>
 8001d84:	4252      	negs	r2, r2
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	9207      	str	r2, [sp, #28]
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	f898 3000 	ldrb.w	r3, [r8]
 8001d92:	2b2e      	cmp	r3, #46	; 0x2e
 8001d94:	d110      	bne.n	8001db8 <_vfiprintf_r+0x154>
 8001d96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001d9a:	f108 0101 	add.w	r1, r8, #1
 8001d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8001da0:	d137      	bne.n	8001e12 <_vfiprintf_r+0x1ae>
 8001da2:	9b03      	ldr	r3, [sp, #12]
 8001da4:	f108 0802 	add.w	r8, r8, #2
 8001da8:	1d1a      	adds	r2, r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	9203      	str	r2, [sp, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bfb8      	it	lt
 8001db2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001db6:	9305      	str	r3, [sp, #20]
 8001db8:	4d31      	ldr	r5, [pc, #196]	; (8001e80 <_vfiprintf_r+0x21c>)
 8001dba:	2203      	movs	r2, #3
 8001dbc:	f898 1000 	ldrb.w	r1, [r8]
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f001 f833 	bl	8002e2c <memchr>
 8001dc6:	b140      	cbz	r0, 8001dda <_vfiprintf_r+0x176>
 8001dc8:	2340      	movs	r3, #64	; 0x40
 8001dca:	1b40      	subs	r0, r0, r5
 8001dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8001dd0:	9b04      	ldr	r3, [sp, #16]
 8001dd2:	f108 0801 	add.w	r8, r8, #1
 8001dd6:	4303      	orrs	r3, r0
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	f898 1000 	ldrb.w	r1, [r8]
 8001dde:	2206      	movs	r2, #6
 8001de0:	4828      	ldr	r0, [pc, #160]	; (8001e84 <_vfiprintf_r+0x220>)
 8001de2:	f108 0701 	add.w	r7, r8, #1
 8001de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dea:	f001 f81f 	bl	8002e2c <memchr>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d034      	beq.n	8001e5c <_vfiprintf_r+0x1f8>
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <_vfiprintf_r+0x224>)
 8001df4:	bb03      	cbnz	r3, 8001e38 <_vfiprintf_r+0x1d4>
 8001df6:	9b03      	ldr	r3, [sp, #12]
 8001df8:	3307      	adds	r3, #7
 8001dfa:	f023 0307 	bic.w	r3, r3, #7
 8001dfe:	3308      	adds	r3, #8
 8001e00:	9303      	str	r3, [sp, #12]
 8001e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e04:	444b      	add	r3, r9
 8001e06:	9309      	str	r3, [sp, #36]	; 0x24
 8001e08:	e74c      	b.n	8001ca4 <_vfiprintf_r+0x40>
 8001e0a:	fb00 3202 	mla	r2, r0, r2, r3
 8001e0e:	2101      	movs	r1, #1
 8001e10:	e786      	b.n	8001d20 <_vfiprintf_r+0xbc>
 8001e12:	2300      	movs	r3, #0
 8001e14:	250a      	movs	r5, #10
 8001e16:	4618      	mov	r0, r3
 8001e18:	9305      	str	r3, [sp, #20]
 8001e1a:	4688      	mov	r8, r1
 8001e1c:	f898 2000 	ldrb.w	r2, [r8]
 8001e20:	3101      	adds	r1, #1
 8001e22:	3a30      	subs	r2, #48	; 0x30
 8001e24:	2a09      	cmp	r2, #9
 8001e26:	d903      	bls.n	8001e30 <_vfiprintf_r+0x1cc>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0c5      	beq.n	8001db8 <_vfiprintf_r+0x154>
 8001e2c:	9005      	str	r0, [sp, #20]
 8001e2e:	e7c3      	b.n	8001db8 <_vfiprintf_r+0x154>
 8001e30:	fb05 2000 	mla	r0, r5, r0, r2
 8001e34:	2301      	movs	r3, #1
 8001e36:	e7f0      	b.n	8001e1a <_vfiprintf_r+0x1b6>
 8001e38:	ab03      	add	r3, sp, #12
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_vfiprintf_r+0x228>)
 8001e40:	a904      	add	r1, sp, #16
 8001e42:	4630      	mov	r0, r6
 8001e44:	f3af 8000 	nop.w
 8001e48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e4c:	4681      	mov	r9, r0
 8001e4e:	d1d8      	bne.n	8001e02 <_vfiprintf_r+0x19e>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	065b      	lsls	r3, r3, #25
 8001e54:	f53f af7d 	bmi.w	8001d52 <_vfiprintf_r+0xee>
 8001e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5a:	e77c      	b.n	8001d56 <_vfiprintf_r+0xf2>
 8001e5c:	ab03      	add	r3, sp, #12
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	4622      	mov	r2, r4
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <_vfiprintf_r+0x228>)
 8001e64:	a904      	add	r1, sp, #16
 8001e66:	4630      	mov	r0, r6
 8001e68:	f000 f88a 	bl	8001f80 <_printf_i>
 8001e6c:	e7ec      	b.n	8001e48 <_vfiprintf_r+0x1e4>
 8001e6e:	bf00      	nop
 8001e70:	08002ffc 	.word	0x08002ffc
 8001e74:	0800303c 	.word	0x0800303c
 8001e78:	0800301c 	.word	0x0800301c
 8001e7c:	08002fdc 	.word	0x08002fdc
 8001e80:	08003042 	.word	0x08003042
 8001e84:	08003046 	.word	0x08003046
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	08001c41 	.word	0x08001c41

08001e90 <_printf_common>:
 8001e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e94:	4691      	mov	r9, r2
 8001e96:	461f      	mov	r7, r3
 8001e98:	688a      	ldr	r2, [r1, #8]
 8001e9a:	690b      	ldr	r3, [r1, #16]
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	bfb8      	it	lt
 8001ea2:	4613      	movlt	r3, r2
 8001ea4:	f8c9 3000 	str.w	r3, [r9]
 8001ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eac:	460c      	mov	r4, r1
 8001eae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001eb2:	b112      	cbz	r2, 8001eba <_printf_common+0x2a>
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c9 3000 	str.w	r3, [r9]
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	0699      	lsls	r1, r3, #26
 8001ebe:	bf42      	ittt	mi
 8001ec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ec4:	3302      	addmi	r3, #2
 8001ec6:	f8c9 3000 	strmi.w	r3, [r9]
 8001eca:	6825      	ldr	r5, [r4, #0]
 8001ecc:	f015 0506 	ands.w	r5, r5, #6
 8001ed0:	d107      	bne.n	8001ee2 <_printf_common+0x52>
 8001ed2:	f104 0a19 	add.w	sl, r4, #25
 8001ed6:	68e3      	ldr	r3, [r4, #12]
 8001ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	429d      	cmp	r5, r3
 8001ee0:	db2a      	blt.n	8001f38 <_printf_common+0xa8>
 8001ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	3300      	adds	r3, #0
 8001eea:	bf18      	it	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	0692      	lsls	r2, r2, #26
 8001ef0:	d42f      	bmi.n	8001f52 <_printf_common+0xc2>
 8001ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef6:	4639      	mov	r1, r7
 8001ef8:	4630      	mov	r0, r6
 8001efa:	47c0      	blx	r8
 8001efc:	3001      	adds	r0, #1
 8001efe:	d022      	beq.n	8001f46 <_printf_common+0xb6>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	68e5      	ldr	r5, [r4, #12]
 8001f04:	f003 0306 	and.w	r3, r3, #6
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	bf18      	it	ne
 8001f0c:	2500      	movne	r5, #0
 8001f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8001f12:	f04f 0900 	mov.w	r9, #0
 8001f16:	bf08      	it	eq
 8001f18:	1aad      	subeq	r5, r5, r2
 8001f1a:	68a3      	ldr	r3, [r4, #8]
 8001f1c:	6922      	ldr	r2, [r4, #16]
 8001f1e:	bf08      	it	eq
 8001f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bfc4      	itt	gt
 8001f28:	1a9b      	subgt	r3, r3, r2
 8001f2a:	18ed      	addgt	r5, r5, r3
 8001f2c:	341a      	adds	r4, #26
 8001f2e:	454d      	cmp	r5, r9
 8001f30:	d11b      	bne.n	8001f6a <_printf_common+0xda>
 8001f32:	2000      	movs	r0, #0
 8001f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f38:	2301      	movs	r3, #1
 8001f3a:	4652      	mov	r2, sl
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	4630      	mov	r0, r6
 8001f40:	47c0      	blx	r8
 8001f42:	3001      	adds	r0, #1
 8001f44:	d103      	bne.n	8001f4e <_printf_common+0xbe>
 8001f46:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f4e:	3501      	adds	r5, #1
 8001f50:	e7c1      	b.n	8001ed6 <_printf_common+0x46>
 8001f52:	2030      	movs	r0, #48	; 0x30
 8001f54:	18e1      	adds	r1, r4, r3
 8001f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f60:	4422      	add	r2, r4
 8001f62:	3302      	adds	r3, #2
 8001f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f68:	e7c3      	b.n	8001ef2 <_printf_common+0x62>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	4639      	mov	r1, r7
 8001f70:	4630      	mov	r0, r6
 8001f72:	47c0      	blx	r8
 8001f74:	3001      	adds	r0, #1
 8001f76:	d0e6      	beq.n	8001f46 <_printf_common+0xb6>
 8001f78:	f109 0901 	add.w	r9, r9, #1
 8001f7c:	e7d7      	b.n	8001f2e <_printf_common+0x9e>
	...

08001f80 <_printf_i>:
 8001f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f84:	4617      	mov	r7, r2
 8001f86:	7e0a      	ldrb	r2, [r1, #24]
 8001f88:	b085      	sub	sp, #20
 8001f8a:	2a6e      	cmp	r2, #110	; 0x6e
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	4606      	mov	r6, r0
 8001f90:	460c      	mov	r4, r1
 8001f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f94:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001f98:	f000 80bc 	beq.w	8002114 <_printf_i+0x194>
 8001f9c:	d81a      	bhi.n	8001fd4 <_printf_i+0x54>
 8001f9e:	2a63      	cmp	r2, #99	; 0x63
 8001fa0:	d02e      	beq.n	8002000 <_printf_i+0x80>
 8001fa2:	d80a      	bhi.n	8001fba <_printf_i+0x3a>
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	f000 80c8 	beq.w	800213a <_printf_i+0x1ba>
 8001faa:	2a58      	cmp	r2, #88	; 0x58
 8001fac:	f000 808a 	beq.w	80020c4 <_printf_i+0x144>
 8001fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fb4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001fb8:	e02a      	b.n	8002010 <_printf_i+0x90>
 8001fba:	2a64      	cmp	r2, #100	; 0x64
 8001fbc:	d001      	beq.n	8001fc2 <_printf_i+0x42>
 8001fbe:	2a69      	cmp	r2, #105	; 0x69
 8001fc0:	d1f6      	bne.n	8001fb0 <_printf_i+0x30>
 8001fc2:	6821      	ldr	r1, [r4, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fca:	d023      	beq.n	8002014 <_printf_i+0x94>
 8001fcc:	1d11      	adds	r1, r2, #4
 8001fce:	6019      	str	r1, [r3, #0]
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	e027      	b.n	8002024 <_printf_i+0xa4>
 8001fd4:	2a73      	cmp	r2, #115	; 0x73
 8001fd6:	f000 80b4 	beq.w	8002142 <_printf_i+0x1c2>
 8001fda:	d808      	bhi.n	8001fee <_printf_i+0x6e>
 8001fdc:	2a6f      	cmp	r2, #111	; 0x6f
 8001fde:	d02a      	beq.n	8002036 <_printf_i+0xb6>
 8001fe0:	2a70      	cmp	r2, #112	; 0x70
 8001fe2:	d1e5      	bne.n	8001fb0 <_printf_i+0x30>
 8001fe4:	680a      	ldr	r2, [r1, #0]
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	600a      	str	r2, [r1, #0]
 8001fec:	e003      	b.n	8001ff6 <_printf_i+0x76>
 8001fee:	2a75      	cmp	r2, #117	; 0x75
 8001ff0:	d021      	beq.n	8002036 <_printf_i+0xb6>
 8001ff2:	2a78      	cmp	r2, #120	; 0x78
 8001ff4:	d1dc      	bne.n	8001fb0 <_printf_i+0x30>
 8001ff6:	2278      	movs	r2, #120	; 0x78
 8001ff8:	496f      	ldr	r1, [pc, #444]	; (80021b8 <_printf_i+0x238>)
 8001ffa:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001ffe:	e064      	b.n	80020ca <_printf_i+0x14a>
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002006:	1d11      	adds	r1, r2, #4
 8002008:	6019      	str	r1, [r3, #0]
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002010:	2301      	movs	r3, #1
 8002012:	e0a3      	b.n	800215c <_printf_i+0x1dc>
 8002014:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002018:	f102 0104 	add.w	r1, r2, #4
 800201c:	6019      	str	r1, [r3, #0]
 800201e:	d0d7      	beq.n	8001fd0 <_printf_i+0x50>
 8002020:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da03      	bge.n	8002030 <_printf_i+0xb0>
 8002028:	222d      	movs	r2, #45	; 0x2d
 800202a:	425b      	negs	r3, r3
 800202c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002030:	4962      	ldr	r1, [pc, #392]	; (80021bc <_printf_i+0x23c>)
 8002032:	220a      	movs	r2, #10
 8002034:	e017      	b.n	8002066 <_printf_i+0xe6>
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800203e:	d003      	beq.n	8002048 <_printf_i+0xc8>
 8002040:	1d08      	adds	r0, r1, #4
 8002042:	6018      	str	r0, [r3, #0]
 8002044:	680b      	ldr	r3, [r1, #0]
 8002046:	e006      	b.n	8002056 <_printf_i+0xd6>
 8002048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800204c:	f101 0004 	add.w	r0, r1, #4
 8002050:	6018      	str	r0, [r3, #0]
 8002052:	d0f7      	beq.n	8002044 <_printf_i+0xc4>
 8002054:	880b      	ldrh	r3, [r1, #0]
 8002056:	2a6f      	cmp	r2, #111	; 0x6f
 8002058:	bf14      	ite	ne
 800205a:	220a      	movne	r2, #10
 800205c:	2208      	moveq	r2, #8
 800205e:	4957      	ldr	r1, [pc, #348]	; (80021bc <_printf_i+0x23c>)
 8002060:	2000      	movs	r0, #0
 8002062:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002066:	6865      	ldr	r5, [r4, #4]
 8002068:	2d00      	cmp	r5, #0
 800206a:	60a5      	str	r5, [r4, #8]
 800206c:	f2c0 809c 	blt.w	80021a8 <_printf_i+0x228>
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	f020 0004 	bic.w	r0, r0, #4
 8002076:	6020      	str	r0, [r4, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d13f      	bne.n	80020fc <_printf_i+0x17c>
 800207c:	2d00      	cmp	r5, #0
 800207e:	f040 8095 	bne.w	80021ac <_printf_i+0x22c>
 8002082:	4675      	mov	r5, lr
 8002084:	2a08      	cmp	r2, #8
 8002086:	d10b      	bne.n	80020a0 <_printf_i+0x120>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	07da      	lsls	r2, r3, #31
 800208c:	d508      	bpl.n	80020a0 <_printf_i+0x120>
 800208e:	6923      	ldr	r3, [r4, #16]
 8002090:	6862      	ldr	r2, [r4, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	bfde      	ittt	le
 8002096:	2330      	movle	r3, #48	; 0x30
 8002098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800209c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020a0:	ebae 0305 	sub.w	r3, lr, r5
 80020a4:	6123      	str	r3, [r4, #16]
 80020a6:	f8cd 8000 	str.w	r8, [sp]
 80020aa:	463b      	mov	r3, r7
 80020ac:	aa03      	add	r2, sp, #12
 80020ae:	4621      	mov	r1, r4
 80020b0:	4630      	mov	r0, r6
 80020b2:	f7ff feed 	bl	8001e90 <_printf_common>
 80020b6:	3001      	adds	r0, #1
 80020b8:	d155      	bne.n	8002166 <_printf_i+0x1e6>
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
 80020be:	b005      	add	sp, #20
 80020c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80020c8:	493c      	ldr	r1, [pc, #240]	; (80021bc <_printf_i+0x23c>)
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020d2:	f100 0504 	add.w	r5, r0, #4
 80020d6:	601d      	str	r5, [r3, #0]
 80020d8:	d001      	beq.n	80020de <_printf_i+0x15e>
 80020da:	6803      	ldr	r3, [r0, #0]
 80020dc:	e002      	b.n	80020e4 <_printf_i+0x164>
 80020de:	0655      	lsls	r5, r2, #25
 80020e0:	d5fb      	bpl.n	80020da <_printf_i+0x15a>
 80020e2:	8803      	ldrh	r3, [r0, #0]
 80020e4:	07d0      	lsls	r0, r2, #31
 80020e6:	bf44      	itt	mi
 80020e8:	f042 0220 	orrmi.w	r2, r2, #32
 80020ec:	6022      	strmi	r2, [r4, #0]
 80020ee:	b91b      	cbnz	r3, 80020f8 <_printf_i+0x178>
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	f022 0220 	bic.w	r2, r2, #32
 80020f6:	6022      	str	r2, [r4, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	e7b1      	b.n	8002060 <_printf_i+0xe0>
 80020fc:	4675      	mov	r5, lr
 80020fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002102:	fb02 3310 	mls	r3, r2, r0, r3
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800210c:	4603      	mov	r3, r0
 800210e:	2800      	cmp	r0, #0
 8002110:	d1f5      	bne.n	80020fe <_printf_i+0x17e>
 8002112:	e7b7      	b.n	8002084 <_printf_i+0x104>
 8002114:	6808      	ldr	r0, [r1, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f010 0f80 	tst.w	r0, #128	; 0x80
 800211c:	6949      	ldr	r1, [r1, #20]
 800211e:	d004      	beq.n	800212a <_printf_i+0x1aa>
 8002120:	1d10      	adds	r0, r2, #4
 8002122:	6018      	str	r0, [r3, #0]
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	6019      	str	r1, [r3, #0]
 8002128:	e007      	b.n	800213a <_printf_i+0x1ba>
 800212a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800212e:	f102 0004 	add.w	r0, r2, #4
 8002132:	6018      	str	r0, [r3, #0]
 8002134:	6813      	ldr	r3, [r2, #0]
 8002136:	d0f6      	beq.n	8002126 <_printf_i+0x1a6>
 8002138:	8019      	strh	r1, [r3, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	4675      	mov	r5, lr
 800213e:	6123      	str	r3, [r4, #16]
 8002140:	e7b1      	b.n	80020a6 <_printf_i+0x126>
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	1d11      	adds	r1, r2, #4
 8002146:	6019      	str	r1, [r3, #0]
 8002148:	6815      	ldr	r5, [r2, #0]
 800214a:	2100      	movs	r1, #0
 800214c:	6862      	ldr	r2, [r4, #4]
 800214e:	4628      	mov	r0, r5
 8002150:	f000 fe6c 	bl	8002e2c <memchr>
 8002154:	b108      	cbz	r0, 800215a <_printf_i+0x1da>
 8002156:	1b40      	subs	r0, r0, r5
 8002158:	6060      	str	r0, [r4, #4]
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	6123      	str	r3, [r4, #16]
 800215e:	2300      	movs	r3, #0
 8002160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002164:	e79f      	b.n	80020a6 <_printf_i+0x126>
 8002166:	6923      	ldr	r3, [r4, #16]
 8002168:	462a      	mov	r2, r5
 800216a:	4639      	mov	r1, r7
 800216c:	4630      	mov	r0, r6
 800216e:	47c0      	blx	r8
 8002170:	3001      	adds	r0, #1
 8002172:	d0a2      	beq.n	80020ba <_printf_i+0x13a>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	079b      	lsls	r3, r3, #30
 8002178:	d507      	bpl.n	800218a <_printf_i+0x20a>
 800217a:	2500      	movs	r5, #0
 800217c:	f104 0919 	add.w	r9, r4, #25
 8002180:	68e3      	ldr	r3, [r4, #12]
 8002182:	9a03      	ldr	r2, [sp, #12]
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	429d      	cmp	r5, r3
 8002188:	db05      	blt.n	8002196 <_printf_i+0x216>
 800218a:	68e0      	ldr	r0, [r4, #12]
 800218c:	9b03      	ldr	r3, [sp, #12]
 800218e:	4298      	cmp	r0, r3
 8002190:	bfb8      	it	lt
 8002192:	4618      	movlt	r0, r3
 8002194:	e793      	b.n	80020be <_printf_i+0x13e>
 8002196:	2301      	movs	r3, #1
 8002198:	464a      	mov	r2, r9
 800219a:	4639      	mov	r1, r7
 800219c:	4630      	mov	r0, r6
 800219e:	47c0      	blx	r8
 80021a0:	3001      	adds	r0, #1
 80021a2:	d08a      	beq.n	80020ba <_printf_i+0x13a>
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7eb      	b.n	8002180 <_printf_i+0x200>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a7      	bne.n	80020fc <_printf_i+0x17c>
 80021ac:	780b      	ldrb	r3, [r1, #0]
 80021ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021b6:	e765      	b.n	8002084 <_printf_i+0x104>
 80021b8:	0800305e 	.word	0x0800305e
 80021bc:	0800304d 	.word	0x0800304d

080021c0 <__svfiscanf_r>:
 80021c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	2300      	movs	r3, #0
 80021cc:	4606      	mov	r6, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	4692      	mov	sl, r2
 80021d2:	270a      	movs	r7, #10
 80021d4:	9346      	str	r3, [sp, #280]	; 0x118
 80021d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80021d8:	4b9f      	ldr	r3, [pc, #636]	; (8002458 <__svfiscanf_r+0x298>)
 80021da:	f10d 080c 	add.w	r8, sp, #12
 80021de:	93a2      	str	r3, [sp, #648]	; 0x288
 80021e0:	4b9e      	ldr	r3, [pc, #632]	; (800245c <__svfiscanf_r+0x29c>)
 80021e2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002460 <__svfiscanf_r+0x2a0>
 80021e6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80021ea:	93a3      	str	r3, [sp, #652]	; 0x28c
 80021ec:	f89a 3000 	ldrb.w	r3, [sl]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 812f 	beq.w	8002454 <__svfiscanf_r+0x294>
 80021f6:	f000 fde7 	bl	8002dc8 <__locale_ctype_ptr>
 80021fa:	f89a b000 	ldrb.w	fp, [sl]
 80021fe:	4458      	add	r0, fp
 8002200:	7843      	ldrb	r3, [r0, #1]
 8002202:	f013 0308 	ands.w	r3, r3, #8
 8002206:	d143      	bne.n	8002290 <__svfiscanf_r+0xd0>
 8002208:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800220c:	f10a 0501 	add.w	r5, sl, #1
 8002210:	f040 8099 	bne.w	8002346 <__svfiscanf_r+0x186>
 8002214:	9345      	str	r3, [sp, #276]	; 0x114
 8002216:	9343      	str	r3, [sp, #268]	; 0x10c
 8002218:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800221c:	2b2a      	cmp	r3, #42	; 0x2a
 800221e:	d103      	bne.n	8002228 <__svfiscanf_r+0x68>
 8002220:	2310      	movs	r3, #16
 8002222:	f10a 0502 	add.w	r5, sl, #2
 8002226:	9343      	str	r3, [sp, #268]	; 0x10c
 8002228:	7829      	ldrb	r1, [r5, #0]
 800222a:	46aa      	mov	sl, r5
 800222c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002230:	2a09      	cmp	r2, #9
 8002232:	f105 0501 	add.w	r5, r5, #1
 8002236:	d941      	bls.n	80022bc <__svfiscanf_r+0xfc>
 8002238:	2203      	movs	r2, #3
 800223a:	4889      	ldr	r0, [pc, #548]	; (8002460 <__svfiscanf_r+0x2a0>)
 800223c:	f000 fdf6 	bl	8002e2c <memchr>
 8002240:	b138      	cbz	r0, 8002252 <__svfiscanf_r+0x92>
 8002242:	eba0 0309 	sub.w	r3, r0, r9
 8002246:	2001      	movs	r0, #1
 8002248:	46aa      	mov	sl, r5
 800224a:	4098      	lsls	r0, r3
 800224c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800224e:	4318      	orrs	r0, r3
 8002250:	9043      	str	r0, [sp, #268]	; 0x10c
 8002252:	f89a 3000 	ldrb.w	r3, [sl]
 8002256:	f10a 0501 	add.w	r5, sl, #1
 800225a:	2b67      	cmp	r3, #103	; 0x67
 800225c:	d84a      	bhi.n	80022f4 <__svfiscanf_r+0x134>
 800225e:	2b65      	cmp	r3, #101	; 0x65
 8002260:	f080 80b7 	bcs.w	80023d2 <__svfiscanf_r+0x212>
 8002264:	2b47      	cmp	r3, #71	; 0x47
 8002266:	d82f      	bhi.n	80022c8 <__svfiscanf_r+0x108>
 8002268:	2b45      	cmp	r3, #69	; 0x45
 800226a:	f080 80b2 	bcs.w	80023d2 <__svfiscanf_r+0x212>
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8082 	beq.w	8002378 <__svfiscanf_r+0x1b8>
 8002274:	2b25      	cmp	r3, #37	; 0x25
 8002276:	d066      	beq.n	8002346 <__svfiscanf_r+0x186>
 8002278:	2303      	movs	r3, #3
 800227a:	9744      	str	r7, [sp, #272]	; 0x110
 800227c:	9349      	str	r3, [sp, #292]	; 0x124
 800227e:	e045      	b.n	800230c <__svfiscanf_r+0x14c>
 8002280:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002282:	3301      	adds	r3, #1
 8002284:	3101      	adds	r1, #1
 8002286:	9147      	str	r1, [sp, #284]	; 0x11c
 8002288:	6861      	ldr	r1, [r4, #4]
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	3901      	subs	r1, #1
 800228e:	6061      	str	r1, [r4, #4]
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	dd0b      	ble.n	80022ae <__svfiscanf_r+0xee>
 8002296:	f000 fd97 	bl	8002dc8 <__locale_ctype_ptr>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	7819      	ldrb	r1, [r3, #0]
 800229e:	4408      	add	r0, r1
 80022a0:	7841      	ldrb	r1, [r0, #1]
 80022a2:	070d      	lsls	r5, r1, #28
 80022a4:	d4ec      	bmi.n	8002280 <__svfiscanf_r+0xc0>
 80022a6:	f10a 0501 	add.w	r5, sl, #1
 80022aa:	46aa      	mov	sl, r5
 80022ac:	e79e      	b.n	80021ec <__svfiscanf_r+0x2c>
 80022ae:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80022b0:	4621      	mov	r1, r4
 80022b2:	4630      	mov	r0, r6
 80022b4:	4798      	blx	r3
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d0ed      	beq.n	8002296 <__svfiscanf_r+0xd6>
 80022ba:	e7f4      	b.n	80022a6 <__svfiscanf_r+0xe6>
 80022bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80022be:	fb07 1303 	mla	r3, r7, r3, r1
 80022c2:	3b30      	subs	r3, #48	; 0x30
 80022c4:	9345      	str	r3, [sp, #276]	; 0x114
 80022c6:	e7af      	b.n	8002228 <__svfiscanf_r+0x68>
 80022c8:	2b5b      	cmp	r3, #91	; 0x5b
 80022ca:	d061      	beq.n	8002390 <__svfiscanf_r+0x1d0>
 80022cc:	d80c      	bhi.n	80022e8 <__svfiscanf_r+0x128>
 80022ce:	2b58      	cmp	r3, #88	; 0x58
 80022d0:	d1d2      	bne.n	8002278 <__svfiscanf_r+0xb8>
 80022d2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	9243      	str	r2, [sp, #268]	; 0x10c
 80022da:	2210      	movs	r2, #16
 80022dc:	9244      	str	r2, [sp, #272]	; 0x110
 80022de:	2b6f      	cmp	r3, #111	; 0x6f
 80022e0:	bfb4      	ite	lt
 80022e2:	2303      	movlt	r3, #3
 80022e4:	2304      	movge	r3, #4
 80022e6:	e010      	b.n	800230a <__svfiscanf_r+0x14a>
 80022e8:	2b63      	cmp	r3, #99	; 0x63
 80022ea:	d05c      	beq.n	80023a6 <__svfiscanf_r+0x1e6>
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d1c3      	bne.n	8002278 <__svfiscanf_r+0xb8>
 80022f0:	9744      	str	r7, [sp, #272]	; 0x110
 80022f2:	e7f4      	b.n	80022de <__svfiscanf_r+0x11e>
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d042      	beq.n	800237e <__svfiscanf_r+0x1be>
 80022f8:	d81d      	bhi.n	8002336 <__svfiscanf_r+0x176>
 80022fa:	2b6e      	cmp	r3, #110	; 0x6e
 80022fc:	d059      	beq.n	80023b2 <__svfiscanf_r+0x1f2>
 80022fe:	d843      	bhi.n	8002388 <__svfiscanf_r+0x1c8>
 8002300:	2b69      	cmp	r3, #105	; 0x69
 8002302:	d1b9      	bne.n	8002278 <__svfiscanf_r+0xb8>
 8002304:	2300      	movs	r3, #0
 8002306:	9344      	str	r3, [sp, #272]	; 0x110
 8002308:	2303      	movs	r3, #3
 800230a:	9349      	str	r3, [sp, #292]	; 0x124
 800230c:	6863      	ldr	r3, [r4, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dd61      	ble.n	80023d6 <__svfiscanf_r+0x216>
 8002312:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002314:	0659      	lsls	r1, r3, #25
 8002316:	d56f      	bpl.n	80023f8 <__svfiscanf_r+0x238>
 8002318:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800231a:	2b02      	cmp	r3, #2
 800231c:	dc7c      	bgt.n	8002418 <__svfiscanf_r+0x258>
 800231e:	ab01      	add	r3, sp, #4
 8002320:	4622      	mov	r2, r4
 8002322:	a943      	add	r1, sp, #268	; 0x10c
 8002324:	4630      	mov	r0, r6
 8002326:	f000 f8c7 	bl	80024b8 <_scanf_chars>
 800232a:	2801      	cmp	r0, #1
 800232c:	f000 8092 	beq.w	8002454 <__svfiscanf_r+0x294>
 8002330:	2802      	cmp	r0, #2
 8002332:	d1ba      	bne.n	80022aa <__svfiscanf_r+0xea>
 8002334:	e01d      	b.n	8002372 <__svfiscanf_r+0x1b2>
 8002336:	2b75      	cmp	r3, #117	; 0x75
 8002338:	d0da      	beq.n	80022f0 <__svfiscanf_r+0x130>
 800233a:	2b78      	cmp	r3, #120	; 0x78
 800233c:	d0c9      	beq.n	80022d2 <__svfiscanf_r+0x112>
 800233e:	2b73      	cmp	r3, #115	; 0x73
 8002340:	d19a      	bne.n	8002278 <__svfiscanf_r+0xb8>
 8002342:	2302      	movs	r3, #2
 8002344:	e7e1      	b.n	800230a <__svfiscanf_r+0x14a>
 8002346:	6863      	ldr	r3, [r4, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	dd0c      	ble.n	8002366 <__svfiscanf_r+0x1a6>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	4593      	cmp	fp, r2
 8002352:	d17f      	bne.n	8002454 <__svfiscanf_r+0x294>
 8002354:	3301      	adds	r3, #1
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800235c:	3a01      	subs	r2, #1
 800235e:	3301      	adds	r3, #1
 8002360:	6062      	str	r2, [r4, #4]
 8002362:	9347      	str	r3, [sp, #284]	; 0x11c
 8002364:	e7a1      	b.n	80022aa <__svfiscanf_r+0xea>
 8002366:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002368:	4621      	mov	r1, r4
 800236a:	4630      	mov	r0, r6
 800236c:	4798      	blx	r3
 800236e:	2800      	cmp	r0, #0
 8002370:	d0ec      	beq.n	800234c <__svfiscanf_r+0x18c>
 8002372:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002374:	2800      	cmp	r0, #0
 8002376:	d163      	bne.n	8002440 <__svfiscanf_r+0x280>
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	e066      	b.n	800244c <__svfiscanf_r+0x28c>
 800237e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002380:	f042 0220 	orr.w	r2, r2, #32
 8002384:	9243      	str	r2, [sp, #268]	; 0x10c
 8002386:	e7a4      	b.n	80022d2 <__svfiscanf_r+0x112>
 8002388:	2308      	movs	r3, #8
 800238a:	9344      	str	r3, [sp, #272]	; 0x110
 800238c:	2304      	movs	r3, #4
 800238e:	e7bc      	b.n	800230a <__svfiscanf_r+0x14a>
 8002390:	4629      	mov	r1, r5
 8002392:	4640      	mov	r0, r8
 8002394:	f000 fa90 	bl	80028b8 <__sccl>
 8002398:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800239a:	4605      	mov	r5, r0
 800239c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80023a2:	2301      	movs	r3, #1
 80023a4:	e7b1      	b.n	800230a <__svfiscanf_r+0x14a>
 80023a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ac:	9343      	str	r3, [sp, #268]	; 0x10c
 80023ae:	2300      	movs	r3, #0
 80023b0:	e7ab      	b.n	800230a <__svfiscanf_r+0x14a>
 80023b2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80023b4:	06d0      	lsls	r0, r2, #27
 80023b6:	f53f af78 	bmi.w	80022aa <__svfiscanf_r+0xea>
 80023ba:	f012 0f01 	tst.w	r2, #1
 80023be:	9a01      	ldr	r2, [sp, #4]
 80023c0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80023c2:	f102 0104 	add.w	r1, r2, #4
 80023c6:	9101      	str	r1, [sp, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	bf14      	ite	ne
 80023cc:	8013      	strhne	r3, [r2, #0]
 80023ce:	6013      	streq	r3, [r2, #0]
 80023d0:	e76b      	b.n	80022aa <__svfiscanf_r+0xea>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e799      	b.n	800230a <__svfiscanf_r+0x14a>
 80023d6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80023d8:	4621      	mov	r1, r4
 80023da:	4630      	mov	r0, r6
 80023dc:	4798      	blx	r3
 80023de:	2800      	cmp	r0, #0
 80023e0:	d097      	beq.n	8002312 <__svfiscanf_r+0x152>
 80023e2:	e7c6      	b.n	8002372 <__svfiscanf_r+0x1b2>
 80023e4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80023e6:	3201      	adds	r2, #1
 80023e8:	9247      	str	r2, [sp, #284]	; 0x11c
 80023ea:	6862      	ldr	r2, [r4, #4]
 80023ec:	3a01      	subs	r2, #1
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	6062      	str	r2, [r4, #4]
 80023f2:	dd0a      	ble.n	800240a <__svfiscanf_r+0x24a>
 80023f4:	3301      	adds	r3, #1
 80023f6:	6023      	str	r3, [r4, #0]
 80023f8:	f000 fce6 	bl	8002dc8 <__locale_ctype_ptr>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	4410      	add	r0, r2
 8002402:	7842      	ldrb	r2, [r0, #1]
 8002404:	0712      	lsls	r2, r2, #28
 8002406:	d4ed      	bmi.n	80023e4 <__svfiscanf_r+0x224>
 8002408:	e786      	b.n	8002318 <__svfiscanf_r+0x158>
 800240a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800240c:	4621      	mov	r1, r4
 800240e:	4630      	mov	r0, r6
 8002410:	4798      	blx	r3
 8002412:	2800      	cmp	r0, #0
 8002414:	d0f0      	beq.n	80023f8 <__svfiscanf_r+0x238>
 8002416:	e7ac      	b.n	8002372 <__svfiscanf_r+0x1b2>
 8002418:	2b04      	cmp	r3, #4
 800241a:	dc06      	bgt.n	800242a <__svfiscanf_r+0x26a>
 800241c:	ab01      	add	r3, sp, #4
 800241e:	4622      	mov	r2, r4
 8002420:	a943      	add	r1, sp, #268	; 0x10c
 8002422:	4630      	mov	r0, r6
 8002424:	f000 f8ac 	bl	8002580 <_scanf_i>
 8002428:	e77f      	b.n	800232a <__svfiscanf_r+0x16a>
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <__svfiscanf_r+0x2a4>)
 800242c:	2b00      	cmp	r3, #0
 800242e:	f43f af3c 	beq.w	80022aa <__svfiscanf_r+0xea>
 8002432:	ab01      	add	r3, sp, #4
 8002434:	4622      	mov	r2, r4
 8002436:	a943      	add	r1, sp, #268	; 0x10c
 8002438:	4630      	mov	r0, r6
 800243a:	f3af 8000 	nop.w
 800243e:	e774      	b.n	800232a <__svfiscanf_r+0x16a>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002446:	bf18      	it	ne
 8002448:	f04f 30ff 	movne.w	r0, #4294967295
 800244c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8002450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002454:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002456:	e7f9      	b.n	800244c <__svfiscanf_r+0x28c>
 8002458:	08002c55 	.word	0x08002c55
 800245c:	08002781 	.word	0x08002781
 8002460:	08003042 	.word	0x08003042
 8002464:	00000000 	.word	0x00000000

08002468 <_vfiscanf_r>:
 8002468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246c:	460c      	mov	r4, r1
 800246e:	4616      	mov	r6, r2
 8002470:	461f      	mov	r7, r3
 8002472:	4605      	mov	r5, r0
 8002474:	b118      	cbz	r0, 800247e <_vfiscanf_r+0x16>
 8002476:	6983      	ldr	r3, [r0, #24]
 8002478:	b90b      	cbnz	r3, 800247e <_vfiscanf_r+0x16>
 800247a:	f7ff fa0f 	bl	800189c <__sinit>
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <_vfiscanf_r+0x44>)
 8002480:	429c      	cmp	r4, r3
 8002482:	d108      	bne.n	8002496 <_vfiscanf_r+0x2e>
 8002484:	686c      	ldr	r4, [r5, #4]
 8002486:	463b      	mov	r3, r7
 8002488:	4632      	mov	r2, r6
 800248a:	4621      	mov	r1, r4
 800248c:	4628      	mov	r0, r5
 800248e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002492:	f7ff be95 	b.w	80021c0 <__svfiscanf_r>
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <_vfiscanf_r+0x48>)
 8002498:	429c      	cmp	r4, r3
 800249a:	d101      	bne.n	80024a0 <_vfiscanf_r+0x38>
 800249c:	68ac      	ldr	r4, [r5, #8]
 800249e:	e7f2      	b.n	8002486 <_vfiscanf_r+0x1e>
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <_vfiscanf_r+0x4c>)
 80024a2:	429c      	cmp	r4, r3
 80024a4:	bf08      	it	eq
 80024a6:	68ec      	ldreq	r4, [r5, #12]
 80024a8:	e7ed      	b.n	8002486 <_vfiscanf_r+0x1e>
 80024aa:	bf00      	nop
 80024ac:	08002ffc 	.word	0x08002ffc
 80024b0:	0800301c 	.word	0x0800301c
 80024b4:	08002fdc 	.word	0x08002fdc

080024b8 <_scanf_chars>:
 80024b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024bc:	4615      	mov	r5, r2
 80024be:	688a      	ldr	r2, [r1, #8]
 80024c0:	4680      	mov	r8, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	b932      	cbnz	r2, 80024d4 <_scanf_chars+0x1c>
 80024c6:	698a      	ldr	r2, [r1, #24]
 80024c8:	2a00      	cmp	r2, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2201      	moveq	r2, #1
 80024ce:	f04f 32ff 	movne.w	r2, #4294967295
 80024d2:	608a      	str	r2, [r1, #8]
 80024d4:	2600      	movs	r6, #0
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	06d1      	lsls	r1, r2, #27
 80024da:	bf5f      	itttt	pl
 80024dc:	681a      	ldrpl	r2, [r3, #0]
 80024de:	1d11      	addpl	r1, r2, #4
 80024e0:	6019      	strpl	r1, [r3, #0]
 80024e2:	6817      	ldrpl	r7, [r2, #0]
 80024e4:	69a3      	ldr	r3, [r4, #24]
 80024e6:	b1db      	cbz	r3, 8002520 <_scanf_chars+0x68>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <_scanf_chars+0x44>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6962      	ldr	r2, [r4, #20]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	b9a3      	cbnz	r3, 8002520 <_scanf_chars+0x68>
 80024f6:	2e00      	cmp	r6, #0
 80024f8:	d131      	bne.n	800255e <_scanf_chars+0xa6>
 80024fa:	e006      	b.n	800250a <_scanf_chars+0x52>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d007      	beq.n	8002510 <_scanf_chars+0x58>
 8002500:	2e00      	cmp	r6, #0
 8002502:	d12c      	bne.n	800255e <_scanf_chars+0xa6>
 8002504:	69a3      	ldr	r3, [r4, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d129      	bne.n	800255e <_scanf_chars+0xa6>
 800250a:	2001      	movs	r0, #1
 800250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002510:	f000 fc5a 	bl	8002dc8 <__locale_ctype_ptr>
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4418      	add	r0, r3
 800251a:	7843      	ldrb	r3, [r0, #1]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	d4ef      	bmi.n	8002500 <_scanf_chars+0x48>
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	3601      	adds	r6, #1
 8002524:	06da      	lsls	r2, r3, #27
 8002526:	bf5e      	ittt	pl
 8002528:	682b      	ldrpl	r3, [r5, #0]
 800252a:	781b      	ldrbpl	r3, [r3, #0]
 800252c:	703b      	strbpl	r3, [r7, #0]
 800252e:	682a      	ldr	r2, [r5, #0]
 8002530:	686b      	ldr	r3, [r5, #4]
 8002532:	f102 0201 	add.w	r2, r2, #1
 8002536:	602a      	str	r2, [r5, #0]
 8002538:	68a2      	ldr	r2, [r4, #8]
 800253a:	f103 33ff 	add.w	r3, r3, #4294967295
 800253e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002542:	606b      	str	r3, [r5, #4]
 8002544:	bf58      	it	pl
 8002546:	3701      	addpl	r7, #1
 8002548:	60a2      	str	r2, [r4, #8]
 800254a:	b142      	cbz	r2, 800255e <_scanf_chars+0xa6>
 800254c:	2b00      	cmp	r3, #0
 800254e:	dcc9      	bgt.n	80024e4 <_scanf_chars+0x2c>
 8002550:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002554:	4629      	mov	r1, r5
 8002556:	4640      	mov	r0, r8
 8002558:	4798      	blx	r3
 800255a:	2800      	cmp	r0, #0
 800255c:	d0c2      	beq.n	80024e4 <_scanf_chars+0x2c>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f013 0310 	ands.w	r3, r3, #16
 8002564:	d105      	bne.n	8002572 <_scanf_chars+0xba>
 8002566:	68e2      	ldr	r2, [r4, #12]
 8002568:	3201      	adds	r2, #1
 800256a:	60e2      	str	r2, [r4, #12]
 800256c:	69a2      	ldr	r2, [r4, #24]
 800256e:	b102      	cbz	r2, 8002572 <_scanf_chars+0xba>
 8002570:	703b      	strb	r3, [r7, #0]
 8002572:	6923      	ldr	r3, [r4, #16]
 8002574:	2000      	movs	r0, #0
 8002576:	441e      	add	r6, r3
 8002578:	6126      	str	r6, [r4, #16]
 800257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002580 <_scanf_i>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	460c      	mov	r4, r1
 8002586:	469a      	mov	sl, r3
 8002588:	4b74      	ldr	r3, [pc, #464]	; (800275c <_scanf_i+0x1dc>)
 800258a:	b087      	sub	sp, #28
 800258c:	4683      	mov	fp, r0
 800258e:	4616      	mov	r6, r2
 8002590:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002594:	ab03      	add	r3, sp, #12
 8002596:	68a7      	ldr	r7, [r4, #8]
 8002598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <_scanf_i+0x1e0>)
 800259e:	69a1      	ldr	r1, [r4, #24]
 80025a0:	4a70      	ldr	r2, [pc, #448]	; (8002764 <_scanf_i+0x1e4>)
 80025a2:	f104 091c 	add.w	r9, r4, #28
 80025a6:	2903      	cmp	r1, #3
 80025a8:	bf18      	it	ne
 80025aa:	461a      	movne	r2, r3
 80025ac:	1e7b      	subs	r3, r7, #1
 80025ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80025b2:	bf84      	itt	hi
 80025b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80025b8:	60a3      	strhi	r3, [r4, #8]
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	bf88      	it	hi
 80025be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80025c2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80025c6:	6023      	str	r3, [r4, #0]
 80025c8:	bf98      	it	ls
 80025ca:	2700      	movls	r7, #0
 80025cc:	464b      	mov	r3, r9
 80025ce:	f04f 0800 	mov.w	r8, #0
 80025d2:	9200      	str	r2, [sp, #0]
 80025d4:	bf88      	it	hi
 80025d6:	197f      	addhi	r7, r7, r5
 80025d8:	6831      	ldr	r1, [r6, #0]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	ab03      	add	r3, sp, #12
 80025de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80025e2:	2202      	movs	r2, #2
 80025e4:	7809      	ldrb	r1, [r1, #0]
 80025e6:	f000 fc21 	bl	8002e2c <memchr>
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	b328      	cbz	r0, 800263a <_scanf_i+0xba>
 80025ee:	f1b8 0f01 	cmp.w	r8, #1
 80025f2:	d156      	bne.n	80026a2 <_scanf_i+0x122>
 80025f4:	6862      	ldr	r2, [r4, #4]
 80025f6:	b92a      	cbnz	r2, 8002604 <_scanf_i+0x84>
 80025f8:	2208      	movs	r2, #8
 80025fa:	6062      	str	r2, [r4, #4]
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	6022      	str	r2, [r4, #0]
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800260a:	6022      	str	r2, [r4, #0]
 800260c:	68a2      	ldr	r2, [r4, #8]
 800260e:	1e51      	subs	r1, r2, #1
 8002610:	60a1      	str	r1, [r4, #8]
 8002612:	b192      	cbz	r2, 800263a <_scanf_i+0xba>
 8002614:	6832      	ldr	r2, [r6, #0]
 8002616:	1c5d      	adds	r5, r3, #1
 8002618:	1c51      	adds	r1, r2, #1
 800261a:	6031      	str	r1, [r6, #0]
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	6873      	ldr	r3, [r6, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	6073      	str	r3, [r6, #4]
 8002628:	dc06      	bgt.n	8002638 <_scanf_i+0xb8>
 800262a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800262e:	4631      	mov	r1, r6
 8002630:	4658      	mov	r0, fp
 8002632:	4798      	blx	r3
 8002634:	2800      	cmp	r0, #0
 8002636:	d177      	bne.n	8002728 <_scanf_i+0x1a8>
 8002638:	462b      	mov	r3, r5
 800263a:	f108 0801 	add.w	r8, r8, #1
 800263e:	f1b8 0f03 	cmp.w	r8, #3
 8002642:	d1c9      	bne.n	80025d8 <_scanf_i+0x58>
 8002644:	6862      	ldr	r2, [r4, #4]
 8002646:	b90a      	cbnz	r2, 800264c <_scanf_i+0xcc>
 8002648:	220a      	movs	r2, #10
 800264a:	6062      	str	r2, [r4, #4]
 800264c:	6862      	ldr	r2, [r4, #4]
 800264e:	4946      	ldr	r1, [pc, #280]	; (8002768 <_scanf_i+0x1e8>)
 8002650:	6960      	ldr	r0, [r4, #20]
 8002652:	1a89      	subs	r1, r1, r2
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	f000 f92f 	bl	80028b8 <__sccl>
 800265a:	9b01      	ldr	r3, [sp, #4]
 800265c:	f04f 0800 	mov.w	r8, #0
 8002660:	461d      	mov	r5, r3
 8002662:	68a3      	ldr	r3, [r4, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d039      	beq.n	80026dc <_scanf_i+0x15c>
 8002668:	6831      	ldr	r1, [r6, #0]
 800266a:	6960      	ldr	r0, [r4, #20]
 800266c:	780a      	ldrb	r2, [r1, #0]
 800266e:	5c80      	ldrb	r0, [r0, r2]
 8002670:	2800      	cmp	r0, #0
 8002672:	d033      	beq.n	80026dc <_scanf_i+0x15c>
 8002674:	2a30      	cmp	r2, #48	; 0x30
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	d121      	bne.n	80026be <_scanf_i+0x13e>
 800267a:	0510      	lsls	r0, r2, #20
 800267c:	d51f      	bpl.n	80026be <_scanf_i+0x13e>
 800267e:	f108 0801 	add.w	r8, r8, #1
 8002682:	b117      	cbz	r7, 800268a <_scanf_i+0x10a>
 8002684:	3301      	adds	r3, #1
 8002686:	3f01      	subs	r7, #1
 8002688:	60a3      	str	r3, [r4, #8]
 800268a:	6873      	ldr	r3, [r6, #4]
 800268c:	3b01      	subs	r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	6073      	str	r3, [r6, #4]
 8002692:	dd1c      	ble.n	80026ce <_scanf_i+0x14e>
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	6033      	str	r3, [r6, #0]
 800269a:	68a3      	ldr	r3, [r4, #8]
 800269c:	3b01      	subs	r3, #1
 800269e:	60a3      	str	r3, [r4, #8]
 80026a0:	e7df      	b.n	8002662 <_scanf_i+0xe2>
 80026a2:	f1b8 0f02 	cmp.w	r8, #2
 80026a6:	d1b1      	bne.n	800260c <_scanf_i+0x8c>
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80026ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80026b2:	d1c2      	bne.n	800263a <_scanf_i+0xba>
 80026b4:	2110      	movs	r1, #16
 80026b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ba:	6061      	str	r1, [r4, #4]
 80026bc:	e7a5      	b.n	800260a <_scanf_i+0x8a>
 80026be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80026c2:	6022      	str	r2, [r4, #0]
 80026c4:	780b      	ldrb	r3, [r1, #0]
 80026c6:	3501      	adds	r5, #1
 80026c8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80026cc:	e7dd      	b.n	800268a <_scanf_i+0x10a>
 80026ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80026d2:	4631      	mov	r1, r6
 80026d4:	4658      	mov	r0, fp
 80026d6:	4798      	blx	r3
 80026d8:	2800      	cmp	r0, #0
 80026da:	d0de      	beq.n	800269a <_scanf_i+0x11a>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	05d9      	lsls	r1, r3, #23
 80026e0:	d50c      	bpl.n	80026fc <_scanf_i+0x17c>
 80026e2:	454d      	cmp	r5, r9
 80026e4:	d908      	bls.n	80026f8 <_scanf_i+0x178>
 80026e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80026ea:	1e6f      	subs	r7, r5, #1
 80026ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80026f0:	4632      	mov	r2, r6
 80026f2:	4658      	mov	r0, fp
 80026f4:	4798      	blx	r3
 80026f6:	463d      	mov	r5, r7
 80026f8:	454d      	cmp	r5, r9
 80026fa:	d02c      	beq.n	8002756 <_scanf_i+0x1d6>
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	f012 0210 	ands.w	r2, r2, #16
 8002702:	d11e      	bne.n	8002742 <_scanf_i+0x1c2>
 8002704:	702a      	strb	r2, [r5, #0]
 8002706:	6863      	ldr	r3, [r4, #4]
 8002708:	4649      	mov	r1, r9
 800270a:	4658      	mov	r0, fp
 800270c:	9e00      	ldr	r6, [sp, #0]
 800270e:	47b0      	blx	r6
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	f8da 3000 	ldr.w	r3, [sl]
 8002716:	f012 0f20 	tst.w	r2, #32
 800271a:	d008      	beq.n	800272e <_scanf_i+0x1ae>
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	f8ca 2000 	str.w	r2, [sl]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6018      	str	r0, [r3, #0]
 8002726:	e009      	b.n	800273c <_scanf_i+0x1bc>
 8002728:	f04f 0800 	mov.w	r8, #0
 800272c:	e7d6      	b.n	80026dc <_scanf_i+0x15c>
 800272e:	07d2      	lsls	r2, r2, #31
 8002730:	d5f4      	bpl.n	800271c <_scanf_i+0x19c>
 8002732:	1d1a      	adds	r2, r3, #4
 8002734:	f8ca 2000 	str.w	r2, [sl]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	8018      	strh	r0, [r3, #0]
 800273c:	68e3      	ldr	r3, [r4, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	60e3      	str	r3, [r4, #12]
 8002742:	2000      	movs	r0, #0
 8002744:	eba5 0509 	sub.w	r5, r5, r9
 8002748:	44a8      	add	r8, r5
 800274a:	6925      	ldr	r5, [r4, #16]
 800274c:	4445      	add	r5, r8
 800274e:	6125      	str	r5, [r4, #16]
 8002750:	b007      	add	sp, #28
 8002752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002756:	2001      	movs	r0, #1
 8002758:	e7fa      	b.n	8002750 <_scanf_i+0x1d0>
 800275a:	bf00      	nop
 800275c:	08002f84 	.word	0x08002f84
 8002760:	08002bbd 	.word	0x08002bbd
 8002764:	08002a9d 	.word	0x08002a9d
 8002768:	0800307f 	.word	0x0800307f

0800276c <lflush>:
 800276c:	8983      	ldrh	r3, [r0, #12]
 800276e:	f003 0309 	and.w	r3, r3, #9
 8002772:	2b09      	cmp	r3, #9
 8002774:	d101      	bne.n	800277a <lflush+0xe>
 8002776:	f7ff b83f 	b.w	80017f8 <fflush>
 800277a:	2000      	movs	r0, #0
 800277c:	4770      	bx	lr
	...

08002780 <__srefill_r>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	460c      	mov	r4, r1
 8002784:	4605      	mov	r5, r0
 8002786:	b118      	cbz	r0, 8002790 <__srefill_r+0x10>
 8002788:	6983      	ldr	r3, [r0, #24]
 800278a:	b90b      	cbnz	r3, 8002790 <__srefill_r+0x10>
 800278c:	f7ff f886 	bl	800189c <__sinit>
 8002790:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <__srefill_r+0x104>)
 8002792:	429c      	cmp	r4, r3
 8002794:	d10a      	bne.n	80027ac <__srefill_r+0x2c>
 8002796:	686c      	ldr	r4, [r5, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800279e:	6063      	str	r3, [r4, #4]
 80027a0:	b293      	uxth	r3, r2
 80027a2:	069e      	lsls	r6, r3, #26
 80027a4:	d50c      	bpl.n	80027c0 <__srefill_r+0x40>
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <__srefill_r+0x108>)
 80027ae:	429c      	cmp	r4, r3
 80027b0:	d101      	bne.n	80027b6 <__srefill_r+0x36>
 80027b2:	68ac      	ldr	r4, [r5, #8]
 80027b4:	e7f0      	b.n	8002798 <__srefill_r+0x18>
 80027b6:	4b35      	ldr	r3, [pc, #212]	; (800288c <__srefill_r+0x10c>)
 80027b8:	429c      	cmp	r4, r3
 80027ba:	bf08      	it	eq
 80027bc:	68ec      	ldreq	r4, [r5, #12]
 80027be:	e7eb      	b.n	8002798 <__srefill_r+0x18>
 80027c0:	0758      	lsls	r0, r3, #29
 80027c2:	d449      	bmi.n	8002858 <__srefill_r+0xd8>
 80027c4:	06d9      	lsls	r1, r3, #27
 80027c6:	d405      	bmi.n	80027d4 <__srefill_r+0x54>
 80027c8:	2309      	movs	r3, #9
 80027ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ce:	602b      	str	r3, [r5, #0]
 80027d0:	81a2      	strh	r2, [r4, #12]
 80027d2:	e7e8      	b.n	80027a6 <__srefill_r+0x26>
 80027d4:	071a      	lsls	r2, r3, #28
 80027d6:	d50b      	bpl.n	80027f0 <__srefill_r+0x70>
 80027d8:	4621      	mov	r1, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	f7fe ffe2 	bl	80017a4 <_fflush_r>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d1e0      	bne.n	80027a6 <__srefill_r+0x26>
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	60a0      	str	r0, [r4, #8]
 80027e8:	f023 0308 	bic.w	r3, r3, #8
 80027ec:	81a3      	strh	r3, [r4, #12]
 80027ee:	61a0      	str	r0, [r4, #24]
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	81a3      	strh	r3, [r4, #12]
 80027f8:	6923      	ldr	r3, [r4, #16]
 80027fa:	b91b      	cbnz	r3, 8002804 <__srefill_r+0x84>
 80027fc:	4621      	mov	r1, r4
 80027fe:	4628      	mov	r0, r5
 8002800:	f7ff f916 	bl	8001a30 <__smakebuf_r>
 8002804:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002808:	b2be      	uxth	r6, r7
 800280a:	07b3      	lsls	r3, r6, #30
 800280c:	d00f      	beq.n	800282e <__srefill_r+0xae>
 800280e:	2301      	movs	r3, #1
 8002810:	81a3      	strh	r3, [r4, #12]
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <__srefill_r+0x110>)
 8002814:	491f      	ldr	r1, [pc, #124]	; (8002894 <__srefill_r+0x114>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f006 0609 	and.w	r6, r6, #9
 800281c:	f7ff f8aa 	bl	8001974 <_fwalk>
 8002820:	2e09      	cmp	r6, #9
 8002822:	81a7      	strh	r7, [r4, #12]
 8002824:	d103      	bne.n	800282e <__srefill_r+0xae>
 8002826:	4621      	mov	r1, r4
 8002828:	4628      	mov	r0, r5
 800282a:	f7fe ff33 	bl	8001694 <__sflush_r>
 800282e:	6922      	ldr	r2, [r4, #16]
 8002830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002832:	6022      	str	r2, [r4, #0]
 8002834:	6963      	ldr	r3, [r4, #20]
 8002836:	6a21      	ldr	r1, [r4, #32]
 8002838:	4628      	mov	r0, r5
 800283a:	47b0      	blx	r6
 800283c:	2800      	cmp	r0, #0
 800283e:	6060      	str	r0, [r4, #4]
 8002840:	dc1d      	bgt.n	800287e <__srefill_r+0xfe>
 8002842:	bf18      	it	ne
 8002844:	2200      	movne	r2, #0
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	bf16      	itet	ne
 800284a:	6062      	strne	r2, [r4, #4]
 800284c:	f043 0320 	orreq.w	r3, r3, #32
 8002850:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002854:	81a3      	strh	r3, [r4, #12]
 8002856:	e7a6      	b.n	80027a6 <__srefill_r+0x26>
 8002858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800285a:	2900      	cmp	r1, #0
 800285c:	d0cc      	beq.n	80027f8 <__srefill_r+0x78>
 800285e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002862:	4299      	cmp	r1, r3
 8002864:	d002      	beq.n	800286c <__srefill_r+0xec>
 8002866:	4628      	mov	r0, r5
 8002868:	f7ff f92a 	bl	8001ac0 <_free_r>
 800286c:	2000      	movs	r0, #0
 800286e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002870:	6360      	str	r0, [r4, #52]	; 0x34
 8002872:	6063      	str	r3, [r4, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0bf      	beq.n	80027f8 <__srefill_r+0x78>
 8002878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287e:	2000      	movs	r0, #0
 8002880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002882:	bf00      	nop
 8002884:	08002ffc 	.word	0x08002ffc
 8002888:	0800301c 	.word	0x0800301c
 800288c:	08002fdc 	.word	0x08002fdc
 8002890:	08002fd8 	.word	0x08002fd8
 8002894:	0800276d 	.word	0x0800276d

08002898 <_sbrk_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	2300      	movs	r3, #0
 800289c:	4c05      	ldr	r4, [pc, #20]	; (80028b4 <_sbrk_r+0x1c>)
 800289e:	4605      	mov	r5, r0
 80028a0:	4608      	mov	r0, r1
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	f000 fb4c 	bl	8002f40 <_sbrk>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	d102      	bne.n	80028b2 <_sbrk_r+0x1a>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	b103      	cbz	r3, 80028b2 <_sbrk_r+0x1a>
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	20000248 	.word	0x20000248

080028b8 <__sccl>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	780b      	ldrb	r3, [r1, #0]
 80028bc:	1e44      	subs	r4, r0, #1
 80028be:	2b5e      	cmp	r3, #94	; 0x5e
 80028c0:	bf13      	iteet	ne
 80028c2:	1c4a      	addne	r2, r1, #1
 80028c4:	1c8a      	addeq	r2, r1, #2
 80028c6:	784b      	ldrbeq	r3, [r1, #1]
 80028c8:	2100      	movne	r1, #0
 80028ca:	bf08      	it	eq
 80028cc:	2101      	moveq	r1, #1
 80028ce:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80028d2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80028d6:	42a5      	cmp	r5, r4
 80028d8:	d1fb      	bne.n	80028d2 <__sccl+0x1a>
 80028da:	b913      	cbnz	r3, 80028e2 <__sccl+0x2a>
 80028dc:	3a01      	subs	r2, #1
 80028de:	4610      	mov	r0, r2
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
 80028e2:	f081 0401 	eor.w	r4, r1, #1
 80028e6:	4611      	mov	r1, r2
 80028e8:	54c4      	strb	r4, [r0, r3]
 80028ea:	780d      	ldrb	r5, [r1, #0]
 80028ec:	1c4a      	adds	r2, r1, #1
 80028ee:	2d2d      	cmp	r5, #45	; 0x2d
 80028f0:	d006      	beq.n	8002900 <__sccl+0x48>
 80028f2:	2d5d      	cmp	r5, #93	; 0x5d
 80028f4:	d0f3      	beq.n	80028de <__sccl+0x26>
 80028f6:	b90d      	cbnz	r5, 80028fc <__sccl+0x44>
 80028f8:	460a      	mov	r2, r1
 80028fa:	e7f0      	b.n	80028de <__sccl+0x26>
 80028fc:	462b      	mov	r3, r5
 80028fe:	e7f2      	b.n	80028e6 <__sccl+0x2e>
 8002900:	784e      	ldrb	r6, [r1, #1]
 8002902:	2e5d      	cmp	r6, #93	; 0x5d
 8002904:	d0fa      	beq.n	80028fc <__sccl+0x44>
 8002906:	42b3      	cmp	r3, r6
 8002908:	dcf8      	bgt.n	80028fc <__sccl+0x44>
 800290a:	3102      	adds	r1, #2
 800290c:	3301      	adds	r3, #1
 800290e:	429e      	cmp	r6, r3
 8002910:	54c4      	strb	r4, [r0, r3]
 8002912:	dcfb      	bgt.n	800290c <__sccl+0x54>
 8002914:	e7e9      	b.n	80028ea <__sccl+0x32>

08002916 <__sread>:
 8002916:	b510      	push	{r4, lr}
 8002918:	460c      	mov	r4, r1
 800291a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291e:	f000 fac7 	bl	8002eb0 <_read_r>
 8002922:	2800      	cmp	r0, #0
 8002924:	bfab      	itete	ge
 8002926:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002928:	89a3      	ldrhlt	r3, [r4, #12]
 800292a:	181b      	addge	r3, r3, r0
 800292c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002930:	bfac      	ite	ge
 8002932:	6563      	strge	r3, [r4, #84]	; 0x54
 8002934:	81a3      	strhlt	r3, [r4, #12]
 8002936:	bd10      	pop	{r4, pc}

08002938 <__swrite>:
 8002938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800293c:	461f      	mov	r7, r3
 800293e:	898b      	ldrh	r3, [r1, #12]
 8002940:	4605      	mov	r5, r0
 8002942:	05db      	lsls	r3, r3, #23
 8002944:	460c      	mov	r4, r1
 8002946:	4616      	mov	r6, r2
 8002948:	d505      	bpl.n	8002956 <__swrite+0x1e>
 800294a:	2302      	movs	r3, #2
 800294c:	2200      	movs	r2, #0
 800294e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002952:	f000 fa47 	bl	8002de4 <_lseek_r>
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	4632      	mov	r2, r6
 800295a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800295e:	81a3      	strh	r3, [r4, #12]
 8002960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002964:	463b      	mov	r3, r7
 8002966:	4628      	mov	r0, r5
 8002968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	f000 b9e4 	b.w	8002d38 <_write_r>

08002970 <__sseek>:
 8002970:	b510      	push	{r4, lr}
 8002972:	460c      	mov	r4, r1
 8002974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002978:	f000 fa34 	bl	8002de4 <_lseek_r>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	bf15      	itete	ne
 8002982:	6560      	strne	r0, [r4, #84]	; 0x54
 8002984:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002988:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800298c:	81a3      	strheq	r3, [r4, #12]
 800298e:	bf18      	it	ne
 8002990:	81a3      	strhne	r3, [r4, #12]
 8002992:	bd10      	pop	{r4, pc}

08002994 <__sclose>:
 8002994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002998:	f000 b9e0 	b.w	8002d5c <_close_r>

0800299c <_strtol_l.isra.0>:
 800299c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a0:	4680      	mov	r8, r0
 80029a2:	4689      	mov	r9, r1
 80029a4:	4692      	mov	sl, r2
 80029a6:	461f      	mov	r7, r3
 80029a8:	468b      	mov	fp, r1
 80029aa:	465d      	mov	r5, fp
 80029ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80029b2:	f000 fa05 	bl	8002dc0 <__locale_ctype_ptr_l>
 80029b6:	4420      	add	r0, r4
 80029b8:	7846      	ldrb	r6, [r0, #1]
 80029ba:	f016 0608 	ands.w	r6, r6, #8
 80029be:	d10b      	bne.n	80029d8 <_strtol_l.isra.0+0x3c>
 80029c0:	2c2d      	cmp	r4, #45	; 0x2d
 80029c2:	d10b      	bne.n	80029dc <_strtol_l.isra.0+0x40>
 80029c4:	2601      	movs	r6, #1
 80029c6:	782c      	ldrb	r4, [r5, #0]
 80029c8:	f10b 0502 	add.w	r5, fp, #2
 80029cc:	b167      	cbz	r7, 80029e8 <_strtol_l.isra.0+0x4c>
 80029ce:	2f10      	cmp	r7, #16
 80029d0:	d114      	bne.n	80029fc <_strtol_l.isra.0+0x60>
 80029d2:	2c30      	cmp	r4, #48	; 0x30
 80029d4:	d00a      	beq.n	80029ec <_strtol_l.isra.0+0x50>
 80029d6:	e011      	b.n	80029fc <_strtol_l.isra.0+0x60>
 80029d8:	46ab      	mov	fp, r5
 80029da:	e7e6      	b.n	80029aa <_strtol_l.isra.0+0xe>
 80029dc:	2c2b      	cmp	r4, #43	; 0x2b
 80029de:	bf04      	itt	eq
 80029e0:	782c      	ldrbeq	r4, [r5, #0]
 80029e2:	f10b 0502 	addeq.w	r5, fp, #2
 80029e6:	e7f1      	b.n	80029cc <_strtol_l.isra.0+0x30>
 80029e8:	2c30      	cmp	r4, #48	; 0x30
 80029ea:	d127      	bne.n	8002a3c <_strtol_l.isra.0+0xa0>
 80029ec:	782b      	ldrb	r3, [r5, #0]
 80029ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80029f2:	2b58      	cmp	r3, #88	; 0x58
 80029f4:	d14b      	bne.n	8002a8e <_strtol_l.isra.0+0xf2>
 80029f6:	2710      	movs	r7, #16
 80029f8:	786c      	ldrb	r4, [r5, #1]
 80029fa:	3502      	adds	r5, #2
 80029fc:	2e00      	cmp	r6, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002a04:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002a08:	2200      	movs	r2, #0
 8002a0a:	fbb1 fef7 	udiv	lr, r1, r7
 8002a0e:	4610      	mov	r0, r2
 8002a10:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002a14:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d811      	bhi.n	8002a40 <_strtol_l.isra.0+0xa4>
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	42a7      	cmp	r7, r4
 8002a20:	dd1d      	ble.n	8002a5e <_strtol_l.isra.0+0xc2>
 8002a22:	1c53      	adds	r3, r2, #1
 8002a24:	d007      	beq.n	8002a36 <_strtol_l.isra.0+0x9a>
 8002a26:	4586      	cmp	lr, r0
 8002a28:	d316      	bcc.n	8002a58 <_strtol_l.isra.0+0xbc>
 8002a2a:	d101      	bne.n	8002a30 <_strtol_l.isra.0+0x94>
 8002a2c:	45a4      	cmp	ip, r4
 8002a2e:	db13      	blt.n	8002a58 <_strtol_l.isra.0+0xbc>
 8002a30:	2201      	movs	r2, #1
 8002a32:	fb00 4007 	mla	r0, r0, r7, r4
 8002a36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a3a:	e7eb      	b.n	8002a14 <_strtol_l.isra.0+0x78>
 8002a3c:	270a      	movs	r7, #10
 8002a3e:	e7dd      	b.n	80029fc <_strtol_l.isra.0+0x60>
 8002a40:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002a44:	2b19      	cmp	r3, #25
 8002a46:	d801      	bhi.n	8002a4c <_strtol_l.isra.0+0xb0>
 8002a48:	3c37      	subs	r4, #55	; 0x37
 8002a4a:	e7e8      	b.n	8002a1e <_strtol_l.isra.0+0x82>
 8002a4c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002a50:	2b19      	cmp	r3, #25
 8002a52:	d804      	bhi.n	8002a5e <_strtol_l.isra.0+0xc2>
 8002a54:	3c57      	subs	r4, #87	; 0x57
 8002a56:	e7e2      	b.n	8002a1e <_strtol_l.isra.0+0x82>
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	e7eb      	b.n	8002a36 <_strtol_l.isra.0+0x9a>
 8002a5e:	1c53      	adds	r3, r2, #1
 8002a60:	d108      	bne.n	8002a74 <_strtol_l.isra.0+0xd8>
 8002a62:	2322      	movs	r3, #34	; 0x22
 8002a64:	4608      	mov	r0, r1
 8002a66:	f8c8 3000 	str.w	r3, [r8]
 8002a6a:	f1ba 0f00 	cmp.w	sl, #0
 8002a6e:	d107      	bne.n	8002a80 <_strtol_l.isra.0+0xe4>
 8002a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a74:	b106      	cbz	r6, 8002a78 <_strtol_l.isra.0+0xdc>
 8002a76:	4240      	negs	r0, r0
 8002a78:	f1ba 0f00 	cmp.w	sl, #0
 8002a7c:	d00c      	beq.n	8002a98 <_strtol_l.isra.0+0xfc>
 8002a7e:	b122      	cbz	r2, 8002a8a <_strtol_l.isra.0+0xee>
 8002a80:	3d01      	subs	r5, #1
 8002a82:	f8ca 5000 	str.w	r5, [sl]
 8002a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8a:	464d      	mov	r5, r9
 8002a8c:	e7f9      	b.n	8002a82 <_strtol_l.isra.0+0xe6>
 8002a8e:	2430      	movs	r4, #48	; 0x30
 8002a90:	2f00      	cmp	r7, #0
 8002a92:	d1b3      	bne.n	80029fc <_strtol_l.isra.0+0x60>
 8002a94:	2708      	movs	r7, #8
 8002a96:	e7b1      	b.n	80029fc <_strtol_l.isra.0+0x60>
 8002a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a9c <_strtol_r>:
 8002a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a9e:	4c06      	ldr	r4, [pc, #24]	; (8002ab8 <_strtol_r+0x1c>)
 8002aa0:	4d06      	ldr	r5, [pc, #24]	; (8002abc <_strtol_r+0x20>)
 8002aa2:	6824      	ldr	r4, [r4, #0]
 8002aa4:	6a24      	ldr	r4, [r4, #32]
 8002aa6:	2c00      	cmp	r4, #0
 8002aa8:	bf08      	it	eq
 8002aaa:	462c      	moveq	r4, r5
 8002aac:	9400      	str	r4, [sp, #0]
 8002aae:	f7ff ff75 	bl	800299c <_strtol_l.isra.0>
 8002ab2:	b003      	add	sp, #12
 8002ab4:	bd30      	pop	{r4, r5, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000000c 	.word	0x2000000c
 8002abc:	20000070 	.word	0x20000070

08002ac0 <_strtoul_l.isra.0>:
 8002ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	4689      	mov	r9, r1
 8002ac8:	4692      	mov	sl, r2
 8002aca:	461e      	mov	r6, r3
 8002acc:	460f      	mov	r7, r1
 8002ace:	463d      	mov	r5, r7
 8002ad0:	9808      	ldr	r0, [sp, #32]
 8002ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ad6:	f000 f973 	bl	8002dc0 <__locale_ctype_ptr_l>
 8002ada:	4420      	add	r0, r4
 8002adc:	7843      	ldrb	r3, [r0, #1]
 8002ade:	f013 0308 	ands.w	r3, r3, #8
 8002ae2:	d10a      	bne.n	8002afa <_strtoul_l.isra.0+0x3a>
 8002ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8002ae6:	d10a      	bne.n	8002afe <_strtoul_l.isra.0+0x3e>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	782c      	ldrb	r4, [r5, #0]
 8002aec:	1cbd      	adds	r5, r7, #2
 8002aee:	b15e      	cbz	r6, 8002b08 <_strtoul_l.isra.0+0x48>
 8002af0:	2e10      	cmp	r6, #16
 8002af2:	d113      	bne.n	8002b1c <_strtoul_l.isra.0+0x5c>
 8002af4:	2c30      	cmp	r4, #48	; 0x30
 8002af6:	d009      	beq.n	8002b0c <_strtoul_l.isra.0+0x4c>
 8002af8:	e010      	b.n	8002b1c <_strtoul_l.isra.0+0x5c>
 8002afa:	462f      	mov	r7, r5
 8002afc:	e7e7      	b.n	8002ace <_strtoul_l.isra.0+0xe>
 8002afe:	2c2b      	cmp	r4, #43	; 0x2b
 8002b00:	bf04      	itt	eq
 8002b02:	782c      	ldrbeq	r4, [r5, #0]
 8002b04:	1cbd      	addeq	r5, r7, #2
 8002b06:	e7f2      	b.n	8002aee <_strtoul_l.isra.0+0x2e>
 8002b08:	2c30      	cmp	r4, #48	; 0x30
 8002b0a:	d125      	bne.n	8002b58 <_strtoul_l.isra.0+0x98>
 8002b0c:	782a      	ldrb	r2, [r5, #0]
 8002b0e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002b12:	2a58      	cmp	r2, #88	; 0x58
 8002b14:	d14a      	bne.n	8002bac <_strtoul_l.isra.0+0xec>
 8002b16:	2610      	movs	r6, #16
 8002b18:	786c      	ldrb	r4, [r5, #1]
 8002b1a:	3502      	adds	r5, #2
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	fbb1 f1f6 	udiv	r1, r1, r6
 8002b24:	2700      	movs	r7, #0
 8002b26:	fb06 fe01 	mul.w	lr, r6, r1
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	ea6f 0e0e 	mvn.w	lr, lr
 8002b30:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8002b34:	2a09      	cmp	r2, #9
 8002b36:	d811      	bhi.n	8002b5c <_strtoul_l.isra.0+0x9c>
 8002b38:	4614      	mov	r4, r2
 8002b3a:	42a6      	cmp	r6, r4
 8002b3c:	dd1d      	ble.n	8002b7a <_strtoul_l.isra.0+0xba>
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	db18      	blt.n	8002b74 <_strtoul_l.isra.0+0xb4>
 8002b42:	4281      	cmp	r1, r0
 8002b44:	d316      	bcc.n	8002b74 <_strtoul_l.isra.0+0xb4>
 8002b46:	d101      	bne.n	8002b4c <_strtoul_l.isra.0+0x8c>
 8002b48:	45a6      	cmp	lr, r4
 8002b4a:	db13      	blt.n	8002b74 <_strtoul_l.isra.0+0xb4>
 8002b4c:	2701      	movs	r7, #1
 8002b4e:	fb00 4006 	mla	r0, r0, r6, r4
 8002b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002b56:	e7eb      	b.n	8002b30 <_strtoul_l.isra.0+0x70>
 8002b58:	260a      	movs	r6, #10
 8002b5a:	e7df      	b.n	8002b1c <_strtoul_l.isra.0+0x5c>
 8002b5c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8002b60:	2a19      	cmp	r2, #25
 8002b62:	d801      	bhi.n	8002b68 <_strtoul_l.isra.0+0xa8>
 8002b64:	3c37      	subs	r4, #55	; 0x37
 8002b66:	e7e8      	b.n	8002b3a <_strtoul_l.isra.0+0x7a>
 8002b68:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8002b6c:	2a19      	cmp	r2, #25
 8002b6e:	d804      	bhi.n	8002b7a <_strtoul_l.isra.0+0xba>
 8002b70:	3c57      	subs	r4, #87	; 0x57
 8002b72:	e7e2      	b.n	8002b3a <_strtoul_l.isra.0+0x7a>
 8002b74:	f04f 37ff 	mov.w	r7, #4294967295
 8002b78:	e7eb      	b.n	8002b52 <_strtoul_l.isra.0+0x92>
 8002b7a:	2f00      	cmp	r7, #0
 8002b7c:	da09      	bge.n	8002b92 <_strtoul_l.isra.0+0xd2>
 8002b7e:	2322      	movs	r3, #34	; 0x22
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f8c8 3000 	str.w	r3, [r8]
 8002b88:	f1ba 0f00 	cmp.w	sl, #0
 8002b8c:	d107      	bne.n	8002b9e <_strtoul_l.isra.0+0xde>
 8002b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b92:	b103      	cbz	r3, 8002b96 <_strtoul_l.isra.0+0xd6>
 8002b94:	4240      	negs	r0, r0
 8002b96:	f1ba 0f00 	cmp.w	sl, #0
 8002b9a:	d00c      	beq.n	8002bb6 <_strtoul_l.isra.0+0xf6>
 8002b9c:	b127      	cbz	r7, 8002ba8 <_strtoul_l.isra.0+0xe8>
 8002b9e:	3d01      	subs	r5, #1
 8002ba0:	f8ca 5000 	str.w	r5, [sl]
 8002ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba8:	464d      	mov	r5, r9
 8002baa:	e7f9      	b.n	8002ba0 <_strtoul_l.isra.0+0xe0>
 8002bac:	2430      	movs	r4, #48	; 0x30
 8002bae:	2e00      	cmp	r6, #0
 8002bb0:	d1b4      	bne.n	8002b1c <_strtoul_l.isra.0+0x5c>
 8002bb2:	2608      	movs	r6, #8
 8002bb4:	e7b2      	b.n	8002b1c <_strtoul_l.isra.0+0x5c>
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002bbc <_strtoul_r>:
 8002bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bbe:	4c06      	ldr	r4, [pc, #24]	; (8002bd8 <_strtoul_r+0x1c>)
 8002bc0:	4d06      	ldr	r5, [pc, #24]	; (8002bdc <_strtoul_r+0x20>)
 8002bc2:	6824      	ldr	r4, [r4, #0]
 8002bc4:	6a24      	ldr	r4, [r4, #32]
 8002bc6:	2c00      	cmp	r4, #0
 8002bc8:	bf08      	it	eq
 8002bca:	462c      	moveq	r4, r5
 8002bcc:	9400      	str	r4, [sp, #0]
 8002bce:	f7ff ff77 	bl	8002ac0 <_strtoul_l.isra.0>
 8002bd2:	b003      	add	sp, #12
 8002bd4:	bd30      	pop	{r4, r5, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	20000070 	.word	0x20000070

08002be0 <__submore>:
 8002be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be4:	460c      	mov	r4, r1
 8002be6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bec:	4299      	cmp	r1, r3
 8002bee:	d11c      	bne.n	8002c2a <__submore+0x4a>
 8002bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bf4:	f7fe ffb0 	bl	8001b58 <_malloc_r>
 8002bf8:	b918      	cbnz	r0, 8002c02 <__submore+0x22>
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002c12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002c1a:	7043      	strb	r3, [r0, #1]
 8002c1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c20:	7003      	strb	r3, [r0, #0]
 8002c22:	6020      	str	r0, [r4, #0]
 8002c24:	2000      	movs	r0, #0
 8002c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c2a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002c2c:	0077      	lsls	r7, r6, #1
 8002c2e:	463a      	mov	r2, r7
 8002c30:	f000 f917 	bl	8002e62 <_realloc_r>
 8002c34:	4605      	mov	r5, r0
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0df      	beq.n	8002bfa <__submore+0x1a>
 8002c3a:	eb00 0806 	add.w	r8, r0, r6
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4632      	mov	r2, r6
 8002c42:	4640      	mov	r0, r8
 8002c44:	f000 f900 	bl	8002e48 <memcpy>
 8002c48:	f8c4 8000 	str.w	r8, [r4]
 8002c4c:	6365      	str	r5, [r4, #52]	; 0x34
 8002c4e:	63a7      	str	r7, [r4, #56]	; 0x38
 8002c50:	e7e8      	b.n	8002c24 <__submore+0x44>
	...

08002c54 <_ungetc_r>:
 8002c54:	1c4b      	adds	r3, r1, #1
 8002c56:	b570      	push	{r4, r5, r6, lr}
 8002c58:	4606      	mov	r6, r0
 8002c5a:	460d      	mov	r5, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	d103      	bne.n	8002c68 <_ungetc_r+0x14>
 8002c60:	f04f 35ff 	mov.w	r5, #4294967295
 8002c64:	4628      	mov	r0, r5
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	b118      	cbz	r0, 8002c72 <_ungetc_r+0x1e>
 8002c6a:	6983      	ldr	r3, [r0, #24]
 8002c6c:	b90b      	cbnz	r3, 8002c72 <_ungetc_r+0x1e>
 8002c6e:	f7fe fe15 	bl	800189c <__sinit>
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <_ungetc_r+0xd8>)
 8002c74:	429c      	cmp	r4, r3
 8002c76:	d12c      	bne.n	8002cd2 <_ungetc_r+0x7e>
 8002c78:	6874      	ldr	r4, [r6, #4]
 8002c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c7e:	f023 0320 	bic.w	r3, r3, #32
 8002c82:	81a3      	strh	r3, [r4, #12]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	0759      	lsls	r1, r3, #29
 8002c88:	d413      	bmi.n	8002cb2 <_ungetc_r+0x5e>
 8002c8a:	06da      	lsls	r2, r3, #27
 8002c8c:	d5e8      	bpl.n	8002c60 <_ungetc_r+0xc>
 8002c8e:	071b      	lsls	r3, r3, #28
 8002c90:	d50b      	bpl.n	8002caa <_ungetc_r+0x56>
 8002c92:	4621      	mov	r1, r4
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7fe fd85 	bl	80017a4 <_fflush_r>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d1e0      	bne.n	8002c60 <_ungetc_r+0xc>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	60a0      	str	r0, [r4, #8]
 8002ca2:	f023 0308 	bic.w	r3, r3, #8
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	61a0      	str	r0, [r4, #24]
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	81a3      	strh	r3, [r4, #12]
 8002cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cb4:	b2ed      	uxtb	r5, r5
 8002cb6:	6862      	ldr	r2, [r4, #4]
 8002cb8:	b1e3      	cbz	r3, 8002cf4 <_ungetc_r+0xa0>
 8002cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	da12      	bge.n	8002ce6 <_ungetc_r+0x92>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	6022      	str	r2, [r4, #0]
 8002cc6:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002cca:	6863      	ldr	r3, [r4, #4]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	6063      	str	r3, [r4, #4]
 8002cd0:	e7c8      	b.n	8002c64 <_ungetc_r+0x10>
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <_ungetc_r+0xdc>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	d101      	bne.n	8002cdc <_ungetc_r+0x88>
 8002cd8:	68b4      	ldr	r4, [r6, #8]
 8002cda:	e7ce      	b.n	8002c7a <_ungetc_r+0x26>
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <_ungetc_r+0xe0>)
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	bf08      	it	eq
 8002ce2:	68f4      	ldreq	r4, [r6, #12]
 8002ce4:	e7c9      	b.n	8002c7a <_ungetc_r+0x26>
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f7ff ff79 	bl	8002be0 <__submore>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d0e6      	beq.n	8002cc0 <_ungetc_r+0x6c>
 8002cf2:	e7b5      	b.n	8002c60 <_ungetc_r+0xc>
 8002cf4:	6921      	ldr	r1, [r4, #16]
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	b151      	cbz	r1, 8002d10 <_ungetc_r+0xbc>
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	d208      	bcs.n	8002d10 <_ungetc_r+0xbc>
 8002cfe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002d02:	428d      	cmp	r5, r1
 8002d04:	d104      	bne.n	8002d10 <_ungetc_r+0xbc>
 8002d06:	3b01      	subs	r3, #1
 8002d08:	3201      	adds	r2, #1
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	6062      	str	r2, [r4, #4]
 8002d0e:	e7a9      	b.n	8002c64 <_ungetc_r+0x10>
 8002d10:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d16:	6363      	str	r3, [r4, #52]	; 0x34
 8002d18:	2303      	movs	r3, #3
 8002d1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	6422      	str	r2, [r4, #64]	; 0x40
 8002d20:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	e7d1      	b.n	8002cce <_ungetc_r+0x7a>
 8002d2a:	bf00      	nop
 8002d2c:	08002ffc 	.word	0x08002ffc
 8002d30:	0800301c 	.word	0x0800301c
 8002d34:	08002fdc 	.word	0x08002fdc

08002d38 <_write_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	2200      	movs	r2, #0
 8002d42:	4c05      	ldr	r4, [pc, #20]	; (8002d58 <_write_r+0x20>)
 8002d44:	6022      	str	r2, [r4, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f7fe f918 	bl	8000f7c <_write>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_write_r+0x1e>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_write_r+0x1e>
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	20000248 	.word	0x20000248

08002d5c <_close_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	2300      	movs	r3, #0
 8002d60:	4c05      	ldr	r4, [pc, #20]	; (8002d78 <_close_r+0x1c>)
 8002d62:	4605      	mov	r5, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	f000 f8ca 	bl	8002f00 <_close>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	d102      	bne.n	8002d76 <_close_r+0x1a>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	b103      	cbz	r3, 8002d76 <_close_r+0x1a>
 8002d74:	602b      	str	r3, [r5, #0]
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	20000248 	.word	0x20000248

08002d7c <_fstat_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4c06      	ldr	r4, [pc, #24]	; (8002d9c <_fstat_r+0x20>)
 8002d82:	4605      	mov	r5, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	f000 f8c1 	bl	8002f10 <_fstat>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d102      	bne.n	8002d98 <_fstat_r+0x1c>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	b103      	cbz	r3, 8002d98 <_fstat_r+0x1c>
 8002d96:	602b      	str	r3, [r5, #0]
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000248 	.word	0x20000248

08002da0 <_isatty_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	2300      	movs	r3, #0
 8002da4:	4c05      	ldr	r4, [pc, #20]	; (8002dbc <_isatty_r+0x1c>)
 8002da6:	4605      	mov	r5, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	f000 f8b8 	bl	8002f20 <_isatty>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_isatty_r+0x1a>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_isatty_r+0x1a>
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000248 	.word	0x20000248

08002dc0 <__locale_ctype_ptr_l>:
 8002dc0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002dc4:	4770      	bx	lr
	...

08002dc8 <__locale_ctype_ptr>:
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <__locale_ctype_ptr+0x14>)
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <__locale_ctype_ptr+0x18>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf08      	it	eq
 8002dd4:	4613      	moveq	r3, r2
 8002dd6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8002dda:	4770      	bx	lr
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000070 	.word	0x20000070

08002de4 <_lseek_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4605      	mov	r5, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	4c05      	ldr	r4, [pc, #20]	; (8002e04 <_lseek_r+0x20>)
 8002df0:	6022      	str	r2, [r4, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f89c 	bl	8002f30 <_lseek>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_lseek_r+0x1e>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_lseek_r+0x1e>
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	20000248 	.word	0x20000248

08002e08 <__ascii_mbtowc>:
 8002e08:	b082      	sub	sp, #8
 8002e0a:	b901      	cbnz	r1, 8002e0e <__ascii_mbtowc+0x6>
 8002e0c:	a901      	add	r1, sp, #4
 8002e0e:	b142      	cbz	r2, 8002e22 <__ascii_mbtowc+0x1a>
 8002e10:	b14b      	cbz	r3, 8002e26 <__ascii_mbtowc+0x1e>
 8002e12:	7813      	ldrb	r3, [r2, #0]
 8002e14:	600b      	str	r3, [r1, #0]
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	1c10      	adds	r0, r2, #0
 8002e1a:	bf18      	it	ne
 8002e1c:	2001      	movne	r0, #1
 8002e1e:	b002      	add	sp, #8
 8002e20:	4770      	bx	lr
 8002e22:	4610      	mov	r0, r2
 8002e24:	e7fb      	b.n	8002e1e <__ascii_mbtowc+0x16>
 8002e26:	f06f 0001 	mvn.w	r0, #1
 8002e2a:	e7f8      	b.n	8002e1e <__ascii_mbtowc+0x16>

08002e2c <memchr>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	b2c9      	uxtb	r1, r1
 8002e30:	4402      	add	r2, r0
 8002e32:	4290      	cmp	r0, r2
 8002e34:	4603      	mov	r3, r0
 8002e36:	d101      	bne.n	8002e3c <memchr+0x10>
 8002e38:	2000      	movs	r0, #0
 8002e3a:	bd10      	pop	{r4, pc}
 8002e3c:	781c      	ldrb	r4, [r3, #0]
 8002e3e:	3001      	adds	r0, #1
 8002e40:	428c      	cmp	r4, r1
 8002e42:	d1f6      	bne.n	8002e32 <memchr+0x6>
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <memcpy>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	1e43      	subs	r3, r0, #1
 8002e4c:	440a      	add	r2, r1
 8002e4e:	4291      	cmp	r1, r2
 8002e50:	d100      	bne.n	8002e54 <memcpy+0xc>
 8002e52:	bd10      	pop	{r4, pc}
 8002e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e5c:	e7f7      	b.n	8002e4e <memcpy+0x6>

08002e5e <__malloc_lock>:
 8002e5e:	4770      	bx	lr

08002e60 <__malloc_unlock>:
 8002e60:	4770      	bx	lr

08002e62 <_realloc_r>:
 8002e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e64:	4607      	mov	r7, r0
 8002e66:	4614      	mov	r4, r2
 8002e68:	460e      	mov	r6, r1
 8002e6a:	b921      	cbnz	r1, 8002e76 <_realloc_r+0x14>
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e72:	f7fe be71 	b.w	8001b58 <_malloc_r>
 8002e76:	b922      	cbnz	r2, 8002e82 <_realloc_r+0x20>
 8002e78:	f7fe fe22 	bl	8001ac0 <_free_r>
 8002e7c:	4625      	mov	r5, r4
 8002e7e:	4628      	mov	r0, r5
 8002e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e82:	f000 f834 	bl	8002eee <_malloc_usable_size_r>
 8002e86:	4284      	cmp	r4, r0
 8002e88:	d90f      	bls.n	8002eaa <_realloc_r+0x48>
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	f7fe fe63 	bl	8001b58 <_malloc_r>
 8002e92:	4605      	mov	r5, r0
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d0f2      	beq.n	8002e7e <_realloc_r+0x1c>
 8002e98:	4631      	mov	r1, r6
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	f7ff ffd4 	bl	8002e48 <memcpy>
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	f7fe fe0c 	bl	8001ac0 <_free_r>
 8002ea8:	e7e9      	b.n	8002e7e <_realloc_r+0x1c>
 8002eaa:	4635      	mov	r5, r6
 8002eac:	e7e7      	b.n	8002e7e <_realloc_r+0x1c>
	...

08002eb0 <_read_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4605      	mov	r5, r0
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4c05      	ldr	r4, [pc, #20]	; (8002ed0 <_read_r+0x20>)
 8002ebc:	6022      	str	r2, [r4, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7fe f86c 	bl	8000f9c <_read>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_read_r+0x1e>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_read_r+0x1e>
 8002ecc:	602b      	str	r3, [r5, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000248 	.word	0x20000248

08002ed4 <__ascii_wctomb>:
 8002ed4:	b149      	cbz	r1, 8002eea <__ascii_wctomb+0x16>
 8002ed6:	2aff      	cmp	r2, #255	; 0xff
 8002ed8:	bf8b      	itete	hi
 8002eda:	238a      	movhi	r3, #138	; 0x8a
 8002edc:	700a      	strbls	r2, [r1, #0]
 8002ede:	6003      	strhi	r3, [r0, #0]
 8002ee0:	2001      	movls	r0, #1
 8002ee2:	bf88      	it	hi
 8002ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8002ee8:	4770      	bx	lr
 8002eea:	4608      	mov	r0, r1
 8002eec:	4770      	bx	lr

08002eee <_malloc_usable_size_r>:
 8002eee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	f1a0 0004 	sub.w	r0, r0, #4
 8002ef8:	bfbc      	itt	lt
 8002efa:	580b      	ldrlt	r3, [r1, r0]
 8002efc:	18c0      	addlt	r0, r0, r3
 8002efe:	4770      	bx	lr

08002f00 <_close>:
 8002f00:	2258      	movs	r2, #88	; 0x58
 8002f02:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <_close+0xc>)
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	4770      	bx	lr
 8002f0c:	20000248 	.word	0x20000248

08002f10 <_fstat>:
 8002f10:	2258      	movs	r2, #88	; 0x58
 8002f12:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <_fstat+0xc>)
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4770      	bx	lr
 8002f1c:	20000248 	.word	0x20000248

08002f20 <_isatty>:
 8002f20:	2258      	movs	r2, #88	; 0x58
 8002f22:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <_isatty+0xc>)
 8002f24:	2000      	movs	r0, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000248 	.word	0x20000248

08002f30 <_lseek>:
 8002f30:	2258      	movs	r2, #88	; 0x58
 8002f32:	4b02      	ldr	r3, [pc, #8]	; (8002f3c <_lseek+0xc>)
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	4770      	bx	lr
 8002f3c:	20000248 	.word	0x20000248

08002f40 <_sbrk>:
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <_sbrk+0x14>)
 8002f42:	4602      	mov	r2, r0
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	b909      	cbnz	r1, 8002f4c <_sbrk+0xc>
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <_sbrk+0x18>)
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	4402      	add	r2, r0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	4770      	bx	lr
 8002f54:	20000200 	.word	0x20000200
 8002f58:	2000024c 	.word	0x2000024c

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
